{"version":3,"file":"static/js/326.0f3251ac.chunk.js","mappings":"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","sources":["../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../node_modules/@hitachivantara/uikit-react-core/src/Card/Content/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/Card/Content/Content.js","../node_modules/@babel/runtime/helpers/esm/construct.js","../node_modules/@babel/runtime/helpers/esm/wrapNativeSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeFunction.js","../node_modules/graphql/jsutils/invariant.mjs","../node_modules/graphql/language/location.mjs","../node_modules/graphql/language/printLocation.mjs","../node_modules/graphql/error/GraphQLError.mjs","../node_modules/graphql/jsutils/isObjectLike.mjs","../node_modules/graphql/error/syntaxError.mjs","../node_modules/graphql/language/tokenKind.mjs","../node_modules/graphql/language/directiveLocation.mjs","../node_modules/graphql/language/lexer.mjs","../node_modules/graphql/language/parser.mjs","../node_modules/graphql-tag/src/index.ts","../node_modules/@babel/runtime/helpers/esm/taggedTemplateLiteral.js","../node_modules/@apollo/src/react/parser/index.ts","../node_modules/@apollo/src/react/hooks/useQuery.ts","../node_modules/@apollo/src/react/hooks/useApolloClient.ts"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","const styles = (theme) => ({\n  content: {\n    padding: theme.hvSpacing(0, \"sm\", \"15px\", \"sm\"),\n    \"&:last-child\": {\n      paddingBottom: theme.hv.spacing.sm, // Overrides MUI padding\n    },\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { CardContent, withStyles } from \"@material-ui/core\";\nimport styles from \"./styles\";\n\n/**\n * The content container for the card.\n */\nexport const Content = (props) => {\n  const { id, classes, className, children, onClick, ...others } = props;\n  return (\n    <CardContent id={id} className={clsx(classes.content, className)} onClick={onClick} {...others}>\n      {children}\n    </CardContent>\n  );\n};\n\nContent.propTypes = {\n  /**\n   * Id to be applied to the root node.\n   */\n  id: PropTypes.string,\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Style applied to the root component.\n     */\n    content: PropTypes.string,\n  }).isRequired,\n  /**\n   *  The renderable content inside the body of the card.\n   */\n  children: PropTypes.node,\n  /**\n   *  The function that will be executed when this section is clicked.\n   */\n  onClick: PropTypes.func,\n};\n\nexport default withStyles(styles, { name: \"HvCardContent\" })(Content);\n","import setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nexport default function _construct(Parent, args, Class) {\n  if (isNativeReflectConstruct()) {\n    _construct = Reflect.construct;\n  } else {\n    _construct = function _construct(Parent, args, Class) {\n      var a = [null];\n      a.push.apply(a, args);\n      var Constructor = Function.bind.apply(Parent, a);\n      var instance = new Constructor();\n      if (Class) setPrototypeOf(instance, Class.prototype);\n      return instance;\n    };\n  }\n\n  return _construct.apply(null, arguments);\n}","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport setPrototypeOf from \"./setPrototypeOf.js\";\nimport isNativeFunction from \"./isNativeFunction.js\";\nimport construct from \"./construct.js\";\nexport default function _wrapNativeSuper(Class) {\n  var _cache = typeof Map === \"function\" ? new Map() : undefined;\n\n  _wrapNativeSuper = function _wrapNativeSuper(Class) {\n    if (Class === null || !isNativeFunction(Class)) return Class;\n\n    if (typeof Class !== \"function\") {\n      throw new TypeError(\"Super expression must either be null or a function\");\n    }\n\n    if (typeof _cache !== \"undefined\") {\n      if (_cache.has(Class)) return _cache.get(Class);\n\n      _cache.set(Class, Wrapper);\n    }\n\n    function Wrapper() {\n      return construct(Class, arguments, getPrototypeOf(this).constructor);\n    }\n\n    Wrapper.prototype = Object.create(Class.prototype, {\n      constructor: {\n        value: Wrapper,\n        enumerable: false,\n        writable: true,\n        configurable: true\n      }\n    });\n    return setPrototypeOf(Wrapper, Class);\n  };\n\n  return _wrapNativeSuper(Class);\n}","export default function _isNativeFunction(fn) {\n  return Function.toString.call(fn).indexOf(\"[native code]\") !== -1;\n}","export function invariant(condition, message) {\n  const booleanCondition = Boolean(condition);\n\n  if (!booleanCondition) {\n    throw new Error(\n      message != null ? message : 'Unexpected invariant triggered.',\n    );\n  }\n}\n","import { invariant } from '../jsutils/invariant.mjs';\nconst LineRegExp = /\\r\\n|[\\n\\r]/g;\n/**\n * Represents a location in a Source.\n */\n\n/**\n * Takes a Source and a UTF-8 character offset, and returns the corresponding\n * line and column as a SourceLocation.\n */\nexport function getLocation(source, position) {\n  let lastLineStart = 0;\n  let line = 1;\n\n  for (const match of source.body.matchAll(LineRegExp)) {\n    typeof match.index === 'number' || invariant(false);\n\n    if (match.index >= position) {\n      break;\n    }\n\n    lastLineStart = match.index + match[0].length;\n    line += 1;\n  }\n\n  return {\n    line,\n    column: position + 1 - lastLineStart,\n  };\n}\n","import { getLocation } from './location.mjs';\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printLocation(location) {\n  return printSourceLocation(\n    location.source,\n    getLocation(location.source, location.start),\n  );\n}\n/**\n * Render a helpful description of the location in the GraphQL Source document.\n */\n\nexport function printSourceLocation(source, sourceLocation) {\n  const firstLineColumnOffset = source.locationOffset.column - 1;\n  const body = ''.padStart(firstLineColumnOffset) + source.body;\n  const lineIndex = sourceLocation.line - 1;\n  const lineOffset = source.locationOffset.line - 1;\n  const lineNum = sourceLocation.line + lineOffset;\n  const columnOffset = sourceLocation.line === 1 ? firstLineColumnOffset : 0;\n  const columnNum = sourceLocation.column + columnOffset;\n  const locationStr = `${source.name}:${lineNum}:${columnNum}\\n`;\n  const lines = body.split(/\\r\\n|[\\n\\r]/g);\n  const locationLine = lines[lineIndex]; // Special case for minified documents\n\n  if (locationLine.length > 120) {\n    const subLineIndex = Math.floor(columnNum / 80);\n    const subLineColumnNum = columnNum % 80;\n    const subLines = [];\n\n    for (let i = 0; i < locationLine.length; i += 80) {\n      subLines.push(locationLine.slice(i, i + 80));\n    }\n\n    return (\n      locationStr +\n      printPrefixedLines([\n        [`${lineNum} |`, subLines[0]],\n        ...subLines.slice(1, subLineIndex + 1).map((subLine) => ['|', subLine]),\n        ['|', '^'.padStart(subLineColumnNum)],\n        ['|', subLines[subLineIndex + 1]],\n      ])\n    );\n  }\n\n  return (\n    locationStr +\n    printPrefixedLines([\n      // Lines specified like this: [\"prefix\", \"string\"],\n      [`${lineNum - 1} |`, lines[lineIndex - 1]],\n      [`${lineNum} |`, locationLine],\n      ['|', '^'.padStart(columnNum)],\n      [`${lineNum + 1} |`, lines[lineIndex + 1]],\n    ])\n  );\n}\n\nfunction printPrefixedLines(lines) {\n  const existingLines = lines.filter(([_, line]) => line !== undefined);\n  const padLen = Math.max(...existingLines.map(([prefix]) => prefix.length));\n  return existingLines\n    .map(([prefix, line]) => prefix.padStart(padLen) + (line ? ' ' + line : ''))\n    .join('\\n');\n}\n","import { isObjectLike } from '../jsutils/isObjectLike.mjs';\nimport { getLocation } from '../language/location.mjs';\nimport {\n  printLocation,\n  printSourceLocation,\n} from '../language/printLocation.mjs';\n/**\n * Custom extensions\n *\n * @remarks\n * Use a unique identifier name for your extension, for example the name of\n * your library or project. Do not use a shortened identifier as this increases\n * the risk of conflicts. We recommend you add at most one extension field,\n * an object which can contain all the values you need.\n */\n\n/**\n * A GraphQLError describes an Error found during the parse, validate, or\n * execute phases of performing a GraphQL operation. In addition to a message\n * and stack trace, it also includes information about the locations in a\n * GraphQL document and/or execution result that correspond to the Error.\n */\nexport class GraphQLError extends Error {\n  /**\n   * An array of `{ line, column }` locations within the source GraphQL document\n   * which correspond to this error.\n   *\n   * Errors during validation often contain multiple locations, for example to\n   * point out two things with the same name. Errors during execution include a\n   * single location, the field which produced the error.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array describing the JSON-path into the execution response which\n   * corresponds to this error. Only included for errors during execution.\n   *\n   * Enumerable, and appears in the result of JSON.stringify().\n   */\n\n  /**\n   * An array of GraphQL AST Nodes corresponding to this error.\n   */\n\n  /**\n   * The source GraphQL document for the first location of this error.\n   *\n   * Note that if this Error represents more than one node, the source may not\n   * represent nodes after the first node.\n   */\n\n  /**\n   * An array of character offsets within the source GraphQL document\n   * which correspond to this error.\n   */\n\n  /**\n   * The original error thrown from a field resolver during execution.\n   */\n\n  /**\n   * Extension fields to add to the formatted error.\n   */\n  constructor(\n    message,\n    nodes,\n    source,\n    positions,\n    path,\n    originalError,\n    extensions,\n  ) {\n    var _this$nodes, _nodeLocations$, _ref;\n\n    super(message);\n    this.name = 'GraphQLError';\n    this.path = path !== null && path !== void 0 ? path : undefined;\n    this.originalError =\n      originalError !== null && originalError !== void 0\n        ? originalError\n        : undefined; // Compute list of blame nodes.\n\n    this.nodes = undefinedIfEmpty(\n      Array.isArray(nodes) ? nodes : nodes ? [nodes] : undefined,\n    );\n    const nodeLocations = undefinedIfEmpty(\n      (_this$nodes = this.nodes) === null || _this$nodes === void 0\n        ? void 0\n        : _this$nodes.map((node) => node.loc).filter((loc) => loc != null),\n    ); // Compute locations in the source for the given nodes/positions.\n\n    this.source =\n      source !== null && source !== void 0\n        ? source\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : (_nodeLocations$ = nodeLocations[0]) === null ||\n          _nodeLocations$ === void 0\n        ? void 0\n        : _nodeLocations$.source;\n    this.positions =\n      positions !== null && positions !== void 0\n        ? positions\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => loc.start);\n    this.locations =\n      positions && source\n        ? positions.map((pos) => getLocation(source, pos))\n        : nodeLocations === null || nodeLocations === void 0\n        ? void 0\n        : nodeLocations.map((loc) => getLocation(loc.source, loc.start));\n    const originalExtensions = isObjectLike(\n      originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions,\n    )\n      ? originalError === null || originalError === void 0\n        ? void 0\n        : originalError.extensions\n      : undefined;\n    this.extensions =\n      (_ref =\n        extensions !== null && extensions !== void 0\n          ? extensions\n          : originalExtensions) !== null && _ref !== void 0\n        ? _ref\n        : Object.create(null); // Only properties prescribed by the spec should be enumerable.\n    // Keep the rest as non-enumerable.\n\n    Object.defineProperties(this, {\n      message: {\n        writable: true,\n        enumerable: true,\n      },\n      name: {\n        enumerable: false,\n      },\n      nodes: {\n        enumerable: false,\n      },\n      source: {\n        enumerable: false,\n      },\n      positions: {\n        enumerable: false,\n      },\n      originalError: {\n        enumerable: false,\n      },\n    }); // Include (non-enumerable) stack trace.\n\n    /* c8 ignore start */\n    // FIXME: https://github.com/graphql/graphql-js/issues/2317\n\n    if (\n      originalError !== null &&\n      originalError !== void 0 &&\n      originalError.stack\n    ) {\n      Object.defineProperty(this, 'stack', {\n        value: originalError.stack,\n        writable: true,\n        configurable: true,\n      });\n    } else if (Error.captureStackTrace) {\n      Error.captureStackTrace(this, GraphQLError);\n    } else {\n      Object.defineProperty(this, 'stack', {\n        value: Error().stack,\n        writable: true,\n        configurable: true,\n      });\n    }\n    /* c8 ignore stop */\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'GraphQLError';\n  }\n\n  toString() {\n    let output = this.message;\n\n    if (this.nodes) {\n      for (const node of this.nodes) {\n        if (node.loc) {\n          output += '\\n\\n' + printLocation(node.loc);\n        }\n      }\n    } else if (this.source && this.locations) {\n      for (const location of this.locations) {\n        output += '\\n\\n' + printSourceLocation(this.source, location);\n      }\n    }\n\n    return output;\n  }\n\n  toJSON() {\n    const formattedError = {\n      message: this.message,\n    };\n\n    if (this.locations != null) {\n      formattedError.locations = this.locations;\n    }\n\n    if (this.path != null) {\n      formattedError.path = this.path;\n    }\n\n    if (this.extensions != null && Object.keys(this.extensions).length > 0) {\n      formattedError.extensions = this.extensions;\n    }\n\n    return formattedError;\n  }\n}\n\nfunction undefinedIfEmpty(array) {\n  return array === undefined || array.length === 0 ? undefined : array;\n}\n/**\n * See: https://spec.graphql.org/draft/#sec-Errors\n */\n\n/**\n * Prints a GraphQLError to a string, representing useful location information\n * about the error's position in the source.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\nexport function printError(error) {\n  return error.toString();\n}\n/**\n * Given a GraphQLError, format it according to the rules described by the\n * Response Format, Errors section of the GraphQL Specification.\n *\n * @deprecated Please use `error.toString` instead. Will be removed in v17\n */\n\nexport function formatError(error) {\n  return error.toJSON();\n}\n","/**\n * Return true if `value` is object-like. A value is object-like if it's not\n * `null` and has a `typeof` result of \"object\".\n */\nexport function isObjectLike(value) {\n  return typeof value == 'object' && value !== null;\n}\n","import { GraphQLError } from './GraphQLError.mjs';\n/**\n * Produces a GraphQLError representing a syntax error, containing useful\n * descriptive information about the syntax error's position in the source.\n */\n\nexport function syntaxError(source, position, description) {\n  return new GraphQLError(`Syntax Error: ${description}`, undefined, source, [\n    position,\n  ]);\n}\n","/**\n * An exported enum describing the different kinds of tokens that the\n * lexer emits.\n */\nexport let TokenKind;\n/**\n * The enum type representing the token kinds values.\n *\n * @deprecated Please use `TokenKind`. Will be remove in v17.\n */\n\n(function (TokenKind) {\n  TokenKind['SOF'] = '<SOF>';\n  TokenKind['EOF'] = '<EOF>';\n  TokenKind['BANG'] = '!';\n  TokenKind['DOLLAR'] = '$';\n  TokenKind['AMP'] = '&';\n  TokenKind['PAREN_L'] = '(';\n  TokenKind['PAREN_R'] = ')';\n  TokenKind['SPREAD'] = '...';\n  TokenKind['COLON'] = ':';\n  TokenKind['EQUALS'] = '=';\n  TokenKind['AT'] = '@';\n  TokenKind['BRACKET_L'] = '[';\n  TokenKind['BRACKET_R'] = ']';\n  TokenKind['BRACE_L'] = '{';\n  TokenKind['PIPE'] = '|';\n  TokenKind['BRACE_R'] = '}';\n  TokenKind['NAME'] = 'Name';\n  TokenKind['INT'] = 'Int';\n  TokenKind['FLOAT'] = 'Float';\n  TokenKind['STRING'] = 'String';\n  TokenKind['BLOCK_STRING'] = 'BlockString';\n  TokenKind['COMMENT'] = 'Comment';\n})(TokenKind || (TokenKind = {}));\n","/**\n * The set of allowed directive location values.\n */\nexport let DirectiveLocation;\n/**\n * The enum type representing the directive location values.\n *\n * @deprecated Please use `DirectiveLocation`. Will be remove in v17.\n */\n\n(function (DirectiveLocation) {\n  DirectiveLocation['QUERY'] = 'QUERY';\n  DirectiveLocation['MUTATION'] = 'MUTATION';\n  DirectiveLocation['SUBSCRIPTION'] = 'SUBSCRIPTION';\n  DirectiveLocation['FIELD'] = 'FIELD';\n  DirectiveLocation['FRAGMENT_DEFINITION'] = 'FRAGMENT_DEFINITION';\n  DirectiveLocation['FRAGMENT_SPREAD'] = 'FRAGMENT_SPREAD';\n  DirectiveLocation['INLINE_FRAGMENT'] = 'INLINE_FRAGMENT';\n  DirectiveLocation['VARIABLE_DEFINITION'] = 'VARIABLE_DEFINITION';\n  DirectiveLocation['SCHEMA'] = 'SCHEMA';\n  DirectiveLocation['SCALAR'] = 'SCALAR';\n  DirectiveLocation['OBJECT'] = 'OBJECT';\n  DirectiveLocation['FIELD_DEFINITION'] = 'FIELD_DEFINITION';\n  DirectiveLocation['ARGUMENT_DEFINITION'] = 'ARGUMENT_DEFINITION';\n  DirectiveLocation['INTERFACE'] = 'INTERFACE';\n  DirectiveLocation['UNION'] = 'UNION';\n  DirectiveLocation['ENUM'] = 'ENUM';\n  DirectiveLocation['ENUM_VALUE'] = 'ENUM_VALUE';\n  DirectiveLocation['INPUT_OBJECT'] = 'INPUT_OBJECT';\n  DirectiveLocation['INPUT_FIELD_DEFINITION'] = 'INPUT_FIELD_DEFINITION';\n})(DirectiveLocation || (DirectiveLocation = {}));\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Token } from './ast.mjs';\nimport { TokenKind } from './tokenKind.mjs';\nimport { dedentBlockStringLines } from './blockString.mjs';\nimport { isDigit, isNameStart, isNameContinue } from './characterClasses.mjs';\n/**\n * Given a Source object, creates a Lexer for that source.\n * A Lexer is a stateful stream generator in that every time\n * it is advanced, it returns the next token in the Source. Assuming the\n * source lexes, the final Token emitted by the lexer will be of kind\n * EOF, after which the lexer will repeatedly return the same EOF token\n * whenever called.\n */\n\nexport class Lexer {\n  /**\n   * The previously focused non-ignored token.\n   */\n\n  /**\n   * The currently focused non-ignored token.\n   */\n\n  /**\n   * The (1-indexed) line containing the current token.\n   */\n\n  /**\n   * The character offset at which the current line begins.\n   */\n  constructor(source) {\n    const startOfFileToken = new Token(TokenKind.SOF, 0, 0, 0, 0);\n    this.source = source;\n    this.lastToken = startOfFileToken;\n    this.token = startOfFileToken;\n    this.line = 1;\n    this.lineStart = 0;\n  }\n\n  get [Symbol.toStringTag]() {\n    return 'Lexer';\n  }\n  /**\n   * Advances the token stream to the next non-ignored token.\n   */\n\n  advance() {\n    this.lastToken = this.token;\n    const token = (this.token = this.lookahead());\n    return token;\n  }\n  /**\n   * Looks ahead and returns the next non-ignored token, but does not change\n   * the state of Lexer.\n   */\n\n  lookahead() {\n    let token = this.token;\n\n    if (token.kind !== TokenKind.EOF) {\n      do {\n        if (token.next) {\n          token = token.next;\n        } else {\n          // Read the next token and form a link in the token linked-list.\n          const nextToken = readNextToken(this, token.end); // @ts-expect-error next is only mutable during parsing.\n\n          token.next = nextToken; // @ts-expect-error prev is only mutable during parsing.\n\n          nextToken.prev = token;\n          token = nextToken;\n        }\n      } while (token.kind === TokenKind.COMMENT);\n    }\n\n    return token;\n  }\n}\n/**\n * @internal\n */\n\nexport function isPunctuatorTokenKind(kind) {\n  return (\n    kind === TokenKind.BANG ||\n    kind === TokenKind.DOLLAR ||\n    kind === TokenKind.AMP ||\n    kind === TokenKind.PAREN_L ||\n    kind === TokenKind.PAREN_R ||\n    kind === TokenKind.SPREAD ||\n    kind === TokenKind.COLON ||\n    kind === TokenKind.EQUALS ||\n    kind === TokenKind.AT ||\n    kind === TokenKind.BRACKET_L ||\n    kind === TokenKind.BRACKET_R ||\n    kind === TokenKind.BRACE_L ||\n    kind === TokenKind.PIPE ||\n    kind === TokenKind.BRACE_R\n  );\n}\n/**\n * A Unicode scalar value is any Unicode code point except surrogate code\n * points. In other words, the inclusive ranges of values 0x0000 to 0xD7FF and\n * 0xE000 to 0x10FFFF.\n *\n * SourceCharacter ::\n *   - \"Any Unicode scalar value\"\n */\n\nfunction isUnicodeScalarValue(code) {\n  return (\n    (code >= 0x0000 && code <= 0xd7ff) || (code >= 0xe000 && code <= 0x10ffff)\n  );\n}\n/**\n * The GraphQL specification defines source text as a sequence of unicode scalar\n * values (which Unicode defines to exclude surrogate code points). However\n * JavaScript defines strings as a sequence of UTF-16 code units which may\n * include surrogates. A surrogate pair is a valid source character as it\n * encodes a supplementary code point (above U+FFFF), but unpaired surrogate\n * code points are not valid source characters.\n */\n\nfunction isSupplementaryCodePoint(body, location) {\n  return (\n    isLeadingSurrogate(body.charCodeAt(location)) &&\n    isTrailingSurrogate(body.charCodeAt(location + 1))\n  );\n}\n\nfunction isLeadingSurrogate(code) {\n  return code >= 0xd800 && code <= 0xdbff;\n}\n\nfunction isTrailingSurrogate(code) {\n  return code >= 0xdc00 && code <= 0xdfff;\n}\n/**\n * Prints the code point (or end of file reference) at a given location in a\n * source for use in error messages.\n *\n * Printable ASCII is printed quoted, while other points are printed in Unicode\n * code point form (ie. U+1234).\n */\n\nfunction printCodePointAt(lexer, location) {\n  const code = lexer.source.body.codePointAt(location);\n\n  if (code === undefined) {\n    return TokenKind.EOF;\n  } else if (code >= 0x0020 && code <= 0x007e) {\n    // Printable ASCII\n    const char = String.fromCodePoint(code);\n    return char === '\"' ? \"'\\\"'\" : `\"${char}\"`;\n  } // Unicode code point\n\n  return 'U+' + code.toString(16).toUpperCase().padStart(4, '0');\n}\n/**\n * Create a token with line and column location information.\n */\n\nfunction createToken(lexer, kind, start, end, value) {\n  const line = lexer.line;\n  const col = 1 + start - lexer.lineStart;\n  return new Token(kind, start, end, line, col, value);\n}\n/**\n * Gets the next token from the source starting at the given position.\n *\n * This skips over whitespace until it finds the next lexable token, then lexes\n * punctuators immediately or calls the appropriate helper function for more\n * complicated tokens.\n */\n\nfunction readNextToken(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // SourceCharacter\n\n    switch (code) {\n      // Ignored ::\n      //   - UnicodeBOM\n      //   - WhiteSpace\n      //   - LineTerminator\n      //   - Comment\n      //   - Comma\n      //\n      // UnicodeBOM :: \"Byte Order Mark (U+FEFF)\"\n      //\n      // WhiteSpace ::\n      //   - \"Horizontal Tab (U+0009)\"\n      //   - \"Space (U+0020)\"\n      //\n      // Comma :: ,\n      case 0xfeff: // <BOM>\n\n      case 0x0009: // \\t\n\n      case 0x0020: // <space>\n\n      case 0x002c:\n        // ,\n        ++position;\n        continue;\n      // LineTerminator ::\n      //   - \"New Line (U+000A)\"\n      //   - \"Carriage Return (U+000D)\" [lookahead != \"New Line (U+000A)\"]\n      //   - \"Carriage Return (U+000D)\" \"New Line (U+000A)\"\n\n      case 0x000a:\n        // \\n\n        ++position;\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n\n      case 0x000d:\n        // \\r\n        if (body.charCodeAt(position + 1) === 0x000a) {\n          position += 2;\n        } else {\n          ++position;\n        }\n\n        ++lexer.line;\n        lexer.lineStart = position;\n        continue;\n      // Comment\n\n      case 0x0023:\n        // #\n        return readComment(lexer, position);\n      // Token ::\n      //   - Punctuator\n      //   - Name\n      //   - IntValue\n      //   - FloatValue\n      //   - StringValue\n      //\n      // Punctuator :: one of ! $ & ( ) ... : = @ [ ] { | }\n\n      case 0x0021:\n        // !\n        return createToken(lexer, TokenKind.BANG, position, position + 1);\n\n      case 0x0024:\n        // $\n        return createToken(lexer, TokenKind.DOLLAR, position, position + 1);\n\n      case 0x0026:\n        // &\n        return createToken(lexer, TokenKind.AMP, position, position + 1);\n\n      case 0x0028:\n        // (\n        return createToken(lexer, TokenKind.PAREN_L, position, position + 1);\n\n      case 0x0029:\n        // )\n        return createToken(lexer, TokenKind.PAREN_R, position, position + 1);\n\n      case 0x002e:\n        // .\n        if (\n          body.charCodeAt(position + 1) === 0x002e &&\n          body.charCodeAt(position + 2) === 0x002e\n        ) {\n          return createToken(lexer, TokenKind.SPREAD, position, position + 3);\n        }\n\n        break;\n\n      case 0x003a:\n        // :\n        return createToken(lexer, TokenKind.COLON, position, position + 1);\n\n      case 0x003d:\n        // =\n        return createToken(lexer, TokenKind.EQUALS, position, position + 1);\n\n      case 0x0040:\n        // @\n        return createToken(lexer, TokenKind.AT, position, position + 1);\n\n      case 0x005b:\n        // [\n        return createToken(lexer, TokenKind.BRACKET_L, position, position + 1);\n\n      case 0x005d:\n        // ]\n        return createToken(lexer, TokenKind.BRACKET_R, position, position + 1);\n\n      case 0x007b:\n        // {\n        return createToken(lexer, TokenKind.BRACE_L, position, position + 1);\n\n      case 0x007c:\n        // |\n        return createToken(lexer, TokenKind.PIPE, position, position + 1);\n\n      case 0x007d:\n        // }\n        return createToken(lexer, TokenKind.BRACE_R, position, position + 1);\n      // StringValue\n\n      case 0x0022:\n        // \"\n        if (\n          body.charCodeAt(position + 1) === 0x0022 &&\n          body.charCodeAt(position + 2) === 0x0022\n        ) {\n          return readBlockString(lexer, position);\n        }\n\n        return readString(lexer, position);\n    } // IntValue | FloatValue (Digit | -)\n\n    if (isDigit(code) || code === 0x002d) {\n      return readNumber(lexer, position, code);\n    } // Name\n\n    if (isNameStart(code)) {\n      return readName(lexer, position);\n    }\n\n    throw syntaxError(\n      lexer.source,\n      position,\n      code === 0x0027\n        ? 'Unexpected single quote character (\\'), did you mean to use a double quote (\")?'\n        : isUnicodeScalarValue(code) || isSupplementaryCodePoint(body, position)\n        ? `Unexpected character: ${printCodePointAt(lexer, position)}.`\n        : `Invalid character: ${printCodePointAt(lexer, position)}.`,\n    );\n  }\n\n  return createToken(lexer, TokenKind.EOF, bodyLength, bodyLength);\n}\n/**\n * Reads a comment token from the source file.\n *\n * ```\n * Comment :: # CommentChar* [lookahead != CommentChar]\n *\n * CommentChar :: SourceCharacter but not LineTerminator\n * ```\n */\n\nfunction readComment(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.COMMENT,\n    start,\n    position,\n    body.slice(start + 1, position),\n  );\n}\n/**\n * Reads a number token from the source file, either a FloatValue or an IntValue\n * depending on whether a FractionalPart or ExponentPart is encountered.\n *\n * ```\n * IntValue :: IntegerPart [lookahead != {Digit, `.`, NameStart}]\n *\n * IntegerPart ::\n *   - NegativeSign? 0\n *   - NegativeSign? NonZeroDigit Digit*\n *\n * NegativeSign :: -\n *\n * NonZeroDigit :: Digit but not `0`\n *\n * FloatValue ::\n *   - IntegerPart FractionalPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart FractionalPart [lookahead != {Digit, `.`, NameStart}]\n *   - IntegerPart ExponentPart [lookahead != {Digit, `.`, NameStart}]\n *\n * FractionalPart :: . Digit+\n *\n * ExponentPart :: ExponentIndicator Sign? Digit+\n *\n * ExponentIndicator :: one of `e` `E`\n *\n * Sign :: one of + -\n * ```\n */\n\nfunction readNumber(lexer, start, firstCode) {\n  const body = lexer.source.body;\n  let position = start;\n  let code = firstCode;\n  let isFloat = false; // NegativeSign (-)\n\n  if (code === 0x002d) {\n    code = body.charCodeAt(++position);\n  } // Zero (0)\n\n  if (code === 0x0030) {\n    code = body.charCodeAt(++position);\n\n    if (isDigit(code)) {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid number, unexpected digit after 0: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  } else {\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Full stop (.)\n\n  if (code === 0x002e) {\n    isFloat = true;\n    code = body.charCodeAt(++position);\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // E e\n\n  if (code === 0x0045 || code === 0x0065) {\n    isFloat = true;\n    code = body.charCodeAt(++position); // + -\n\n    if (code === 0x002b || code === 0x002d) {\n      code = body.charCodeAt(++position);\n    }\n\n    position = readDigits(lexer, position, code);\n    code = body.charCodeAt(position);\n  } // Numbers cannot be followed by . or NameStart\n\n  if (code === 0x002e || isNameStart(code)) {\n    throw syntaxError(\n      lexer.source,\n      position,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        position,\n      )}.`,\n    );\n  }\n\n  return createToken(\n    lexer,\n    isFloat ? TokenKind.FLOAT : TokenKind.INT,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n/**\n * Returns the new position in the source after reading one or more digits.\n */\n\nfunction readDigits(lexer, start, firstCode) {\n  if (!isDigit(firstCode)) {\n    throw syntaxError(\n      lexer.source,\n      start,\n      `Invalid number, expected digit but got: ${printCodePointAt(\n        lexer,\n        start,\n      )}.`,\n    );\n  }\n\n  const body = lexer.source.body;\n  let position = start + 1; // +1 to skip first firstCode\n\n  while (isDigit(body.charCodeAt(position))) {\n    ++position;\n  }\n\n  return position;\n}\n/**\n * Reads a single-quote string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"` [lookahead != `\"`]\n *   - `\"` StringCharacter+ `\"`\n *\n * StringCharacter ::\n *   - SourceCharacter but not `\"` or `\\` or LineTerminator\n *   - `\\u` EscapedUnicode\n *   - `\\` EscapedCharacter\n *\n * EscapedUnicode ::\n *   - `{` HexDigit+ `}`\n *   - HexDigit HexDigit HexDigit HexDigit\n *\n * EscapedCharacter :: one of `\"` `\\` `/` `b` `f` `n` `r` `t`\n * ```\n */\n\nfunction readString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n  let chunkStart = position;\n  let value = '';\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Quote (\")\n\n    if (code === 0x0022) {\n      value += body.slice(chunkStart, position);\n      return createToken(lexer, TokenKind.STRING, start, position + 1, value);\n    } // Escape Sequence (\\)\n\n    if (code === 0x005c) {\n      value += body.slice(chunkStart, position);\n      const escape =\n        body.charCodeAt(position + 1) === 0x0075 // u\n          ? body.charCodeAt(position + 2) === 0x007b // {\n            ? readEscapedUnicodeVariableWidth(lexer, position)\n            : readEscapedUnicodeFixedWidth(lexer, position)\n          : readEscapedCharacter(lexer, position);\n      value += escape.value;\n      position += escape.size;\n      chunkStart = position;\n      continue;\n    } // LineTerminator (\\n | \\r)\n\n    if (code === 0x000a || code === 0x000d) {\n      break;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n} // The string value and lexed size of an escape sequence.\n\nfunction readEscapedUnicodeVariableWidth(lexer, position) {\n  const body = lexer.source.body;\n  let point = 0;\n  let size = 3; // Cannot be larger than 12 chars (\\u{00000000}).\n\n  while (size < 12) {\n    const code = body.charCodeAt(position + size++); // Closing Brace (})\n\n    if (code === 0x007d) {\n      // Must be at least 5 chars (\\u{0}) and encode a Unicode scalar value.\n      if (size < 5 || !isUnicodeScalarValue(point)) {\n        break;\n      }\n\n      return {\n        value: String.fromCodePoint(point),\n        size,\n      };\n    } // Append this hex digit to the code point.\n\n    point = (point << 4) | readHexDigit(code);\n\n    if (point < 0) {\n      break;\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(\n      position,\n      position + size,\n    )}\".`,\n  );\n}\n\nfunction readEscapedUnicodeFixedWidth(lexer, position) {\n  const body = lexer.source.body;\n  const code = read16BitHexCode(body, position + 2);\n\n  if (isUnicodeScalarValue(code)) {\n    return {\n      value: String.fromCodePoint(code),\n      size: 6,\n    };\n  } // GraphQL allows JSON-style surrogate pair escape sequences, but only when\n  // a valid pair is formed.\n\n  if (isLeadingSurrogate(code)) {\n    // \\u\n    if (\n      body.charCodeAt(position + 6) === 0x005c &&\n      body.charCodeAt(position + 7) === 0x0075\n    ) {\n      const trailingCode = read16BitHexCode(body, position + 8);\n\n      if (isTrailingSurrogate(trailingCode)) {\n        // JavaScript defines strings as a sequence of UTF-16 code units and\n        // encodes Unicode code points above U+FFFF using a surrogate pair of\n        // code units. Since this is a surrogate pair escape sequence, just\n        // include both codes into the JavaScript string value. Had JavaScript\n        // not been internally based on UTF-16, then this surrogate pair would\n        // be decoded to retrieve the supplementary code point.\n        return {\n          value: String.fromCodePoint(code, trailingCode),\n          size: 12,\n        };\n      }\n    }\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid Unicode escape sequence: \"${body.slice(position, position + 6)}\".`,\n  );\n}\n/**\n * Reads four hexadecimal characters and returns the positive integer that 16bit\n * hexadecimal string represents. For example, \"000f\" will return 15, and \"dead\"\n * will return 57005.\n *\n * Returns a negative number if any char was not a valid hexadecimal digit.\n */\n\nfunction read16BitHexCode(body, position) {\n  // readHexDigit() returns -1 on error. ORing a negative value with any other\n  // value always produces a negative value.\n  return (\n    (readHexDigit(body.charCodeAt(position)) << 12) |\n    (readHexDigit(body.charCodeAt(position + 1)) << 8) |\n    (readHexDigit(body.charCodeAt(position + 2)) << 4) |\n    readHexDigit(body.charCodeAt(position + 3))\n  );\n}\n/**\n * Reads a hexadecimal character and returns its positive integer value (0-15).\n *\n * '0' becomes 0, '9' becomes 9\n * 'A' becomes 10, 'F' becomes 15\n * 'a' becomes 10, 'f' becomes 15\n *\n * Returns -1 if the provided character code was not a valid hexadecimal digit.\n *\n * HexDigit :: one of\n *   - `0` `1` `2` `3` `4` `5` `6` `7` `8` `9`\n *   - `A` `B` `C` `D` `E` `F`\n *   - `a` `b` `c` `d` `e` `f`\n */\n\nfunction readHexDigit(code) {\n  return code >= 0x0030 && code <= 0x0039 // 0-9\n    ? code - 0x0030\n    : code >= 0x0041 && code <= 0x0046 // A-F\n    ? code - 0x0037\n    : code >= 0x0061 && code <= 0x0066 // a-f\n    ? code - 0x0057\n    : -1;\n}\n/**\n * | Escaped Character | Code Point | Character Name               |\n * | ----------------- | ---------- | ---------------------------- |\n * | `\"`               | U+0022     | double quote                 |\n * | `\\`               | U+005C     | reverse solidus (back slash) |\n * | `/`               | U+002F     | solidus (forward slash)      |\n * | `b`               | U+0008     | backspace                    |\n * | `f`               | U+000C     | form feed                    |\n * | `n`               | U+000A     | line feed (new line)         |\n * | `r`               | U+000D     | carriage return              |\n * | `t`               | U+0009     | horizontal tab               |\n */\n\nfunction readEscapedCharacter(lexer, position) {\n  const body = lexer.source.body;\n  const code = body.charCodeAt(position + 1);\n\n  switch (code) {\n    case 0x0022:\n      // \"\n      return {\n        value: '\\u0022',\n        size: 2,\n      };\n\n    case 0x005c:\n      // \\\n      return {\n        value: '\\u005c',\n        size: 2,\n      };\n\n    case 0x002f:\n      // /\n      return {\n        value: '\\u002f',\n        size: 2,\n      };\n\n    case 0x0062:\n      // b\n      return {\n        value: '\\u0008',\n        size: 2,\n      };\n\n    case 0x0066:\n      // f\n      return {\n        value: '\\u000c',\n        size: 2,\n      };\n\n    case 0x006e:\n      // n\n      return {\n        value: '\\u000a',\n        size: 2,\n      };\n\n    case 0x0072:\n      // r\n      return {\n        value: '\\u000d',\n        size: 2,\n      };\n\n    case 0x0074:\n      // t\n      return {\n        value: '\\u0009',\n        size: 2,\n      };\n  }\n\n  throw syntaxError(\n    lexer.source,\n    position,\n    `Invalid character escape sequence: \"${body.slice(\n      position,\n      position + 2,\n    )}\".`,\n  );\n}\n/**\n * Reads a block string token from the source file.\n *\n * ```\n * StringValue ::\n *   - `\"\"\"` BlockStringCharacter* `\"\"\"`\n *\n * BlockStringCharacter ::\n *   - SourceCharacter but not `\"\"\"` or `\\\"\"\"`\n *   - `\\\"\"\"`\n * ```\n */\n\nfunction readBlockString(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let lineStart = lexer.lineStart;\n  let position = start + 3;\n  let chunkStart = position;\n  let currentLine = '';\n  const blockLines = [];\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position); // Closing Triple-Quote (\"\"\")\n\n    if (\n      code === 0x0022 &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n      const token = createToken(\n        lexer,\n        TokenKind.BLOCK_STRING,\n        start,\n        position + 3, // Return a string of the lines joined with U+000A.\n        dedentBlockStringLines(blockLines).join('\\n'),\n      );\n      lexer.line += blockLines.length - 1;\n      lexer.lineStart = lineStart;\n      return token;\n    } // Escaped Triple-Quote (\\\"\"\")\n\n    if (\n      code === 0x005c &&\n      body.charCodeAt(position + 1) === 0x0022 &&\n      body.charCodeAt(position + 2) === 0x0022 &&\n      body.charCodeAt(position + 3) === 0x0022\n    ) {\n      currentLine += body.slice(chunkStart, position);\n      chunkStart = position + 1; // skip only slash\n\n      position += 4;\n      continue;\n    } // LineTerminator\n\n    if (code === 0x000a || code === 0x000d) {\n      currentLine += body.slice(chunkStart, position);\n      blockLines.push(currentLine);\n\n      if (code === 0x000d && body.charCodeAt(position + 1) === 0x000a) {\n        position += 2;\n      } else {\n        ++position;\n      }\n\n      currentLine = '';\n      chunkStart = position;\n      lineStart = position;\n      continue;\n    } // SourceCharacter\n\n    if (isUnicodeScalarValue(code)) {\n      ++position;\n    } else if (isSupplementaryCodePoint(body, position)) {\n      position += 2;\n    } else {\n      throw syntaxError(\n        lexer.source,\n        position,\n        `Invalid character within String: ${printCodePointAt(\n          lexer,\n          position,\n        )}.`,\n      );\n    }\n  }\n\n  throw syntaxError(lexer.source, position, 'Unterminated string.');\n}\n/**\n * Reads an alphanumeric + underscore name from the source.\n *\n * ```\n * Name ::\n *   - NameStart NameContinue* [lookahead != NameContinue]\n * ```\n */\n\nfunction readName(lexer, start) {\n  const body = lexer.source.body;\n  const bodyLength = body.length;\n  let position = start + 1;\n\n  while (position < bodyLength) {\n    const code = body.charCodeAt(position);\n\n    if (isNameContinue(code)) {\n      ++position;\n    } else {\n      break;\n    }\n  }\n\n  return createToken(\n    lexer,\n    TokenKind.NAME,\n    start,\n    position,\n    body.slice(start, position),\n  );\n}\n","import { syntaxError } from '../error/syntaxError.mjs';\nimport { Kind } from './kinds.mjs';\nimport { Location, OperationTypeNode } from './ast.mjs';\nimport { TokenKind } from './tokenKind.mjs';\nimport { Source, isSource } from './source.mjs';\nimport { DirectiveLocation } from './directiveLocation.mjs';\nimport { Lexer, isPunctuatorTokenKind } from './lexer.mjs';\n/**\n * Configuration options to control parser behavior\n */\n\n/**\n * Given a GraphQL source, parses it into a Document.\n * Throws GraphQLError if a syntax error is encountered.\n */\nexport function parse(source, options) {\n  const parser = new Parser(source, options);\n  return parser.parseDocument();\n}\n/**\n * Given a string containing a GraphQL value (ex. `[42]`), parse the AST for\n * that value.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Values directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: valueFromAST().\n */\n\nexport function parseValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseValueLiteral(false);\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Similar to parseValue(), but raises a parse error if it encounters a\n * variable. The return type will be a constant value.\n */\n\nexport function parseConstValue(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const value = parser.parseConstValueLiteral();\n  parser.expectToken(TokenKind.EOF);\n  return value;\n}\n/**\n * Given a string containing a GraphQL Type (ex. `[Int!]`), parse the AST for\n * that type.\n * Throws GraphQLError if a syntax error is encountered.\n *\n * This is useful within tools that operate upon GraphQL Types directly and\n * in isolation of complete GraphQL documents.\n *\n * Consider providing the results to the utility function: typeFromAST().\n */\n\nexport function parseType(source, options) {\n  const parser = new Parser(source, options);\n  parser.expectToken(TokenKind.SOF);\n  const type = parser.parseTypeReference();\n  parser.expectToken(TokenKind.EOF);\n  return type;\n}\n/**\n * This class is exported only to assist people in implementing their own parsers\n * without duplicating too much code and should be used only as last resort for cases\n * such as experimental syntax or if certain features could not be contributed upstream.\n *\n * It is still part of the internal API and is versioned, so any changes to it are never\n * considered breaking changes. If you still need to support multiple versions of the\n * library, please use the `versionInfo` variable for version detection.\n *\n * @internal\n */\n\nexport class Parser {\n  constructor(source, options) {\n    const sourceObj = isSource(source) ? source : new Source(source);\n    this._lexer = new Lexer(sourceObj);\n    this._options = options;\n  }\n  /**\n   * Converts a name lex token into a name parse node.\n   */\n\n  parseName() {\n    const token = this.expectToken(TokenKind.NAME);\n    return this.node(token, {\n      kind: Kind.NAME,\n      value: token.value,\n    });\n  } // Implements the parsing rules in the Document section.\n\n  /**\n   * Document : Definition+\n   */\n\n  parseDocument() {\n    return this.node(this._lexer.token, {\n      kind: Kind.DOCUMENT,\n      definitions: this.many(\n        TokenKind.SOF,\n        this.parseDefinition,\n        TokenKind.EOF,\n      ),\n    });\n  }\n  /**\n   * Definition :\n   *   - ExecutableDefinition\n   *   - TypeSystemDefinition\n   *   - TypeSystemExtension\n   *\n   * ExecutableDefinition :\n   *   - OperationDefinition\n   *   - FragmentDefinition\n   *\n   * TypeSystemDefinition :\n   *   - SchemaDefinition\n   *   - TypeDefinition\n   *   - DirectiveDefinition\n   *\n   * TypeDefinition :\n   *   - ScalarTypeDefinition\n   *   - ObjectTypeDefinition\n   *   - InterfaceTypeDefinition\n   *   - UnionTypeDefinition\n   *   - EnumTypeDefinition\n   *   - InputObjectTypeDefinition\n   */\n\n  parseDefinition() {\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.parseOperationDefinition();\n    } // Many definitions begin with a description and require a lookahead.\n\n    const hasDescription = this.peekDescription();\n    const keywordToken = hasDescription\n      ? this._lexer.lookahead()\n      : this._lexer.token;\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaDefinition();\n\n        case 'scalar':\n          return this.parseScalarTypeDefinition();\n\n        case 'type':\n          return this.parseObjectTypeDefinition();\n\n        case 'interface':\n          return this.parseInterfaceTypeDefinition();\n\n        case 'union':\n          return this.parseUnionTypeDefinition();\n\n        case 'enum':\n          return this.parseEnumTypeDefinition();\n\n        case 'input':\n          return this.parseInputObjectTypeDefinition();\n\n        case 'directive':\n          return this.parseDirectiveDefinition();\n      }\n\n      if (hasDescription) {\n        throw syntaxError(\n          this._lexer.source,\n          this._lexer.token.start,\n          'Unexpected description, descriptions are supported only on type definitions.',\n        );\n      }\n\n      switch (keywordToken.value) {\n        case 'query':\n        case 'mutation':\n        case 'subscription':\n          return this.parseOperationDefinition();\n\n        case 'fragment':\n          return this.parseFragmentDefinition();\n\n        case 'extend':\n          return this.parseTypeSystemExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  } // Implements the parsing rules in the Operations section.\n\n  /**\n   * OperationDefinition :\n   *  - SelectionSet\n   *  - OperationType Name? VariableDefinitions? Directives? SelectionSet\n   */\n\n  parseOperationDefinition() {\n    const start = this._lexer.token;\n\n    if (this.peek(TokenKind.BRACE_L)) {\n      return this.node(start, {\n        kind: Kind.OPERATION_DEFINITION,\n        operation: OperationTypeNode.QUERY,\n        name: undefined,\n        variableDefinitions: [],\n        directives: [],\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    const operation = this.parseOperationType();\n    let name;\n\n    if (this.peek(TokenKind.NAME)) {\n      name = this.parseName();\n    }\n\n    return this.node(start, {\n      kind: Kind.OPERATION_DEFINITION,\n      operation,\n      name,\n      variableDefinitions: this.parseVariableDefinitions(),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * OperationType : one of query mutation subscription\n   */\n\n  parseOperationType() {\n    const operationToken = this.expectToken(TokenKind.NAME);\n\n    switch (operationToken.value) {\n      case 'query':\n        return OperationTypeNode.QUERY;\n\n      case 'mutation':\n        return OperationTypeNode.MUTATION;\n\n      case 'subscription':\n        return OperationTypeNode.SUBSCRIPTION;\n    }\n\n    throw this.unexpected(operationToken);\n  }\n  /**\n   * VariableDefinitions : ( VariableDefinition+ )\n   */\n\n  parseVariableDefinitions() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseVariableDefinition,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * VariableDefinition : Variable : Type DefaultValue? Directives[Const]?\n   */\n\n  parseVariableDefinition() {\n    return this.node(this._lexer.token, {\n      kind: Kind.VARIABLE_DEFINITION,\n      variable: this.parseVariable(),\n      type: (this.expectToken(TokenKind.COLON), this.parseTypeReference()),\n      defaultValue: this.expectOptionalToken(TokenKind.EQUALS)\n        ? this.parseConstValueLiteral()\n        : undefined,\n      directives: this.parseConstDirectives(),\n    });\n  }\n  /**\n   * Variable : $ Name\n   */\n\n  parseVariable() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.DOLLAR);\n    return this.node(start, {\n      kind: Kind.VARIABLE,\n      name: this.parseName(),\n    });\n  }\n  /**\n   * ```\n   * SelectionSet : { Selection+ }\n   * ```\n   */\n\n  parseSelectionSet() {\n    return this.node(this._lexer.token, {\n      kind: Kind.SELECTION_SET,\n      selections: this.many(\n        TokenKind.BRACE_L,\n        this.parseSelection,\n        TokenKind.BRACE_R,\n      ),\n    });\n  }\n  /**\n   * Selection :\n   *   - Field\n   *   - FragmentSpread\n   *   - InlineFragment\n   */\n\n  parseSelection() {\n    return this.peek(TokenKind.SPREAD)\n      ? this.parseFragment()\n      : this.parseField();\n  }\n  /**\n   * Field : Alias? Name Arguments? Directives? SelectionSet?\n   *\n   * Alias : Name :\n   */\n\n  parseField() {\n    const start = this._lexer.token;\n    const nameOrAlias = this.parseName();\n    let alias;\n    let name;\n\n    if (this.expectOptionalToken(TokenKind.COLON)) {\n      alias = nameOrAlias;\n      name = this.parseName();\n    } else {\n      name = nameOrAlias;\n    }\n\n    return this.node(start, {\n      kind: Kind.FIELD,\n      alias,\n      name,\n      arguments: this.parseArguments(false),\n      directives: this.parseDirectives(false),\n      selectionSet: this.peek(TokenKind.BRACE_L)\n        ? this.parseSelectionSet()\n        : undefined,\n    });\n  }\n  /**\n   * Arguments[Const] : ( Argument[?Const]+ )\n   */\n\n  parseArguments(isConst) {\n    const item = isConst ? this.parseConstArgument : this.parseArgument;\n    return this.optionalMany(TokenKind.PAREN_L, item, TokenKind.PAREN_R);\n  }\n  /**\n   * Argument[Const] : Name : Value[?Const]\n   */\n\n  parseArgument(isConst = false) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.ARGUMENT,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  }\n\n  parseConstArgument() {\n    return this.parseArgument(true);\n  } // Implements the parsing rules in the Fragments section.\n\n  /**\n   * Corresponds to both FragmentSpread and InlineFragment in the spec.\n   *\n   * FragmentSpread : ... FragmentName Directives?\n   *\n   * InlineFragment : ... TypeCondition? Directives? SelectionSet\n   */\n\n  parseFragment() {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.SPREAD);\n    const hasTypeCondition = this.expectOptionalKeyword('on');\n\n    if (!hasTypeCondition && this.peek(TokenKind.NAME)) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_SPREAD,\n        name: this.parseFragmentName(),\n        directives: this.parseDirectives(false),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.INLINE_FRAGMENT,\n      typeCondition: hasTypeCondition ? this.parseNamedType() : undefined,\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentDefinition :\n   *   - fragment FragmentName on TypeCondition Directives? SelectionSet\n   *\n   * TypeCondition : NamedType\n   */\n\n  parseFragmentDefinition() {\n    var _this$_options;\n\n    const start = this._lexer.token;\n    this.expectKeyword('fragment'); // Legacy support for defining variables within fragments changes\n    // the grammar of FragmentDefinition:\n    //   - fragment FragmentName VariableDefinitions? on TypeCondition Directives? SelectionSet\n\n    if (\n      ((_this$_options = this._options) === null || _this$_options === void 0\n        ? void 0\n        : _this$_options.allowLegacyFragmentVariables) === true\n    ) {\n      return this.node(start, {\n        kind: Kind.FRAGMENT_DEFINITION,\n        name: this.parseFragmentName(),\n        variableDefinitions: this.parseVariableDefinitions(),\n        typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n        directives: this.parseDirectives(false),\n        selectionSet: this.parseSelectionSet(),\n      });\n    }\n\n    return this.node(start, {\n      kind: Kind.FRAGMENT_DEFINITION,\n      name: this.parseFragmentName(),\n      typeCondition: (this.expectKeyword('on'), this.parseNamedType()),\n      directives: this.parseDirectives(false),\n      selectionSet: this.parseSelectionSet(),\n    });\n  }\n  /**\n   * FragmentName : Name but not `on`\n   */\n\n  parseFragmentName() {\n    if (this._lexer.token.value === 'on') {\n      throw this.unexpected();\n    }\n\n    return this.parseName();\n  } // Implements the parsing rules in the Values section.\n\n  /**\n   * Value[Const] :\n   *   - [~Const] Variable\n   *   - IntValue\n   *   - FloatValue\n   *   - StringValue\n   *   - BooleanValue\n   *   - NullValue\n   *   - EnumValue\n   *   - ListValue[?Const]\n   *   - ObjectValue[?Const]\n   *\n   * BooleanValue : one of `true` `false`\n   *\n   * NullValue : `null`\n   *\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseValueLiteral(isConst) {\n    const token = this._lexer.token;\n\n    switch (token.kind) {\n      case TokenKind.BRACKET_L:\n        return this.parseList(isConst);\n\n      case TokenKind.BRACE_L:\n        return this.parseObject(isConst);\n\n      case TokenKind.INT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.INT,\n          value: token.value,\n        });\n\n      case TokenKind.FLOAT:\n        this._lexer.advance();\n\n        return this.node(token, {\n          kind: Kind.FLOAT,\n          value: token.value,\n        });\n\n      case TokenKind.STRING:\n      case TokenKind.BLOCK_STRING:\n        return this.parseStringLiteral();\n\n      case TokenKind.NAME:\n        this._lexer.advance();\n\n        switch (token.value) {\n          case 'true':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: true,\n            });\n\n          case 'false':\n            return this.node(token, {\n              kind: Kind.BOOLEAN,\n              value: false,\n            });\n\n          case 'null':\n            return this.node(token, {\n              kind: Kind.NULL,\n            });\n\n          default:\n            return this.node(token, {\n              kind: Kind.ENUM,\n              value: token.value,\n            });\n        }\n\n      case TokenKind.DOLLAR:\n        if (isConst) {\n          this.expectToken(TokenKind.DOLLAR);\n\n          if (this._lexer.token.kind === TokenKind.NAME) {\n            const varName = this._lexer.token.value;\n            throw syntaxError(\n              this._lexer.source,\n              token.start,\n              `Unexpected variable \"$${varName}\" in constant value.`,\n            );\n          } else {\n            throw this.unexpected(token);\n          }\n        }\n\n        return this.parseVariable();\n\n      default:\n        throw this.unexpected();\n    }\n  }\n\n  parseConstValueLiteral() {\n    return this.parseValueLiteral(true);\n  }\n\n  parseStringLiteral() {\n    const token = this._lexer.token;\n\n    this._lexer.advance();\n\n    return this.node(token, {\n      kind: Kind.STRING,\n      value: token.value,\n      block: token.kind === TokenKind.BLOCK_STRING,\n    });\n  }\n  /**\n   * ListValue[Const] :\n   *   - [ ]\n   *   - [ Value[?Const]+ ]\n   */\n\n  parseList(isConst) {\n    const item = () => this.parseValueLiteral(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.LIST,\n      values: this.any(TokenKind.BRACKET_L, item, TokenKind.BRACKET_R),\n    });\n  }\n  /**\n   * ```\n   * ObjectValue[Const] :\n   *   - { }\n   *   - { ObjectField[?Const]+ }\n   * ```\n   */\n\n  parseObject(isConst) {\n    const item = () => this.parseObjectField(isConst);\n\n    return this.node(this._lexer.token, {\n      kind: Kind.OBJECT,\n      fields: this.any(TokenKind.BRACE_L, item, TokenKind.BRACE_R),\n    });\n  }\n  /**\n   * ObjectField[Const] : Name : Value[?Const]\n   */\n\n  parseObjectField(isConst) {\n    const start = this._lexer.token;\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    return this.node(start, {\n      kind: Kind.OBJECT_FIELD,\n      name,\n      value: this.parseValueLiteral(isConst),\n    });\n  } // Implements the parsing rules in the Directives section.\n\n  /**\n   * Directives[Const] : Directive[?Const]+\n   */\n\n  parseDirectives(isConst) {\n    const directives = [];\n\n    while (this.peek(TokenKind.AT)) {\n      directives.push(this.parseDirective(isConst));\n    }\n\n    return directives;\n  }\n\n  parseConstDirectives() {\n    return this.parseDirectives(true);\n  }\n  /**\n   * ```\n   * Directive[Const] : @ Name Arguments[?Const]?\n   * ```\n   */\n\n  parseDirective(isConst) {\n    const start = this._lexer.token;\n    this.expectToken(TokenKind.AT);\n    return this.node(start, {\n      kind: Kind.DIRECTIVE,\n      name: this.parseName(),\n      arguments: this.parseArguments(isConst),\n    });\n  } // Implements the parsing rules in the Types section.\n\n  /**\n   * Type :\n   *   - NamedType\n   *   - ListType\n   *   - NonNullType\n   */\n\n  parseTypeReference() {\n    const start = this._lexer.token;\n    let type;\n\n    if (this.expectOptionalToken(TokenKind.BRACKET_L)) {\n      const innerType = this.parseTypeReference();\n      this.expectToken(TokenKind.BRACKET_R);\n      type = this.node(start, {\n        kind: Kind.LIST_TYPE,\n        type: innerType,\n      });\n    } else {\n      type = this.parseNamedType();\n    }\n\n    if (this.expectOptionalToken(TokenKind.BANG)) {\n      return this.node(start, {\n        kind: Kind.NON_NULL_TYPE,\n        type,\n      });\n    }\n\n    return type;\n  }\n  /**\n   * NamedType : Name\n   */\n\n  parseNamedType() {\n    return this.node(this._lexer.token, {\n      kind: Kind.NAMED_TYPE,\n      name: this.parseName(),\n    });\n  } // Implements the parsing rules in the Type Definition section.\n\n  peekDescription() {\n    return this.peek(TokenKind.STRING) || this.peek(TokenKind.BLOCK_STRING);\n  }\n  /**\n   * Description : StringValue\n   */\n\n  parseDescription() {\n    if (this.peekDescription()) {\n      return this.parseStringLiteral();\n    }\n  }\n  /**\n   * ```\n   * SchemaDefinition : Description? schema Directives[Const]? { OperationTypeDefinition+ }\n   * ```\n   */\n\n  parseSchemaDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.many(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n    return this.node(start, {\n      kind: Kind.SCHEMA_DEFINITION,\n      description,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * OperationTypeDefinition : OperationType : NamedType\n   */\n\n  parseOperationTypeDefinition() {\n    const start = this._lexer.token;\n    const operation = this.parseOperationType();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseNamedType();\n    return this.node(start, {\n      kind: Kind.OPERATION_TYPE_DEFINITION,\n      operation,\n      type,\n    });\n  }\n  /**\n   * ScalarTypeDefinition : Description? scalar Name Directives[Const]?\n   */\n\n  parseScalarTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeDefinition :\n   *   Description?\n   *   type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition?\n   */\n\n  parseObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ImplementsInterfaces :\n   *   - implements `&`? NamedType\n   *   - ImplementsInterfaces & NamedType\n   */\n\n  parseImplementsInterfaces() {\n    return this.expectOptionalKeyword('implements')\n      ? this.delimitedMany(TokenKind.AMP, this.parseNamedType)\n      : [];\n  }\n  /**\n   * ```\n   * FieldsDefinition : { FieldDefinition+ }\n   * ```\n   */\n\n  parseFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseFieldDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * FieldDefinition :\n   *   - Description? Name ArgumentsDefinition? : Type Directives[Const]?\n   */\n\n  parseFieldDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.FIELD_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      type,\n      directives,\n    });\n  }\n  /**\n   * ArgumentsDefinition : ( InputValueDefinition+ )\n   */\n\n  parseArgumentDefs() {\n    return this.optionalMany(\n      TokenKind.PAREN_L,\n      this.parseInputValueDef,\n      TokenKind.PAREN_R,\n    );\n  }\n  /**\n   * InputValueDefinition :\n   *   - Description? Name : Type DefaultValue? Directives[Const]?\n   */\n\n  parseInputValueDef() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseName();\n    this.expectToken(TokenKind.COLON);\n    const type = this.parseTypeReference();\n    let defaultValue;\n\n    if (this.expectOptionalToken(TokenKind.EQUALS)) {\n      defaultValue = this.parseConstValueLiteral();\n    }\n\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.INPUT_VALUE_DEFINITION,\n      description,\n      name,\n      type,\n      defaultValue,\n      directives,\n    });\n  }\n  /**\n   * InterfaceTypeDefinition :\n   *   - Description? interface Name Directives[Const]? FieldsDefinition?\n   */\n\n  parseInterfaceTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_DEFINITION,\n      description,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeDefinition :\n   *   - Description? union Name Directives[Const]? UnionMemberTypes?\n   */\n\n  parseUnionTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * UnionMemberTypes :\n   *   - = `|`? NamedType\n   *   - UnionMemberTypes | NamedType\n   */\n\n  parseUnionMemberTypes() {\n    return this.expectOptionalToken(TokenKind.EQUALS)\n      ? this.delimitedMany(TokenKind.PIPE, this.parseNamedType)\n      : [];\n  }\n  /**\n   * EnumTypeDefinition :\n   *   - Description? enum Name Directives[Const]? EnumValuesDefinition?\n   */\n\n  parseEnumTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * ```\n   * EnumValuesDefinition : { EnumValueDefinition+ }\n   * ```\n   */\n\n  parseEnumValuesDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseEnumValueDefinition,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * EnumValueDefinition : Description? EnumValue Directives[Const]?\n   */\n\n  parseEnumValueDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    const name = this.parseEnumValueName();\n    const directives = this.parseConstDirectives();\n    return this.node(start, {\n      kind: Kind.ENUM_VALUE_DEFINITION,\n      description,\n      name,\n      directives,\n    });\n  }\n  /**\n   * EnumValue : Name but not `true`, `false` or `null`\n   */\n\n  parseEnumValueName() {\n    if (\n      this._lexer.token.value === 'true' ||\n      this._lexer.token.value === 'false' ||\n      this._lexer.token.value === 'null'\n    ) {\n      throw syntaxError(\n        this._lexer.source,\n        this._lexer.token.start,\n        `${getTokenDesc(\n          this._lexer.token,\n        )} is reserved and cannot be used for an enum value.`,\n      );\n    }\n\n    return this.parseName();\n  }\n  /**\n   * InputObjectTypeDefinition :\n   *   - Description? input Name Directives[Const]? InputFieldsDefinition?\n   */\n\n  parseInputObjectTypeDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_DEFINITION,\n      description,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * InputFieldsDefinition : { InputValueDefinition+ }\n   * ```\n   */\n\n  parseInputFieldsDefinition() {\n    return this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseInputValueDef,\n      TokenKind.BRACE_R,\n    );\n  }\n  /**\n   * TypeSystemExtension :\n   *   - SchemaExtension\n   *   - TypeExtension\n   *\n   * TypeExtension :\n   *   - ScalarTypeExtension\n   *   - ObjectTypeExtension\n   *   - InterfaceTypeExtension\n   *   - UnionTypeExtension\n   *   - EnumTypeExtension\n   *   - InputObjectTypeDefinition\n   */\n\n  parseTypeSystemExtension() {\n    const keywordToken = this._lexer.lookahead();\n\n    if (keywordToken.kind === TokenKind.NAME) {\n      switch (keywordToken.value) {\n        case 'schema':\n          return this.parseSchemaExtension();\n\n        case 'scalar':\n          return this.parseScalarTypeExtension();\n\n        case 'type':\n          return this.parseObjectTypeExtension();\n\n        case 'interface':\n          return this.parseInterfaceTypeExtension();\n\n        case 'union':\n          return this.parseUnionTypeExtension();\n\n        case 'enum':\n          return this.parseEnumTypeExtension();\n\n        case 'input':\n          return this.parseInputObjectTypeExtension();\n      }\n    }\n\n    throw this.unexpected(keywordToken);\n  }\n  /**\n   * ```\n   * SchemaExtension :\n   *  - extend schema Directives[Const]? { OperationTypeDefinition+ }\n   *  - extend schema Directives[Const]\n   * ```\n   */\n\n  parseSchemaExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('schema');\n    const directives = this.parseConstDirectives();\n    const operationTypes = this.optionalMany(\n      TokenKind.BRACE_L,\n      this.parseOperationTypeDefinition,\n      TokenKind.BRACE_R,\n    );\n\n    if (directives.length === 0 && operationTypes.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCHEMA_EXTENSION,\n      directives,\n      operationTypes,\n    });\n  }\n  /**\n   * ScalarTypeExtension :\n   *   - extend scalar Name Directives[Const]\n   */\n\n  parseScalarTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('scalar');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n\n    if (directives.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.SCALAR_TYPE_EXTENSION,\n      name,\n      directives,\n    });\n  }\n  /**\n   * ObjectTypeExtension :\n   *  - extend type Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend type Name ImplementsInterfaces? Directives[Const]\n   *  - extend type Name ImplementsInterfaces\n   */\n\n  parseObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('type');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.OBJECT_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * InterfaceTypeExtension :\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]? FieldsDefinition\n   *  - extend interface Name ImplementsInterfaces? Directives[Const]\n   *  - extend interface Name ImplementsInterfaces\n   */\n\n  parseInterfaceTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('interface');\n    const name = this.parseName();\n    const interfaces = this.parseImplementsInterfaces();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseFieldsDefinition();\n\n    if (\n      interfaces.length === 0 &&\n      directives.length === 0 &&\n      fields.length === 0\n    ) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INTERFACE_TYPE_EXTENSION,\n      name,\n      interfaces,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * UnionTypeExtension :\n   *   - extend union Name Directives[Const]? UnionMemberTypes\n   *   - extend union Name Directives[Const]\n   */\n\n  parseUnionTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('union');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const types = this.parseUnionMemberTypes();\n\n    if (directives.length === 0 && types.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.UNION_TYPE_EXTENSION,\n      name,\n      directives,\n      types,\n    });\n  }\n  /**\n   * EnumTypeExtension :\n   *   - extend enum Name Directives[Const]? EnumValuesDefinition\n   *   - extend enum Name Directives[Const]\n   */\n\n  parseEnumTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('enum');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const values = this.parseEnumValuesDefinition();\n\n    if (directives.length === 0 && values.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.ENUM_TYPE_EXTENSION,\n      name,\n      directives,\n      values,\n    });\n  }\n  /**\n   * InputObjectTypeExtension :\n   *   - extend input Name Directives[Const]? InputFieldsDefinition\n   *   - extend input Name Directives[Const]\n   */\n\n  parseInputObjectTypeExtension() {\n    const start = this._lexer.token;\n    this.expectKeyword('extend');\n    this.expectKeyword('input');\n    const name = this.parseName();\n    const directives = this.parseConstDirectives();\n    const fields = this.parseInputFieldsDefinition();\n\n    if (directives.length === 0 && fields.length === 0) {\n      throw this.unexpected();\n    }\n\n    return this.node(start, {\n      kind: Kind.INPUT_OBJECT_TYPE_EXTENSION,\n      name,\n      directives,\n      fields,\n    });\n  }\n  /**\n   * ```\n   * DirectiveDefinition :\n   *   - Description? directive @ Name ArgumentsDefinition? `repeatable`? on DirectiveLocations\n   * ```\n   */\n\n  parseDirectiveDefinition() {\n    const start = this._lexer.token;\n    const description = this.parseDescription();\n    this.expectKeyword('directive');\n    this.expectToken(TokenKind.AT);\n    const name = this.parseName();\n    const args = this.parseArgumentDefs();\n    const repeatable = this.expectOptionalKeyword('repeatable');\n    this.expectKeyword('on');\n    const locations = this.parseDirectiveLocations();\n    return this.node(start, {\n      kind: Kind.DIRECTIVE_DEFINITION,\n      description,\n      name,\n      arguments: args,\n      repeatable,\n      locations,\n    });\n  }\n  /**\n   * DirectiveLocations :\n   *   - `|`? DirectiveLocation\n   *   - DirectiveLocations | DirectiveLocation\n   */\n\n  parseDirectiveLocations() {\n    return this.delimitedMany(TokenKind.PIPE, this.parseDirectiveLocation);\n  }\n  /*\n   * DirectiveLocation :\n   *   - ExecutableDirectiveLocation\n   *   - TypeSystemDirectiveLocation\n   *\n   * ExecutableDirectiveLocation : one of\n   *   `QUERY`\n   *   `MUTATION`\n   *   `SUBSCRIPTION`\n   *   `FIELD`\n   *   `FRAGMENT_DEFINITION`\n   *   `FRAGMENT_SPREAD`\n   *   `INLINE_FRAGMENT`\n   *\n   * TypeSystemDirectiveLocation : one of\n   *   `SCHEMA`\n   *   `SCALAR`\n   *   `OBJECT`\n   *   `FIELD_DEFINITION`\n   *   `ARGUMENT_DEFINITION`\n   *   `INTERFACE`\n   *   `UNION`\n   *   `ENUM`\n   *   `ENUM_VALUE`\n   *   `INPUT_OBJECT`\n   *   `INPUT_FIELD_DEFINITION`\n   */\n\n  parseDirectiveLocation() {\n    const start = this._lexer.token;\n    const name = this.parseName();\n\n    if (Object.prototype.hasOwnProperty.call(DirectiveLocation, name.value)) {\n      return name;\n    }\n\n    throw this.unexpected(start);\n  } // Core parsing utility functions\n\n  /**\n   * Returns a node that, if configured to do so, sets a \"loc\" field as a\n   * location object, used to identify the place in the source that created a\n   * given parsed object.\n   */\n\n  node(startToken, node) {\n    var _this$_options2;\n\n    if (\n      ((_this$_options2 = this._options) === null || _this$_options2 === void 0\n        ? void 0\n        : _this$_options2.noLocation) !== true\n    ) {\n      node.loc = new Location(\n        startToken,\n        this._lexer.lastToken,\n        this._lexer.source,\n      );\n    }\n\n    return node;\n  }\n  /**\n   * Determines if the next token is of a given kind\n   */\n\n  peek(kind) {\n    return this._lexer.token.kind === kind;\n  }\n  /**\n   * If the next token is of the given kind, return that token after advancing the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return token;\n    }\n\n    throw syntaxError(\n      this._lexer.source,\n      token.start,\n      `Expected ${getTokenKindDesc(kind)}, found ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * If the next token is of the given kind, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalToken(kind) {\n    const token = this._lexer.token;\n\n    if (token.kind === kind) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * If the next token is a given keyword, advance the lexer.\n   * Otherwise, do not change the parser state and throw an error.\n   */\n\n  expectKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n    } else {\n      throw syntaxError(\n        this._lexer.source,\n        token.start,\n        `Expected \"${value}\", found ${getTokenDesc(token)}.`,\n      );\n    }\n  }\n  /**\n   * If the next token is a given keyword, return \"true\" after advancing the lexer.\n   * Otherwise, do not change the parser state and return \"false\".\n   */\n\n  expectOptionalKeyword(value) {\n    const token = this._lexer.token;\n\n    if (token.kind === TokenKind.NAME && token.value === value) {\n      this._lexer.advance();\n\n      return true;\n    }\n\n    return false;\n  }\n  /**\n   * Helper function for creating an error when an unexpected lexed token is encountered.\n   */\n\n  unexpected(atToken) {\n    const token =\n      atToken !== null && atToken !== void 0 ? atToken : this._lexer.token;\n    return syntaxError(\n      this._lexer.source,\n      token.start,\n      `Unexpected ${getTokenDesc(token)}.`,\n    );\n  }\n  /**\n   * Returns a possibly empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  any(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    while (!this.expectOptionalToken(closeKind)) {\n      nodes.push(parseFn.call(this));\n    }\n\n    return nodes;\n  }\n  /**\n   * Returns a list of parse nodes, determined by the parseFn.\n   * It can be empty only if open token is missing otherwise it will always return non-empty list\n   * that begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  optionalMany(openKind, parseFn, closeKind) {\n    if (this.expectOptionalToken(openKind)) {\n      const nodes = [];\n\n      do {\n        nodes.push(parseFn.call(this));\n      } while (!this.expectOptionalToken(closeKind));\n\n      return nodes;\n    }\n\n    return [];\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list begins with a lex token of openKind and ends with a lex token of closeKind.\n   * Advances the parser to the next lex token after the closing token.\n   */\n\n  many(openKind, parseFn, closeKind) {\n    this.expectToken(openKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (!this.expectOptionalToken(closeKind));\n\n    return nodes;\n  }\n  /**\n   * Returns a non-empty list of parse nodes, determined by the parseFn.\n   * This list may begin with a lex token of delimiterKind followed by items separated by lex tokens of tokenKind.\n   * Advances the parser to the next lex token after last item in the list.\n   */\n\n  delimitedMany(delimiterKind, parseFn) {\n    this.expectOptionalToken(delimiterKind);\n    const nodes = [];\n\n    do {\n      nodes.push(parseFn.call(this));\n    } while (this.expectOptionalToken(delimiterKind));\n\n    return nodes;\n  }\n}\n/**\n * A helper function to describe a token as a string for debugging.\n */\n\nfunction getTokenDesc(token) {\n  const value = token.value;\n  return getTokenKindDesc(token.kind) + (value != null ? ` \"${value}\"` : '');\n}\n/**\n * A helper function to describe a token kind as a string for debugging.\n */\n\nfunction getTokenKindDesc(kind) {\n  return isPunctuatorTokenKind(kind) ? `\"${kind}\"` : kind;\n}\n","import { parse } from 'graphql';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  Location,\n} from 'graphql/language/ast';\n\n// A map docString -> graphql document\nconst docCache = new Map<string, DocumentNode>();\n\n// A map fragmentName -> [normalized source]\nconst fragmentSourceMap = new Map<string, Set<string>>();\n\nlet printFragmentWarnings = true;\nlet experimentalFragmentVariables = false;\n\n// Strip insignificant whitespace\n// Note that this could do a lot more, such as reorder fields etc.\nfunction normalize(string: string) {\n  return string.replace(/[\\s,]+/g, ' ').trim();\n}\n\nfunction cacheKeyFromLoc(loc: Location) {\n  return normalize(loc.source.body.substring(loc.start, loc.end));\n}\n\n// Take a unstripped parsed document (query/mutation or even fragment), and\n// check all fragment definitions, checking for name->source uniqueness.\n// We also want to make sure only unique fragments exist in the document.\nfunction processFragments(ast: DocumentNode) {\n  const seenKeys = new Set<string>();\n  const definitions: DefinitionNode[] = [];\n\n  ast.definitions.forEach(fragmentDefinition => {\n    if (fragmentDefinition.kind === 'FragmentDefinition') {\n      var fragmentName = fragmentDefinition.name.value;\n      var sourceKey = cacheKeyFromLoc(fragmentDefinition.loc!);\n\n      // We know something about this fragment\n      let sourceKeySet = fragmentSourceMap.get(fragmentName)!;\n      if (sourceKeySet && !sourceKeySet.has(sourceKey)) {\n        // this is a problem because the app developer is trying to register another fragment with\n        // the same name as one previously registered. So, we tell them about it.\n        if (printFragmentWarnings) {\n          console.warn(\"Warning: fragment with name \" + fragmentName + \" already exists.\\n\"\n            + \"graphql-tag enforces all fragment names across your application to be unique; read more about\\n\"\n            + \"this in the docs: http://dev.apollodata.com/core/fragments.html#unique-names\");\n        }\n      } else if (!sourceKeySet) {\n        fragmentSourceMap.set(fragmentName, sourceKeySet = new Set);\n      }\n\n      sourceKeySet.add(sourceKey);\n\n      if (!seenKeys.has(sourceKey)) {\n        seenKeys.add(sourceKey);\n        definitions.push(fragmentDefinition);\n      }\n    } else {\n      definitions.push(fragmentDefinition);\n    }\n  });\n\n  return {\n    ...ast,\n    definitions,\n  };\n}\n\nfunction stripLoc(doc: DocumentNode) {\n  const workSet = new Set<Record<string, any>>(doc.definitions);\n\n  workSet.forEach(node => {\n    if (node.loc) delete node.loc;\n    Object.keys(node).forEach(key => {\n      const value = node[key];\n      if (value && typeof value === 'object') {\n        workSet.add(value);\n      }\n    });\n  });\n\n  const loc = doc.loc as Record<string, any>;\n  if (loc) {\n    delete loc.startToken;\n    delete loc.endToken;\n  }\n\n  return doc;\n}\n\nfunction parseDocument(source: string) {\n  var cacheKey = normalize(source);\n  if (!docCache.has(cacheKey)) {\n    const parsed = parse(source, {\n      experimentalFragmentVariables,\n      allowLegacyFragmentVariables: experimentalFragmentVariables,\n    } as any);\n    if (!parsed || parsed.kind !== 'Document') {\n      throw new Error('Not a valid GraphQL document.');\n    }\n    docCache.set(\n      cacheKey,\n      // check that all \"new\" fragments inside the documents are consistent with\n      // existing fragments of the same name\n      stripLoc(processFragments(parsed)),\n    );\n  }\n  return docCache.get(cacheKey)!;\n}\n\n// XXX This should eventually disallow arbitrary string interpolation, like Relay does\nexport function gql(\n  literals: string | readonly string[],\n  ...args: any[]\n) {\n\n  if (typeof literals === 'string') {\n    literals = [literals];\n  }\n\n  let result = literals[0];\n\n  args.forEach((arg, i) => {\n    if (arg && arg.kind === 'Document') {\n      result += arg.loc.source.body;\n    } else {\n      result += arg;\n    }\n    result += literals[i + 1];\n  });\n\n  return parseDocument(result);\n}\n\nexport function resetCaches() {\n  docCache.clear();\n  fragmentSourceMap.clear();\n}\n\nexport function disableFragmentWarnings() {\n  printFragmentWarnings = false;\n}\n\nexport function enableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = true;\n}\n\nexport function disableExperimentalFragmentVariables() {\n  experimentalFragmentVariables = false;\n}\n\nconst extras = {\n  gql,\n  resetCaches,\n  disableFragmentWarnings,\n  enableExperimentalFragmentVariables,\n  disableExperimentalFragmentVariables,\n};\n\nexport namespace gql {\n  export const {\n    gql,\n    resetCaches,\n    disableFragmentWarnings,\n    enableExperimentalFragmentVariables,\n    disableExperimentalFragmentVariables,\n  } = extras;\n}\n\ngql.default = gql;\n\nexport default gql;\n","export default function _taggedTemplateLiteral(strings, raw) {\n  if (!raw) {\n    raw = strings.slice(0);\n  }\n\n  return Object.freeze(Object.defineProperties(strings, {\n    raw: {\n      value: Object.freeze(raw)\n    }\n  }));\n}","import { invariant } from '../../utilities/globals';\n\nimport {\n  DocumentNode,\n  DefinitionNode,\n  VariableDefinitionNode,\n  OperationDefinitionNode\n} from 'graphql';\n\nexport enum DocumentType {\n  Query,\n  Mutation,\n  Subscription\n}\n\nexport interface IDocumentDefinition {\n  type: DocumentType;\n  name: string;\n  variables: ReadonlyArray<VariableDefinitionNode>;\n}\n\nconst cache = new Map();\n\nexport function operationName(type: DocumentType) {\n  let name;\n  switch (type) {\n    case DocumentType.Query:\n      name = 'Query';\n      break;\n    case DocumentType.Mutation:\n      name = 'Mutation';\n      break;\n    case DocumentType.Subscription:\n      name = 'Subscription';\n      break;\n  }\n  return name;\n}\n\n// This parser is mostly used to safety check incoming documents.\nexport function parser(document: DocumentNode): IDocumentDefinition {\n  const cached = cache.get(document);\n  if (cached) return cached;\n\n  let variables, type, name;\n\n  invariant(\n    !!document && !!document.kind,\n    `Argument of ${document} passed to parser was not a valid GraphQL ` +\n      `DocumentNode. You may need to use 'graphql-tag' or another method ` +\n      `to convert your operation into a document`\n  );\n\n  const fragments = document.definitions.filter(\n    (x: DefinitionNode) => x.kind === 'FragmentDefinition'\n  );\n\n  const queries = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'query'\n  );\n\n  const mutations = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'mutation'\n  );\n\n  const subscriptions = document.definitions.filter(\n    (x: DefinitionNode) =>\n      x.kind === 'OperationDefinition' && x.operation === 'subscription'\n  );\n\n  invariant(\n    !fragments.length ||\n      (queries.length || mutations.length || subscriptions.length),\n    `Passing only a fragment to 'graphql' is not yet supported. ` +\n      `You must include a query, subscription or mutation as well`\n  );\n\n  invariant(\n    queries.length + mutations.length + subscriptions.length <= 1,\n    `react-apollo only supports a query, subscription, or a mutation per HOC. ` +\n      `${document} had ${queries.length} queries, ${subscriptions.length} ` +\n      `subscriptions and ${mutations.length} mutations. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  type = queries.length ? DocumentType.Query : DocumentType.Mutation;\n  if (!queries.length && !mutations.length) type = DocumentType.Subscription;\n\n  const definitions = queries.length\n    ? queries\n    : mutations.length\n    ? mutations\n    : subscriptions;\n\n  invariant(\n    definitions.length === 1,\n    `react-apollo only supports one definition per HOC. ${document} had ` +\n      `${definitions.length} definitions. ` +\n      `You can use 'compose' to join multiple operation types to a component`\n  );\n\n  const definition = definitions[0] as OperationDefinitionNode;\n  variables = definition.variableDefinitions || [];\n\n  if (definition.name && definition.name.kind === 'Name') {\n    name = definition.name.value;\n  } else {\n    name = 'data'; // fallback to using data if no name\n  }\n\n  const payload = { name, type, variables };\n  cache.set(document, payload);\n  return payload;\n}\n\nexport function verifyDocumentType(document: DocumentNode, type: DocumentType) {\n  const operation = parser(document);\n  const requiredOperationName = operationName(type);\n  const usedOperationName = operationName(operation.type);\n  invariant(\n    operation.type === type,\n    `Running a ${requiredOperationName} requires a graphql ` +\n      `${requiredOperationName}, but a ${usedOperationName} was used instead.`\n  );\n}\n\n","import { useContext, useEffect, useMemo, useRef, useState } from 'react';\nimport { equal } from '@wry/equality';\nimport { OperationVariables, mergeOptions } from '../../core';\nimport { getApolloContext } from '../context';\nimport { ApolloError } from '../../errors';\nimport {\n  ApolloQueryResult,\n  NetworkStatus,\n  ObservableQuery,\n  DocumentNode,\n  TypedDocumentNode,\n  WatchQueryOptions,\n} from '../../core';\nimport {\n  QueryHookOptions,\n  QueryResult,\n} from '../types/types';\n\nimport { DocumentType, verifyDocumentType } from '../parser';\nimport { useApolloClient } from './useApolloClient';\n\nexport function useQuery<\n  TData = any,\n  TVariables = OperationVariables,\n>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options?: QueryHookOptions<TData, TVariables>,\n): QueryResult<TData, TVariables> {\n  const context = useContext(getApolloContext());\n  const client = useApolloClient(options?.client);\n  const defaultWatchQueryOptions = client.defaultOptions.watchQuery;\n  verifyDocumentType(query, DocumentType.Query);\n  const [obsQuery, setObsQuery] = useState(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    // See if there is an existing observable that was used to fetch the same\n    // data and if so, use it instead since it will contain the proper queryId\n    // to fetch the result set. This is used during SSR.\n    let obsQuery: ObservableQuery<TData, TVariables> | null = null;\n    if (context.renderPromises) {\n      obsQuery = context.renderPromises.getSSRObservable(watchQueryOptions);\n    }\n\n    if (!obsQuery) {\n      // Is it safe (StrictMode/memory-wise) to call client.watchQuery here?\n      obsQuery = client.watchQuery(watchQueryOptions);\n      if (context.renderPromises) {\n        context.renderPromises.registerSSRObservable(\n          obsQuery,\n          watchQueryOptions,\n        );\n      }\n    }\n\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      obsQuery.getCurrentResult().loading\n    ) {\n      // TODO: This is a legacy API which could probably be cleaned up\n      context.renderPromises.addQueryPromise(\n        {\n          // The only options which seem to actually be used by the\n          // RenderPromises class are query and variables.\n          getOptions: () => createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n          fetchData: () => new Promise<void>((resolve) => {\n            const sub = obsQuery!.subscribe({\n              next(result) {\n                if (!result.loading) {\n                  resolve()\n                  sub.unsubscribe();\n                }\n              },\n              error() {\n                resolve();\n                sub.unsubscribe();\n              },\n              complete() {\n                resolve();\n              },\n            });\n          }),\n        },\n        // This callback never seemed to do anything\n        () => null,\n      );\n    }\n\n    return obsQuery;\n  });\n\n  let [result, setResult] = useState(() => {\n    const result = obsQuery.getCurrentResult();\n    if (!result.loading && options) {\n      if (result.error) {\n        options.onError?.(result.error);\n      } else if (result.data) {\n        options.onCompleted?.(result.data);\n      }\n    }\n\n    return result;\n  });\n\n  const ref = useRef({\n    client,\n    query,\n    options,\n    result,\n    previousData: void 0 as TData | undefined,\n    watchQueryOptions: createWatchQueryOptions(query, options, defaultWatchQueryOptions),\n  });\n\n  // An effect to recreate the obsQuery whenever the client or query changes.\n  // This effect is also responsible for checking and updating the obsQuery\n  // options whenever they change.\n  useEffect(() => {\n    const watchQueryOptions = createWatchQueryOptions(query, options, defaultWatchQueryOptions);\n    let nextResult: ApolloQueryResult<TData> | undefined;\n    if (ref.current.client !== client || !equal(ref.current.query, query)) {\n      const obsQuery = client.watchQuery(watchQueryOptions);\n      setObsQuery(obsQuery);\n      nextResult = obsQuery.getCurrentResult();\n    } else if (!equal(ref.current.watchQueryOptions, watchQueryOptions)) {\n      obsQuery.setOptions(watchQueryOptions).catch(() => {});\n      nextResult = obsQuery.getCurrentResult();\n      ref.current.watchQueryOptions = watchQueryOptions;\n    }\n\n    if (nextResult) {\n      const previousResult = ref.current.result;\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = nextResult);\n      if (!nextResult.loading && options) {\n        if (nextResult.error) {\n          options.onError?.(nextResult.error);\n        } else if (nextResult.data) {\n          options.onCompleted?.(nextResult.data);\n        }\n      }\n    }\n\n    Object.assign(ref.current, { client, query });\n  }, [obsQuery, client, query, options]);\n\n  // An effect to subscribe to the current observable query\n  useEffect(() => {\n    if (context.renderPromises) {\n      return;\n    }\n\n    let subscription = obsQuery.subscribe(onNext, onError);\n    // We use `getCurrentResult()` instead of the callback argument because\n    // the values differ slightly. Specifically, loading results will have\n    // an empty object for data instead of `undefined` for some reason.\n    function onNext() {\n      const previousResult = ref.current.result;\n      const result = obsQuery.getCurrentResult();\n      // Make sure we're not attempting to re-render similar results\n      if (\n        previousResult &&\n        previousResult.loading === result.loading &&\n        previousResult.networkStatus === result.networkStatus &&\n        equal(previousResult.data, result.data)\n      ) {\n        return;\n      }\n\n      if (previousResult.data) {\n        ref.current.previousData = previousResult.data;\n      }\n\n      setResult(ref.current.result = result);\n      if (!result.loading) {\n        ref.current.options?.onCompleted?.(result.data);\n      }\n    }\n\n    function onError(error: Error) {\n      const last = obsQuery[\"last\"];\n      subscription.unsubscribe();\n      // Unfortunately, if `lastError` is set in the current\n      // `observableQuery` when the subscription is re-created,\n      // the subscription will immediately receive the error, which will\n      // cause it to terminate again. To avoid this, we first clear\n      // the last error/result from the `observableQuery` before re-starting\n      // the subscription, and restore it afterwards (so the subscription\n      // has a chance to stay open).\n      try {\n        obsQuery.resetLastResults();\n        subscription = obsQuery.subscribe(onNext, onError);\n      } finally {\n        obsQuery[\"last\"] = last;\n      }\n\n      if (!error.hasOwnProperty('graphQLErrors')) {\n        // The error is not a GraphQL error\n        throw error;\n      }\n\n      const previousResult = ref.current.result;\n      if (\n        (previousResult && previousResult.loading) ||\n        !equal(error, previousResult.error)\n      ) {\n        setResult(ref.current.result = {\n          data: previousResult.data,\n          error: error as ApolloError,\n          loading: false,\n          networkStatus: NetworkStatus.error,\n        });\n        ref.current.options?.onError?.(error as ApolloError);\n      }\n    }\n\n    return () => subscription.unsubscribe();\n  }, [obsQuery, context.renderPromises, client.disableNetworkFetches]);\n\n  let partial: boolean | undefined;\n  ({ partial, ...result } = result);\n\n  {\n    // BAD BOY CODE BLOCK WHERE WE PUT SIDE-EFFECTS IN THE RENDER FUNCTION\n    //\n    // TODO: This code should be removed when the partialRefetch option is\n    // removed. I was unable to get this hook to behave reasonably in certain\n    // edge cases when this block was put in an effect.\n    if (\n      partial &&\n      options?.partialRefetch &&\n      !result.loading &&\n      (!result.data || Object.keys(result.data).length === 0) &&\n      obsQuery.options.fetchPolicy !== 'cache-only'\n    ) {\n      result = {\n        ...result,\n        loading: true,\n        networkStatus: NetworkStatus.refetch,\n      };\n\n      obsQuery.refetch();\n    }\n\n    // TODO: This is a hack to make sure useLazyQuery executions update the\n    // obsevable query options for ssr.\n    if (\n      context.renderPromises &&\n      options?.ssr !== false &&\n      !options?.skip &&\n      result.loading\n    ) {\n      obsQuery.setOptions(createWatchQueryOptions(query, options, defaultWatchQueryOptions)).catch(() => {});\n    }\n\n    // We assign options during rendering as a guard to make sure that\n    // callbacks like onCompleted and onError are not stale.\n    Object.assign(ref.current, { options });\n  }\n\n  if (\n    (context.renderPromises || client.disableNetworkFetches) &&\n    options?.ssr === false\n  ) {\n    // If SSR has been explicitly disabled, and this function has been called\n    // on the server side, return the default loading state.\n    result = ref.current.result = {\n      loading: true,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.loading,\n    };\n  } else if (options?.skip || options?.fetchPolicy === 'standby') {\n    // When skipping a query (ie. we're not querying for data but still want to\n    // render children), make sure the `data` is cleared out and `loading` is\n    // set to `false` (since we aren't loading anything).\n    //\n    // NOTE: We no longer think this is the correct behavior. Skipping should\n    // not automatically set `data` to `undefined`, but instead leave the\n    // previous data in place. In other words, skipping should not mandate that\n    // previously received data is all of a sudden removed. Unfortunately,\n    // changing this is breaking, so we'll have to wait until Apollo Client 4.0\n    // to address this.\n    result = {\n      loading: false,\n      data: void 0 as unknown as TData,\n      error: void 0,\n      networkStatus: NetworkStatus.ready,\n    };\n  }\n\n  if (result.errors && result.errors.length) {\n    // Until a set naming convention for networkError and graphQLErrors is\n    // decided upon, we map errors (graphQLErrors) to the error options.\n    // TODO: Is it possible for both result.error and result.errors to be\n    // defined here?\n    result = {\n      ...result,\n      error: result.error || new ApolloError({ graphQLErrors: result.errors }),\n    };\n  }\n\n  const obsQueryFields = useMemo(() => ({\n    refetch: obsQuery.refetch.bind(obsQuery),\n    fetchMore: obsQuery.fetchMore.bind(obsQuery),\n    updateQuery: obsQuery.updateQuery.bind(obsQuery),\n    startPolling: obsQuery.startPolling.bind(obsQuery),\n    stopPolling: obsQuery.stopPolling.bind(obsQuery),\n    subscribeToMore: obsQuery.subscribeToMore.bind(obsQuery),\n  }), [obsQuery]);\n\n  return {\n    ...obsQueryFields,\n    variables: createWatchQueryOptions(query, options, defaultWatchQueryOptions).variables,\n    client,\n    called: true,\n    previousData: ref.current.previousData,\n    ...result,\n  };\n}\n\n/**\n * A function to massage options before passing them the ObservableQuery.\n */\nfunction createWatchQueryOptions<TData, TVariables>(\n  query: DocumentNode | TypedDocumentNode<TData, TVariables>,\n  options: QueryHookOptions<TData, TVariables> = {},\n  defaultOptions?: Partial<WatchQueryOptions<any, any>>\n): WatchQueryOptions<TVariables, TData> {\n  // TODO: For some reason, we pass context, which is the React Apollo Context,\n  // into observable queries, and test for that.\n  // removing hook specific options\n  const {\n    skip,\n    ssr,\n    onCompleted,\n    onError,\n    displayName,\n    ...otherOptions\n  } = options;\n\n  let watchQueryOptions = { query, ...otherOptions };\n  if (defaultOptions) {\n    watchQueryOptions = mergeOptions(defaultOptions, watchQueryOptions);\n  }\n\n  if (skip) {\n    watchQueryOptions.fetchPolicy = 'standby';\n  } else if (\n    watchQueryOptions.context?.renderPromises &&\n    (\n      watchQueryOptions.fetchPolicy === 'network-only' ||\n      watchQueryOptions.fetchPolicy === 'cache-and-network'\n    )\n  ) {\n    // this behavior was added to react-apollo without explanation in this PR\n    // https://github.com/apollographql/react-apollo/pull/1579\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  } else if (!watchQueryOptions.fetchPolicy) {\n    // cache-first is the default policy, but we explicitly assign it here so\n    // the cache policies computed based on options can be cleared\n    watchQueryOptions.fetchPolicy = 'cache-first';\n  }\n\n  if (!watchQueryOptions.variables) {\n    watchQueryOptions.variables = {} as TVariables;\n  }\n\n  return watchQueryOptions;\n}\n","import { invariant } from '../../utilities/globals';\nimport { useContext } from 'react';\nimport { ApolloClient } from '../../core';\nimport { getApolloContext } from '../context';\n\nexport function useApolloClient(\n  override?: ApolloClient<object>,\n): ApolloClient<object> {\n  const context = useContext(getApolloContext());\n  const client = override || context.client;\n  invariant(\n    !!client,\n    'Could not find \"client\" in the context or passed in as an option. ' +\n    'Wrap the root component in an <ApolloProvider>, or pass an ApolloClient ' +\n    'instance in via options.',\n  );\n\n  return client;\n}\n"],"names":["CardContent","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","padding","paddingBottom","name","theme","content","onClick","id","_construct","Parent","args","Class","isNativeReflectConstruct","Reflect","construct","a","push","apply","instance","Function","bind","setPrototypeOf","prototype","arguments","_wrapNativeSuper","_cache","Map","undefined","fn","toString","call","indexOf","TypeError","has","get","set","Wrapper","getPrototypeOf","this","constructor","Object","create","value","enumerable","writable","configurable","invariant","condition","message","Boolean","Error","LineRegExp","getLocation","source","position","lastLineStart","line","body","matchAll","match","index","length","column","printLocation","location","printSourceLocation","start","sourceLocation","firstLineColumnOffset","locationOffset","padStart","lineIndex","lineOffset","lineNum","columnOffset","columnNum","locationStr","lines","split","locationLine","subLineIndex","Math","floor","subLineColumnNum","subLines","i","slice","printPrefixedLines","map","subLine","existingLines","filter","padLen","max","prefix","join","GraphQLError","nodes","positions","path","originalError","extensions","_this$nodes","_nodeLocations$","_ref","undefinedIfEmpty","Array","isArray","nodeLocations","node","loc","locations","pos","originalExtensions","defineProperties","stack","defineProperty","captureStackTrace","output","formattedError","keys","Symbol","toStringTag","array","syntaxError","description","TokenKind","DirectiveLocation","Lexer","startOfFileToken","Token","lastToken","token","lineStart","lookahead","kind","next","nextToken","readNextToken","end","prev","isUnicodeScalarValue","code","isSupplementaryCodePoint","isLeadingSurrogate","charCodeAt","isTrailingSurrogate","printCodePointAt","lexer","codePointAt","char","String","fromCodePoint","toUpperCase","createToken","col","bodyLength","readComment","readBlockString","readString","isDigit","readNumber","isNameStart","readName","firstCode","isFloat","readDigits","chunkStart","escape","readEscapedUnicodeVariableWidth","readEscapedUnicodeFixedWidth","readEscapedCharacter","size","point","readHexDigit","read16BitHexCode","trailingCode","currentLine","blockLines","dedentBlockStringLines","isNameContinue","Parser","options","sourceObj","isSource","Source","_lexer","_options","expectToken","Kind","definitions","many","parseDefinition","peek","parseOperationDefinition","hasDescription","peekDescription","keywordToken","parseSchemaDefinition","parseScalarTypeDefinition","parseObjectTypeDefinition","parseInterfaceTypeDefinition","parseUnionTypeDefinition","parseEnumTypeDefinition","parseInputObjectTypeDefinition","parseDirectiveDefinition","parseFragmentDefinition","parseTypeSystemExtension","unexpected","operation","OperationTypeNode","variableDefinitions","directives","selectionSet","parseSelectionSet","parseOperationType","parseName","parseVariableDefinitions","parseDirectives","operationToken","optionalMany","parseVariableDefinition","variable","parseVariable","type","parseTypeReference","defaultValue","expectOptionalToken","parseConstValueLiteral","parseConstDirectives","selections","parseSelection","parseFragment","parseField","alias","nameOrAlias","parseArguments","isConst","item","parseConstArgument","parseArgument","parseValueLiteral","hasTypeCondition","expectOptionalKeyword","parseFragmentName","typeCondition","parseNamedType","_this$_options","expectKeyword","allowLegacyFragmentVariables","parseList","parseObject","advance","parseStringLiteral","varName","block","values","any","fields","parseObjectField","parseDirective","innerType","parseDescription","operationTypes","parseOperationTypeDefinition","interfaces","parseImplementsInterfaces","parseFieldsDefinition","delimitedMany","parseFieldDefinition","parseArgumentDefs","parseInputValueDef","types","parseUnionMemberTypes","parseEnumValuesDefinition","parseEnumValueDefinition","parseEnumValueName","getTokenDesc","parseInputFieldsDefinition","parseSchemaExtension","parseScalarTypeExtension","parseObjectTypeExtension","parseInterfaceTypeExtension","parseUnionTypeExtension","parseEnumTypeExtension","parseInputObjectTypeExtension","repeatable","parseDirectiveLocations","parseDirectiveLocation","hasOwnProperty","startToken","_this$_options2","noLocation","Location","getTokenKindDesc","atToken","openKind","parseFn","closeKind","delimiterKind","isPunctuatorTokenKind","docCache","fragmentSourceMap","printFragmentWarnings","experimentalFragmentVariables","normalize","string","replace","trim","processFragments","ast","seenKeys","Set","forEach","fragmentDefinition","fragmentName","sourceKey","substring","sourceKeySet","console","warn","add","parseDocument","cacheKey","parsed","parse","doc","workSet","key","endToken","stripLoc","gql","literals","result","arg","extras","clear","resetCaches","disableFragmentWarnings","enableExperimentalFragmentVariables","disableExperimentalFragmentVariables","_taggedTemplateLiteral","strings","raw","freeze","DocumentType","cache","operationName","Query","Mutation","Subscription","document","variables","cached","fragments","x","queries","mutations","subscriptions","definition","useQuery","query","context","useContext","client","override","useApolloClient","defaultWatchQueryOptions","defaultOptions","watchQuery","verifyDocumentType","partial","useState","watchQueryOptions","createWatchQueryOptions","obsQuery","renderPromises","getSSRObservable","registerSSRObservable","ssr","skip","getCurrentResult","loading","addQueryPromise","getOptions","fetchData","Promise","resolve","sub","subscribe","unsubscribe","error","complete","setObsQuery","onError","data","onCompleted","setResult","useRef","previousData","useEffect","nextResult","current","setOptions","catch","previousResult","assign","subscription","onNext","last","resetLastResults","networkStatus","disableNetworkFetches","partialRefetch","fetchPolicy","refetch","errors","graphQLErrors","obsQueryFields","useMemo","fetchMore","updateQuery","startPolling","stopPolling","subscribeToMore","called","otherOptions"],"sourceRoot":""}