{"version":3,"file":"static/js/469.9c8f457a.chunk.js","mappings":"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","sources":["generated/graphql.tsx","components/characters/CharactersList/utils.tsx","components/characters/CharactersList/cardRenderer/styles.tsx","components/characters/CharactersList/cardRenderer/cardRenderer.tsx","components/characters/CharactersList/CharactersList.tsx","pages/Characters/Characters.tsx"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\n\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n/** A single film. */\nexport type Film = Node & {\n  __typename?: \"Film\";\n  characterConnection?: Maybe<FilmCharactersConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The name of the director of this film. */\n  director?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /** The episode number of this film. */\n  episodeID?: Maybe<Scalars[\"Int\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The opening paragraphs at the beginning of this film. */\n  openingCrawl?: Maybe<Scalars[\"String\"]>;\n  planetConnection?: Maybe<FilmPlanetsConnection>;\n  /** The name(s) of the producer(s) of this film. */\n  producers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The ISO 8601 date format of film release at original creator country. */\n  releaseDate?: Maybe<Scalars[\"String\"]>;\n  speciesConnection?: Maybe<FilmSpeciesConnection>;\n  starshipConnection?: Maybe<FilmStarshipsConnection>;\n  /** The title of this film. */\n  title?: Maybe<Scalars[\"String\"]>;\n  vehicleConnection?: Maybe<FilmVehiclesConnection>;\n};\n\n/** A single film. */\nexport type FilmCharacterConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmPlanetConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmSpeciesConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmStarshipConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmVehicleConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type FilmCharactersConnection = {\n  __typename?: \"FilmCharactersConnection\";\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  characters?: Maybe<Array<Maybe<Person>>>;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmCharactersEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmCharactersEdge = {\n  __typename?: \"FilmCharactersEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type FilmPlanetsConnection = {\n  __typename?: \"FilmPlanetsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmPlanetsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmPlanetsEdge = {\n  __typename?: \"FilmPlanetsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n};\n\n/** A connection to a list of items. */\nexport type FilmSpeciesConnection = {\n  __typename?: \"FilmSpeciesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmSpeciesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmSpeciesEdge = {\n  __typename?: \"FilmSpeciesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n};\n\n/** A connection to a list of items. */\nexport type FilmStarshipsConnection = {\n  __typename?: \"FilmStarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmStarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmStarshipsEdge = {\n  __typename?: \"FilmStarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A connection to a list of items. */\nexport type FilmVehiclesConnection = {\n  __typename?: \"FilmVehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmVehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmVehiclesEdge = {\n  __typename?: \"FilmVehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\n/** A connection to a list of items. */\nexport type FilmsConnection = {\n  __typename?: \"FilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmsEdge = {\n  __typename?: \"FilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The id of the object. */\n  id: Scalars[\"ID\"];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: \"PageInfo\";\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars[\"String\"]>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PeopleConnection = {\n  __typename?: \"PeopleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PeopleEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PeopleEdge = {\n  __typename?: \"PeopleEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type Person = Node & {\n  __typename?: \"Person\";\n  /**\n   * The birth year of the person, using the in-universe standard of BBY or ABY -\n   * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\n   * a battle that occurs at the end of Star Wars episode IV: A New Hope.\n   */\n  birthYear?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The eye color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have an eye.\n   */\n  eyeColor?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<PersonFilmsConnection>;\n  /**\n   * The gender of this person. Either \"Male\", \"Female\" or \"unknown\",\n   * \"n/a\" if the person does not have a gender.\n   */\n  gender?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The hair color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have hair.\n   */\n  hairColor?: Maybe<Scalars[\"String\"]>;\n  /** The height of the person in centimeters. */\n  height?: Maybe<Scalars[\"Int\"]>;\n  /** A planet that this person was born on or inhabits. */\n  homeworld?: Maybe<Planet>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The mass of the person in kilograms. */\n  mass?: Maybe<Scalars[\"Float\"]>;\n  /** The name of this person. */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The skin color of this person. */\n  skinColor?: Maybe<Scalars[\"String\"]>;\n  /** The species that this person belongs to, or null if unknown. */\n  species?: Maybe<Species>;\n  starshipConnection?: Maybe<PersonStarshipsConnection>;\n  vehicleConnection?: Maybe<PersonVehiclesConnection>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonStarshipConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonVehicleConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PersonFilmsConnection = {\n  __typename?: \"PersonFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PersonFilmsEdge = {\n  __typename?: \"PersonFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type PersonStarshipsConnection = {\n  __typename?: \"PersonStarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonStarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PersonStarshipsEdge = {\n  __typename?: \"PersonStarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A connection to a list of items. */\nexport type PersonVehiclesConnection = {\n  __typename?: \"PersonVehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonVehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonVehiclesEdge = {\n  __typename?: \"PersonVehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type Planet = Node & {\n  __typename?: \"Planet\";\n  /** The climates of this planet. */\n  climates?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The diameter of this planet in kilometers. */\n  diameter?: Maybe<Scalars[\"Int\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<PlanetFilmsConnection>;\n  /**\n   * A number denoting the gravity of this planet, where \"1\" is normal or 1 standard\n   * G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs.\n   */\n  gravity?: Maybe<Scalars[\"String\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The name of this planet. */\n  name?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The number of standard days it takes for this planet to complete a single orbit\n   * of its local star.\n   */\n  orbitalPeriod?: Maybe<Scalars[\"Int\"]>;\n  /** The average population of sentient beings inhabiting this planet. */\n  population?: Maybe<Scalars[\"Float\"]>;\n  residentConnection?: Maybe<PlanetResidentsConnection>;\n  /**\n   * The number of standard hours it takes for this planet to complete a single\n   * rotation on its axis.\n   */\n  rotationPeriod?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The percentage of the planet surface that is naturally occurring water or bodies\n   * of water.\n   */\n  surfaceWater?: Maybe<Scalars[\"Float\"]>;\n  /** The terrains of this planet. */\n  terrains?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetResidentConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetFilmsConnection = {\n  __typename?: \"PlanetFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetFilmsEdge = {\n  __typename?: \"PlanetFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetResidentsConnection = {\n  __typename?: \"PlanetResidentsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetResidentsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  residents?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetResidentsEdge = {\n  __typename?: \"PlanetResidentsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetsConnection = {\n  __typename?: \"PlanetsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetsEdge = {\n  __typename?: \"PlanetsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n};\n\nexport type Root = {\n  __typename?: \"Root\";\n  allFilms?: Maybe<FilmsConnection>;\n  allPeople?: Maybe<PeopleConnection>;\n  allPlanets?: Maybe<PlanetsConnection>;\n  allSpecies?: Maybe<SpeciesConnection>;\n  allStarships?: Maybe<StarshipsConnection>;\n  allVehicles?: Maybe<VehiclesConnection>;\n  film?: Maybe<Film>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n  person?: Maybe<Person>;\n  planet?: Maybe<Planet>;\n  species?: Maybe<Species>;\n  starship?: Maybe<Starship>;\n  vehicle?: Maybe<Vehicle>;\n};\n\nexport type RootAllFilmsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllPeopleArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllPlanetsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllSpeciesArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllStarshipsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllVehiclesArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootFilmArgs = {\n  filmID?: InputMaybe<Scalars[\"ID\"]>;\n  id?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootNodeArgs = {\n  id: Scalars[\"ID\"];\n};\n\nexport type RootPersonArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  personID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootPlanetArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  planetID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootSpeciesArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  speciesID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootStarshipArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  starshipID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootVehicleArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  vehicleID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type Species = Node & {\n  __typename?: \"Species\";\n  /** The average height of this species in centimeters. */\n  averageHeight?: Maybe<Scalars[\"Float\"]>;\n  /** The average lifespan of this species in years, null if unknown. */\n  averageLifespan?: Maybe<Scalars[\"Int\"]>;\n  /** The classification of this species, such as \"mammal\" or \"reptile\". */\n  classification?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The designation of this species, such as \"sentient\". */\n  designation?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /**\n   * Common eye colors for this species, null if this species does not typically\n   * have eyes.\n   */\n  eyeColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  filmConnection?: Maybe<SpeciesFilmsConnection>;\n  /**\n   * Common hair colors for this species, null if this species does not typically\n   * have hair.\n   */\n  hairColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** A planet that this species originates from. */\n  homeworld?: Maybe<Planet>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The language commonly spoken by this species. */\n  language?: Maybe<Scalars[\"String\"]>;\n  /** The name of this species. */\n  name?: Maybe<Scalars[\"String\"]>;\n  personConnection?: Maybe<SpeciesPeopleConnection>;\n  /**\n   * Common skin colors for this species, null if this species does not typically\n   * have skin.\n   */\n  skinColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesPersonConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesConnection = {\n  __typename?: \"SpeciesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesEdge = {\n  __typename?: \"SpeciesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesFilmsConnection = {\n  __typename?: \"SpeciesFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesFilmsEdge = {\n  __typename?: \"SpeciesFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesPeopleConnection = {\n  __typename?: \"SpeciesPeopleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesPeopleEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesPeopleEdge = {\n  __typename?: \"SpeciesPeopleEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type Starship = Node & {\n  __typename?: \"Starship\";\n  /**\n   * The Maximum number of Megalights this starship can travel in a standard hour.\n   * A \"Megalight\" is a standard unit of distance and has never been defined before\n   * within the Star Wars universe. This figure is only really useful for measuring\n   * the difference in speed of starships. We can assume it is similar to AU, the\n   * distance between our Sun (Sol) and Earth.\n   */\n  MGLT?: Maybe<Scalars[\"Int\"]>;\n  /** The maximum number of kilograms that this starship can transport. */\n  cargoCapacity?: Maybe<Scalars[\"Float\"]>;\n  /**\n   * The maximum length of time that this starship can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars[\"String\"]>;\n  /** The cost of this starship new, in galactic credits. */\n  costInCredits?: Maybe<Scalars[\"Float\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The number of personnel needed to run or pilot this starship. */\n  crew?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<StarshipFilmsConnection>;\n  /** The class of this starships hyperdrive. */\n  hyperdriveRating?: Maybe<Scalars[\"Float\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The length of this starship in meters. */\n  length?: Maybe<Scalars[\"Float\"]>;\n  /** The manufacturers of this starship. */\n  manufacturers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /**\n   * The maximum speed of this starship in atmosphere. null if this starship is\n   * incapable of atmosphering flight.\n   */\n  maxAtmospheringSpeed?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The model or official name of this starship. Such as \"T-65 X-wing\" or \"DS-1\n   * Orbital Battle Station\".\n   */\n  model?: Maybe<Scalars[\"String\"]>;\n  /** The name of this starship. The common name, such as \"Death Star\". */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The number of non-essential people this starship can transport. */\n  passengers?: Maybe<Scalars[\"String\"]>;\n  pilotConnection?: Maybe<StarshipPilotsConnection>;\n  /**\n   * The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile\n   * Battlestation\"\n   */\n  starshipClass?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipPilotConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipFilmsConnection = {\n  __typename?: \"StarshipFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipFilmsEdge = {\n  __typename?: \"StarshipFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipPilotsConnection = {\n  __typename?: \"StarshipPilotsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipPilotsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipPilotsEdge = {\n  __typename?: \"StarshipPilotsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipsConnection = {\n  __typename?: \"StarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipsEdge = {\n  __typename?: \"StarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type Vehicle = Node & {\n  __typename?: \"Vehicle\";\n  /** The maximum number of kilograms that this vehicle can transport. */\n  cargoCapacity?: Maybe<Scalars[\"Float\"]>;\n  /**\n   * The maximum length of time that this vehicle can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars[\"String\"]>;\n  /** The cost of this vehicle new, in Galactic Credits. */\n  costInCredits?: Maybe<Scalars[\"Float\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The number of personnel needed to run or pilot this vehicle. */\n  crew?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<VehicleFilmsConnection>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The length of this vehicle in meters. */\n  length?: Maybe<Scalars[\"Float\"]>;\n  /** The manufacturers of this vehicle. */\n  manufacturers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The maximum speed of this vehicle in atmosphere. */\n  maxAtmospheringSpeed?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The model or official name of this vehicle. Such as \"All-Terrain Attack\n   * Transport\".\n   */\n  model?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder\n   * bike\".\n   */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The number of non-essential people this vehicle can transport. */\n  passengers?: Maybe<Scalars[\"String\"]>;\n  pilotConnection?: Maybe<VehiclePilotsConnection>;\n  /** The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\". */\n  vehicleClass?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehicleFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclePilotConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type VehicleFilmsConnection = {\n  __typename?: \"VehicleFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehicleFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type VehicleFilmsEdge = {\n  __typename?: \"VehicleFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclePilotsConnection = {\n  __typename?: \"VehiclePilotsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclePilotsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type VehiclePilotsEdge = {\n  __typename?: \"VehiclePilotsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclesConnection = {\n  __typename?: \"VehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclesEdge = {\n  __typename?: \"VehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\nexport type FilmCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FilmCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  filmConnection?:\n                    | {\n                        __typename?: \"PersonFilmsConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type StarshipCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type StarshipCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  starshipConnection?:\n                    | {\n                        __typename?: \"PersonStarshipsConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type VehicleCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type VehicleCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  vehicleConnection?:\n                    | {\n                        __typename?: \"PersonVehiclesConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetPeopleQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetPeopleQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        edges?:\n          | Array<\n              | {\n                  __typename?: \"PeopleEdge\";\n                  node?:\n                    | {\n                        __typename?: \"Person\";\n                        id: string;\n                        name?: string | null | undefined;\n                        birthYear?: string | null | undefined;\n                        homeworld?:\n                          | {\n                              __typename?: \"Planet\";\n                              name?: string | null | undefined;\n                            }\n                          | null\n                          | undefined;\n                        species?:\n                          | {\n                              __typename?: \"Species\";\n                              name?: string | null | undefined;\n                            }\n                          | null\n                          | undefined;\n                        filmConnection?:\n                          | {\n                              __typename?: \"PersonFilmsConnection\";\n                              edges?:\n                                | Array<\n                                    | {\n                                        __typename?: \"PersonFilmsEdge\";\n                                        node?:\n                                          | {\n                                              __typename?: \"Film\";\n                                              title?: string | null | undefined;\n                                            }\n                                          | null\n                                          | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetCharacterQueryVariables = Exact<{\n  id?: InputMaybe<Scalars[\"ID\"]>;\n}>;\n\nexport type GetCharacterQuery = {\n  __typename?: \"Root\";\n  person?:\n    | {\n        __typename?: \"Person\";\n        name?: string | null | undefined;\n        birthYear?: string | null | undefined;\n        eyeColor?: string | null | undefined;\n        gender?: string | null | undefined;\n        hairColor?: string | null | undefined;\n        height?: number | null | undefined;\n        mass?: number | null | undefined;\n        skinColor?: string | null | undefined;\n        homeworld?:\n          | { __typename?: \"Planet\"; name?: string | null | undefined }\n          | null\n          | undefined;\n        species?:\n          | { __typename?: \"Species\"; name?: string | null | undefined }\n          | null\n          | undefined;\n        filmConnection?:\n          | {\n              __typename?: \"PersonFilmsConnection\";\n              totalCount?: number | null | undefined;\n              films?:\n                | Array<\n                    | {\n                        __typename?: \"Film\";\n                        title?: string | null | undefined;\n                        episodeID?: number | null | undefined;\n                        openingCrawl?: string | null | undefined;\n                        director?: string | null | undefined;\n                        producers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        releaseDate?: string | null | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n        starshipConnection?:\n          | {\n              __typename?: \"PersonStarshipsConnection\";\n              totalCount?: number | null | undefined;\n              starships?:\n                | Array<\n                    | {\n                        __typename?: \"Starship\";\n                        id: string;\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        starshipClass?: string | null | undefined;\n                        costInCredits?: number | null | undefined;\n                        length?: number | null | undefined;\n                        passengers?: string | null | undefined;\n                        crew?: string | null | undefined;\n                        MGLT?: number | null | undefined;\n                        maxAtmospheringSpeed?: number | null | undefined;\n                        hyperdriveRating?: number | null | undefined;\n                        manufacturers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        consumables?: string | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                        pilotConnection?:\n                          | {\n                              __typename?: \"StarshipPilotsConnection\";\n                              pilots?:\n                                | Array<\n                                    | {\n                                        __typename?: \"Person\";\n                                        id: string;\n                                        name?: string | null | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n        vehicleConnection?:\n          | {\n              __typename?: \"PersonVehiclesConnection\";\n              totalCount?: number | null | undefined;\n              vehicles?:\n                | Array<\n                    | {\n                        __typename?: \"Vehicle\";\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        vehicleClass?: string | null | undefined;\n                        manufacturers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        costInCredits?: number | null | undefined;\n                        length?: number | null | undefined;\n                        crew?: string | null | undefined;\n                        passengers?: string | null | undefined;\n                        maxAtmospheringSpeed?: number | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                        consumables?: string | null | undefined;\n                        id: string;\n                        pilotConnection?:\n                          | {\n                              __typename?: \"VehiclePilotsConnection\";\n                              pilots?:\n                                | Array<\n                                    | {\n                                        __typename?: \"Person\";\n                                        id: string;\n                                        name?: string | null | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetSpaceshipsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetSpaceshipsQuery = {\n  __typename?: \"Root\";\n  allStarships?:\n    | {\n        __typename?: \"StarshipsConnection\";\n        edges?:\n          | Array<\n              | {\n                  __typename?: \"StarshipsEdge\";\n                  node?:\n                    | {\n                        __typename?: \"Starship\";\n                        id: string;\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        passengers?: string | null | undefined;\n                        crew?: string | null | undefined;\n                        length?: number | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport const FilmCountDocument = gql`\n  query FilmCount {\n    allPeople {\n      totalCount\n      people {\n        filmConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useFilmCountQuery__\n *\n * To run a query within a React component, call `useFilmCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useFilmCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFilmCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFilmCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<FilmCountQuery, FilmCountQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<FilmCountQuery, FilmCountQueryVariables>(\n    FilmCountDocument,\n    options\n  );\n}\nexport function useFilmCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    FilmCountQuery,\n    FilmCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<FilmCountQuery, FilmCountQueryVariables>(\n    FilmCountDocument,\n    options\n  );\n}\nexport type FilmCountQueryHookResult = ReturnType<typeof useFilmCountQuery>;\nexport type FilmCountLazyQueryHookResult = ReturnType<\n  typeof useFilmCountLazyQuery\n>;\nexport type FilmCountQueryResult = Apollo.QueryResult<\n  FilmCountQuery,\n  FilmCountQueryVariables\n>;\nexport const StarshipCountDocument = gql`\n  query StarshipCount {\n    allPeople {\n      totalCount\n      people {\n        starshipConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useStarshipCountQuery__\n *\n * To run a query within a React component, call `useStarshipCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useStarshipCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStarshipCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStarshipCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    StarshipCountQuery,\n    StarshipCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<StarshipCountQuery, StarshipCountQueryVariables>(\n    StarshipCountDocument,\n    options\n  );\n}\nexport function useStarshipCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    StarshipCountQuery,\n    StarshipCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<StarshipCountQuery, StarshipCountQueryVariables>(\n    StarshipCountDocument,\n    options\n  );\n}\nexport type StarshipCountQueryHookResult = ReturnType<\n  typeof useStarshipCountQuery\n>;\nexport type StarshipCountLazyQueryHookResult = ReturnType<\n  typeof useStarshipCountLazyQuery\n>;\nexport type StarshipCountQueryResult = Apollo.QueryResult<\n  StarshipCountQuery,\n  StarshipCountQueryVariables\n>;\nexport const VehicleCountDocument = gql`\n  query VehicleCount {\n    allPeople {\n      totalCount\n      people {\n        vehicleConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useVehicleCountQuery__\n *\n * To run a query within a React component, call `useVehicleCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useVehicleCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useVehicleCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useVehicleCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    VehicleCountQuery,\n    VehicleCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<VehicleCountQuery, VehicleCountQueryVariables>(\n    VehicleCountDocument,\n    options\n  );\n}\nexport function useVehicleCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    VehicleCountQuery,\n    VehicleCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<VehicleCountQuery, VehicleCountQueryVariables>(\n    VehicleCountDocument,\n    options\n  );\n}\nexport type VehicleCountQueryHookResult = ReturnType<\n  typeof useVehicleCountQuery\n>;\nexport type VehicleCountLazyQueryHookResult = ReturnType<\n  typeof useVehicleCountLazyQuery\n>;\nexport type VehicleCountQueryResult = Apollo.QueryResult<\n  VehicleCountQuery,\n  VehicleCountQueryVariables\n>;\nexport const GetPeopleDocument = gql`\n  query GetPeople {\n    allPeople {\n      edges {\n        node {\n          id\n          name\n          birthYear\n          homeworld {\n            name\n          }\n          species {\n            name\n          }\n          filmConnection {\n            edges {\n              node {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetPeopleQuery__\n *\n * To run a query within a React component, call `useGetPeopleQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPeopleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPeopleQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPeopleQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetPeopleQuery, GetPeopleQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetPeopleQuery, GetPeopleQueryVariables>(\n    GetPeopleDocument,\n    options\n  );\n}\nexport function useGetPeopleLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetPeopleQuery,\n    GetPeopleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetPeopleQuery, GetPeopleQueryVariables>(\n    GetPeopleDocument,\n    options\n  );\n}\nexport type GetPeopleQueryHookResult = ReturnType<typeof useGetPeopleQuery>;\nexport type GetPeopleLazyQueryHookResult = ReturnType<\n  typeof useGetPeopleLazyQuery\n>;\nexport type GetPeopleQueryResult = Apollo.QueryResult<\n  GetPeopleQuery,\n  GetPeopleQueryVariables\n>;\nexport const GetCharacterDocument = gql`\n  query GetCharacter($id: ID) {\n    person(id: $id) {\n      name\n      birthYear\n      eyeColor\n      gender\n      hairColor\n      height\n      mass\n      skinColor\n      homeworld {\n        name\n      }\n      species {\n        name\n      }\n      filmConnection {\n        totalCount\n        films {\n          title\n          episodeID\n          openingCrawl\n          director\n          producers\n          releaseDate\n        }\n      }\n      starshipConnection {\n        totalCount\n        starships {\n          id\n          name\n          model\n          starshipClass\n          costInCredits\n          length\n          passengers\n          crew\n          MGLT\n          maxAtmospheringSpeed\n          hyperdriveRating\n          manufacturers\n          consumables\n          cargoCapacity\n          pilotConnection {\n            pilots {\n              id\n              name\n            }\n          }\n        }\n      }\n      vehicleConnection {\n        totalCount\n        vehicles {\n          name\n          model\n          vehicleClass\n          manufacturers\n          costInCredits\n          length\n          crew\n          passengers\n          maxAtmospheringSpeed\n          cargoCapacity\n          consumables\n          pilotConnection {\n            pilots {\n              id\n              name\n            }\n          }\n          id\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetCharacterQuery__\n *\n * To run a query within a React component, call `useGetCharacterQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharacterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharacterQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCharacterQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    options\n  );\n}\nexport function useGetCharacterLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    options\n  );\n}\nexport type GetCharacterQueryHookResult = ReturnType<\n  typeof useGetCharacterQuery\n>;\nexport type GetCharacterLazyQueryHookResult = ReturnType<\n  typeof useGetCharacterLazyQuery\n>;\nexport type GetCharacterQueryResult = Apollo.QueryResult<\n  GetCharacterQuery,\n  GetCharacterQueryVariables\n>;\nexport const GetSpaceshipsDocument = gql`\n  query GetSpaceships {\n    allStarships {\n      edges {\n        node {\n          id\n          name\n          model\n          passengers\n          crew\n          length\n          cargoCapacity\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetSpaceshipsQuery__\n *\n * To run a query within a React component, call `useGetSpaceshipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSpaceshipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSpaceshipsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSpaceshipsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetSpaceshipsQuery,\n    GetSpaceshipsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetSpaceshipsQuery, GetSpaceshipsQueryVariables>(\n    GetSpaceshipsDocument,\n    options\n  );\n}\nexport function useGetSpaceshipsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetSpaceshipsQuery,\n    GetSpaceshipsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetSpaceshipsQuery, GetSpaceshipsQueryVariables>(\n    GetSpaceshipsDocument,\n    options\n  );\n}\nexport type GetSpaceshipsQueryHookResult = ReturnType<\n  typeof useGetSpaceshipsQuery\n>;\nexport type GetSpaceshipsLazyQueryHookResult = ReturnType<\n  typeof useGetSpaceshipsLazyQuery\n>;\nexport type GetSpaceshipsQueryResult = Apollo.QueryResult<\n  GetSpaceshipsQuery,\n  GetSpaceshipsQueryVariables\n>;\n","import {\n  AssetInventoryMetadata,\n  AssetInventoryConfiguration,\n} from \"@hitachivantara/uikit-react-core\";\n\nconst metadata: AssetInventoryMetadata[] = [\n  {\n    id: \"id1\",\n    accessor: \"name\",\n    cellType: \"alpha-numeric\",\n    searchable: true,\n    sortable: true,\n    sortableLabelAsc: \"Name ascending\",\n    sortableLabelDesc: \"Name descending\",\n  },\n  {\n    id: \"id2\",\n    accessor: \"birthYear\",\n    cellType: \"alpha-numeric\",\n    sortable: true,\n    sortableLabelAsc: \"Birthday ascending\",\n    sortableLabelDesc: \"Birthday descending\",\n  },\n];\n\nconst viewConfiguration: AssetInventoryConfiguration = {\n  breakpoints: { xs: 12, sm: 6, md: 4, lg: 3, xl: 3 },\n  columnConfiguration: [\n    { style: { width: 1, textAlign: \"center\" } },\n    {\n      title: \"Event\",\n      style: { minWidth: \"360px\", textAlign: \"start\" },\n    },\n    {\n      title: \"Probability\",\n      style: { minWidth: \"80px\", textAlign: \"end\" },\n    },\n    {\n      title: \"Time horizon\",\n      style: { minWidth: \"100px\", textAlign: \"end\" },\n    },\n    {\n      title: \"Related Assets\",\n      style: {\n        minWidth: \"195px\",\n        paddingLeft: \"30px\",\n        textAlign: \"start\",\n      },\n    },\n  ],\n};\n\nconst configuration = {\n  metadata,\n  viewConfiguration,\n};\n\nconst actions = [{ id: \"view\", label: \"View\", disabled: false }];\n\nexport { configuration, actions };\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    cursor: \"pointer\",\n    \"& .HvCard-semanticBar\": {\n      backgroundColor: \"#facd2d\",\n    },\n  },\n  item: {\n    paddingBottom: theme.hv.spacing.sm,\n  },\n  kpis: {\n    display: \"flex\",\n  },\n  timestamp: {\n    paddingRight: theme.hv.spacing.xs,\n    borderRight: `solid 1px ${theme.hv.palette.accent.acce1}`,\n    marginRight: theme.hv.spacing.xs,\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Person } from \"generated/graphql\";\n\nimport {\n  HvGrid,\n  HvTypography,\n  HvCard,\n  HvCardHeader,\n  HvCardContent,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport useStyles from \"./styles\";\n\nconst Card: React.FC<Person> = ({\n  id,\n  name,\n  birthYear,\n  species,\n  homeworld,\n  filmConnection,\n}) => {\n  const { t } = useTranslation(\"characters\");\n  const history = useHistory();\n  const classes = useStyles();\n\n  const labels = {\n    homeworld: t(\"list.cardView.homeworld\"),\n    films: t(\"list.cardView.films\"),\n  };\n\n  let movies = \"\";\n  filmConnection?.edges?.forEach((edge, index) => {\n    movies = `${movies}${index > 0 ? \", \" : \"\"}${edge?.node?.title}`;\n  });\n\n  return (\n    <HvCard\n      key={id}\n      bgcolor=\"atmo1\"\n      selectable={false}\n      className={classes.card}\n      onClick={() => history.push(`/star-wars/characters/${id}`)}\n    >\n      <HvCardHeader title={name || \"\"} />\n      <HvCardContent>\n        <HvGrid container>\n          <HvGrid item xs={12} sm={12} md={12}>\n            <div className={classes.kpis}>\n              <HvTypography className={classes.timestamp}>\n                {birthYear === \"unknown\" ? \"N/A\" : birthYear}\n              </HvTypography>\n              <HvTypography>{species?.name || \"N/A\"}</HvTypography>\n            </div>\n          </HvGrid>\n\n          <HvGrid item xs={5} sm={6} md={12}>\n            <HvTypography variant=\"highlightText\">\n              {labels.homeworld}\n            </HvTypography>\n            <HvTypography noWrap>{homeworld?.name}</HvTypography>\n          </HvGrid>\n\n          <HvGrid item xs={7} sm={6} md={12} className={classes.item}>\n            <HvTypography variant=\"highlightText\">{labels.films}</HvTypography>\n            <HvTypography noWrap>{movies}</HvTypography>\n          </HvGrid>\n        </HvGrid>\n      </HvCardContent>\n    </HvCard>\n  );\n};\n\nconst cardRenderer = (data: object) => {\n  const person: Person = data as Record<string, unknown> as Person;\n\n  return <Card {...person} />;\n};\n\nexport default cardRenderer;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Cards, Fail, List } from \"@hitachivantara/uikit-react-icons\";\nimport {\n  HvAssetInventory,\n  HvCardView,\n  HvEmptyState,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport { useGetPeopleQuery, Person } from \"generated/graphql\";\nimport { actions, configuration } from \"./utils\";\nimport cardRenderer from \"./cardRenderer\";\n\nconst CharactersList = () => {\n  const { t } = useTranslation(\"characters\");\n  const { data } = useGetPeopleQuery();\n\n  const labels = {\n    search: t(\"list.searchLabel\"),\n    cardView: t(\"list.cardView.label\"),\n    listView: t(\"list.listViewLabel\"),\n    noMessage: t(\"list.noMessageLabel\"),\n  };\n\n  const people: Person[] | undefined = data?.allPeople?.edges?.map(\n    (edge) =>\n      ({\n        ...edge?.node,\n      } as Person)\n  );\n\n  return data ? (\n    <HvAssetInventory\n      id=\"hv-assetinventory\"\n      values={people as { id: string }[]}\n      configuration={configuration}\n      actions={actions}\n      actionsCallback={(e, id, action) =>\n        // eslint-disable-next-line no-console\n        console.log(`You have pressed action ${action.label}`)\n      }\n      searchProps={{ \"aria-label\": labels.search }}\n      multibuttonProps={[\n        {\n          id: \"card-button\",\n          icon: <Cards />,\n          \"aria-label\": labels.cardView,\n        },\n        { id: \"list-button\", icon: <List />, \"aria-label\": labels.listView },\n      ]}\n      emptyComponent={\n        <HvEmptyState\n          message={t(\"list.noMessageLabel\")}\n          icon={<Fail iconSize=\"S\" color=\"acce1\" />}\n        />\n      }\n    >\n      <HvCardView id=\"card\" renderer={cardRenderer} />\n    </HvAssetInventory>\n  ) : null;\n};\n\nexport default CharactersList;\n","import React from \"react\";\n\nimport CharactersList from \"components/characters/CharactersList\";\nimport { Container } from \"components/layout\";\n\nconst Characters: React.FC = () => {\n  return (\n    <Container>\n      <CharactersList />\n    </Container>\n  );\n};\n\nexport default Characters;\n"],"names":["defaultOptions","FilmCountDocument","gql","useFilmCountQuery","baseOptions","options","Apollo","StarshipCountDocument","useStarshipCountQuery","VehicleCountDocument","useVehicleCountQuery","GetPeopleDocument","useGetPeopleQuery","GetCharacterDocument","useGetCharacterQuery","configuration","metadata","id","accessor","cellType","searchable","sortable","sortableLabelAsc","sortableLabelDesc","viewConfiguration","breakpoints","xs","sm","md","lg","xl","columnConfiguration","style","width","textAlign","title","minWidth","paddingLeft","actions","label","disabled","makeStyles","theme","card","cursor","backgroundColor","item","paddingBottom","hv","spacing","kpis","display","timestamp","paddingRight","borderRight","palette","accent","acce1","marginRight","Card","name","birthYear","species","homeworld","filmConnection","t","useTranslation","history","useHistory","classes","useStyles","labels","films","movies","edges","forEach","edge","index","node","bgcolor","selectable","className","onClick","push","container","variant","noWrap","data","person","search","cardView","listView","noMessage","people","allPeople","map","values","actionsCallback","e","action","console","log","searchProps","multibuttonProps","icon","Cards","List","emptyComponent","message","Fail","iconSize","color","renderer","cardRenderer"],"sourceRoot":""}