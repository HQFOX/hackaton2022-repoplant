{"version":3,"file":"static/js/263.1371b26b.chunk.js","mappings":"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","sources":["../node_modules/@hitachivantara/uikit-react-core/src/Accordion/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/Accordion/Accordion.js","../node_modules/@hitachivantara/uikit-react-core/src/GlobalActions/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/GlobalActions/GlobalActions.js","../node_modules/@hitachivantara/uikit-react-icons/bin/Bottom.js","../node_modules/@hitachivantara/uikit-react-icons/bin/Top.js"],"sourcesContent":["import { outlineStyles } from \"../Focus/styles\";\n\nconst hover = (theme) => ({\n  background: theme.hv.palette.atmosphere.atmo3,\n});\n\nconst styles = (theme) => ({\n  root: {\n    \"& + $root\": {\n      paddingTop: 8,\n    },\n  },\n  nav: {},\n  container: {\n    paddingTop: 8,\n    height: \"auto\",\n  },\n  hidden: {\n    height: 0,\n    display: \"none\",\n  },\n  label: {\n    width: \"100%\",\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n    height: \"32px\",\n\n    // hover\n    \":not($disabled)&:hover\": hover(theme),\n\n    // focus\n    \":not($disabled)&:focus\": hover(theme),\n\n    \"&[disabled], &:active\": {\n      outline: \"none\",\n    },\n\n    \"&:focus\": {\n      outline: \"none\",\n    },\n\n    \"&.focus-visible\": {\n      ...outlineStyles,\n    },\n\n    // cursor\n    cursor: \"pointer\",\n    \"&$disabled\": {\n      cursor: \"not-allowed\",\n      color: theme.hv.palette.atmosphere.atmo5,\n    },\n  },\n  disabled: {},\n});\n\nexport default styles;\n","import React, { useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core\";\nimport { DropDownXS, DropUpXS } from \"@hitachivantara/uikit-react-icons\";\nimport styles from \"./styles\";\nimport { setId, useControlled } from \"../utils\";\nimport { HvTypography } from \"..\";\n\n/**\n * A accordion is a design element that expands in place to expose hidden information.\n */\nconst HvAccordion = ({\n  id,\n  className,\n  classes,\n  disabled = false,\n  label,\n  labelProps,\n  onChange = null,\n  children,\n  expanded,\n  headingLevel,\n  defaultExpanded = false,\n  containerProps,\n  ...others\n}) => {\n  const [isOpen, setIsOpen] = useControlled(expanded, Boolean(defaultExpanded));\n\n  const handleAction = useCallback(\n    (event) => {\n      if (!disabled) {\n        onChange?.(event, isOpen);\n        setIsOpen(!isOpen);\n        return true;\n      }\n      return false;\n    },\n    [disabled, onChange, isOpen, setIsOpen]\n  );\n\n  const handleClick = useCallback(\n    (event) => {\n      handleAction(event);\n      event.preventDefault();\n      event.stopPropagation();\n    },\n    [handleAction]\n  );\n\n  const handleKeyDown = useCallback(\n    (event) => {\n      let isEventHandled = false;\n      const { key } = event;\n\n      if (event.altKey || event.ctrlKey || event.metaKey || event.currentTarget !== event.target) {\n        return;\n      }\n      switch (key) {\n        case \"Enter\":\n        case \" \":\n          isEventHandled = handleAction(event);\n          break;\n        default:\n          return;\n      }\n\n      if (isEventHandled) {\n        event.preventDefault();\n        event.stopPropagation();\n      }\n    },\n    [handleAction]\n  );\n\n  const accordionHeaderId = setId(id, \"button\");\n  const accordionContainer = setId(id, \"container\");\n  const accordionHeader = useMemo(() => {\n    const color = (disabled && [\"atmo5\"]) || undefined;\n    const variantToApply =\n      headingLevel === 1 || headingLevel === 2 ? \"sectionTitle\" : \"highlightText\";\n    const accordionButton = (\n      <HvTypography\n        id={accordionHeaderId}\n        component=\"div\"\n        role=\"button\"\n        className={clsx(classes.label, {\n          [classes.disabled]: disabled,\n        })}\n        tabIndex={0}\n        onKeyDown={handleKeyDown}\n        onClick={handleClick}\n        variant={variantToApply}\n        aria-expanded={isOpen}\n        aria-disabled={disabled}\n        {...labelProps}\n      >\n        {isOpen ? <DropUpXS color={color} /> : <DropDownXS color={color} />}\n        {label}\n      </HvTypography>\n    );\n    const result =\n      headingLevel === undefined ? (\n        accordionButton\n      ) : (\n        <HvTypography component={`h${headingLevel}`}>{accordionButton}</HvTypography>\n      );\n    return result;\n  }, [\n    classes,\n    handleClick,\n    handleKeyDown,\n    label,\n    labelProps,\n    accordionHeaderId,\n    disabled,\n    headingLevel,\n    isOpen,\n  ]);\n\n  return (\n    <div id={id} className={clsx(className, classes.root)} {...others}>\n      {accordionHeader}\n      <div\n        id={accordionContainer}\n        role=\"region\"\n        aria-labelledby={accordionHeaderId}\n        className={clsx(classes.container, { [classes.hidden]: !isOpen })}\n        {...containerProps}\n      >\n        {children}\n      </div>\n    </div>\n  );\n};\n\nHvAccordion.propTypes = {\n  /**\n   * Id to be applied to the root node of the accordion.\n   */\n  id: PropTypes.string,\n  /**\n   * Class names to be applied to the accordion.\n   */\n  className: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Styles applied to the component root of the accordion.\n     */\n    root: PropTypes.string,\n    /**\n     * Styles applied to the content when it is hidden.\n     */\n    hidden: PropTypes.string,\n    /**\n     * Styles applied to the content when it is hidden.\n     */\n    container: PropTypes.string,\n    /**\n     * Styles applied to the label button.\n     */\n    label: PropTypes.string,\n    /**\n     * Styles applied to the label button when it is disabled.\n     */\n    disabled: PropTypes.string,\n  }).isRequired,\n  /**\n   * The accordion label button.\n   */\n  label: PropTypes.node.isRequired,\n  /**\n   * An object containing props to be passed onto the accordion label button.\n   */\n  labelProps: PropTypes.instanceOf(Object),\n  /**\n   * The function that will be executed whenever the accordion toggles it will receive the state of the accordion\n   */\n  onChange: PropTypes.func,\n  /**\n   * Whether the accordion is open or not, if this property is defined the accordion must be fully controlled.\n   */\n  expanded: PropTypes.bool,\n  /**\n   * When uncontrolled, defines the initial expanded state.\n   */\n  defaultExpanded: PropTypes.bool,\n  /**\n   * An object containing props to be passed onto container holding the accordion children.\n   */\n  containerProps: PropTypes.instanceOf(Object),\n  /**\n   * Heading Level to apply to accordion button if ´undefined´ the button won't have a header wrapper.\n   */\n  headingLevel: PropTypes.oneOf([1, 2, 3, 4, 5, 6]),\n  /**\n   * Is the accordion disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * The content of the accordion.\n   */\n  children: PropTypes.node,\n};\n\nexport default withStyles(styles, { name: \"HvAccordion\" })(HvAccordion);\n","const styles = (theme) => ({\n  root: {\n    position: \"relative\",\n  },\n  positionSticky: {\n    width: \"100%\",\n    position: \"sticky\",\n  },\n  positionFixed: {\n    width: \"100%\",\n    position: \"fixed\",\n\n    [theme.breakpoints.up(\"md\")]: {\n      width: `calc(100% - 2*${theme.spacing(4)}px)`,\n      marginLeft: `${theme.spacing(4)}px`,\n      marginRight: `${theme.spacing(4)}px`,\n    },\n    [theme.breakpoints.down(\"sm\")]: {\n      width: `calc(100% - 2*${theme.spacing(2)}px)`,\n      marginLeft: `${theme.spacing(2)}px`,\n      marginRight: `${theme.spacing(2)}px`,\n    },\n  },\n  global: {\n    zIndex: theme.zIndex.appBar - 2,\n\n    top: 0,\n    left: 0,\n\n    \"&:before\": {\n      content: \"''\",\n      display: \"flex\",\n      width: \"100%\",\n      height: 72,\n      top: 0,\n      background: theme.palette.atmo2,\n      opacity: \"75%\",\n    },\n    backdropFilter: \"blur(1px)\",\n  },\n  wrapper: {\n    height: 52,\n    paddingRight: theme.hv.spacing.xs,\n    display: \"flex\",\n    justifyContent: \"flex-start\",\n    alignItems: \"center\",\n  },\n  globalWrapperComplement: {\n    position: \"absolute\",\n    top: 0,\n    left: 0,\n    background: theme.hv.palette.atmosphere.atmo1,\n    width: \"100%\",\n    padding: theme.hv.spacing.xs,\n    marginTop: theme.hv.spacing.xs,\n  },\n  content: {\n    width: \"100%\",\n    padding: theme.hv.spacing.xs,\n    display: \"flex\",\n    position: \"relative\",\n    alignItems: \"center\",\n    paddingTop: 17,\n    paddingBottom: 17,\n  },\n  globalSectionArea: {\n    background: \"none\",\n    borderTop: `1px solid ${theme.hv.palette.atmosphere.atmo4}`,\n  },\n  backButton: {\n    marginRight: theme.hv.spacing.xs,\n  },\n  name: {\n    flexGrow: 1,\n  },\n  actions: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justifyContent: \"flex-end\",\n    marginLeft: \"auto\",\n    \"& > *:not(:first-child) \": {\n      marginLeft: theme.hv.spacing.xs,\n    },\n  },\n});\n\nexport default styles;\n","import React, { useCallback } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport deprecatedPropType from \"@material-ui/core/utils/deprecatedPropType\";\n\nimport { Backwards } from \"@hitachivantara/uikit-react-icons\";\nimport { withStyles } from \"@material-ui/core\";\nimport isString from \"lodash/isString\";\n\nimport HvButton from \"../Button\";\nimport HvTypography from \"../Typography\";\n\nimport styles from \"./styles\";\n\n/**\n * Global Actions are actions that affect the entire page they live in.\n * They should persist while scrolling down the screen.\n */\nconst HvGlobalActions = (props) => {\n  const {\n    className,\n    classes,\n    title,\n    children,\n    variant = \"global\",\n    backButton,\n    backButtonAction,\n    backButtonAriaLabel = \"Back\",\n    backwardsIcon,\n    headingLevel,\n    position: positionProp,\n    ...others\n  } = props;\n\n  const BackButtonComp = useCallback(\n    () => (\n      <HvButton aria-label={backButtonAriaLabel} icon onClick={backButtonAction}>\n        {backwardsIcon || <Backwards />}\n      </HvButton>\n    ),\n    [backButtonAction, backButtonAriaLabel, backwardsIcon]\n  );\n\n  const headingLevelToApply = headingLevel || (variant === \"global\" ? 1 : 2);\n\n  const backButtonRenderer = () => {\n    let bkButton;\n\n    if (typeof backButton === \"object\") {\n      bkButton = <div className={classes.backButton}>{backButton}</div>;\n    } else if (backButton !== false) {\n      bkButton = (\n        <div className={classes.backButton}>\n          <BackButtonComp />\n        </div>\n      );\n    }\n\n    return bkButton;\n  };\n\n  const position = positionProp || (variant === \"global\" ? \"sticky\" : \"relative\");\n\n  return (\n    <div\n      className={clsx(className, classes.root, {\n        [classes.positionSticky]: position === \"sticky\",\n        [classes.positionFixed]: position === \"fixed\",\n        [classes.global]: variant === \"global\",\n      })}\n      {...others}\n    >\n      <div\n        className={clsx(classes.wrapper, {\n          [classes.globalWrapperComplement]: variant === \"global\",\n          [classes.globalSectionArea]: variant === \"section\",\n        })}\n      >\n        {variant === \"global\" && backButtonRenderer()}\n        {!isString(title) ? (\n          title\n        ) : (\n          <HvTypography\n            variant={variant === \"global\" ? \"xsTitle\" : \"sectionTitle\"}\n            component={`h${headingLevelToApply}`}\n            className={classes.name}\n          >\n            {title}\n          </HvTypography>\n        )}\n        {children && <div className={classes.actions}>{children}</div>}\n      </div>\n    </div>\n  );\n};\n\nHvGlobalActions.propTypes = {\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Styles applied to the component root class.\n     */\n    root: PropTypes.string,\n    /**\n\n     * Styles applied to the component root class if component is sticky.\n     */\n    positionSticky: PropTypes.string,\n    /**\n     * Styles applied to the component root class if component is fixed.\n     */\n    positionFixed: PropTypes.string,\n    /**\n     * Styles applied to the component root when `variant=\"global\"`.\n     */\n    global: PropTypes.string,\n    /**\n     * Styles applied to the component wrapper class.\n     */\n    wrapper: PropTypes.string,\n    /**\n     * Styles applied to the component wrapper class, to differentiate from a section area.\n     */\n    globalWrapperComplement: PropTypes.string,\n    /**\n     * Styles applied to the components globalSectionArea class.\n     */\n    globalSectionArea: PropTypes.string,\n    /**\n     * Styles applied to the component backButton class.\n     */\n    backButton: PropTypes.string,\n    /**\n     * Styles applied to the naming section.\n     */\n    name: PropTypes.string,\n    /**\n     * Styles applied to the actions container.\n     */\n    actions: PropTypes.string,\n  }).isRequired,\n  /**\n   * Action Buttons passed into the Component.\n   */\n  children: PropTypes.node,\n  /**\n   * Denotes if this is a global or section component.\n   */\n  variant: PropTypes.string,\n  /**\n   * Text to display in the component.\n   */\n  title: PropTypes.node,\n  /**\n   * User can pass in a fully customized button or false for when the back button should not be rendered.\n   */\n  backButton: PropTypes.oneOfType([PropTypes.node, PropTypes.bool]),\n  /**\n   * Action to be executed by the Back button in the Global Actions.\n   */\n  backButtonAction: deprecatedPropType(\n    PropTypes.func,\n    \"Instead use the backButon property to pass in the button for the back action\"\n  ),\n  /**\n   * Aria label to be applied to the back navigation button.\n   */\n  backButtonAriaLabel: deprecatedPropType(\n    PropTypes.string,\n    \"Instead use the backButon property to pass in the button for the back action\"\n  ),\n  /**\n   * Custom item to be applied to Backwards button.\n   */\n  backwardsIcon: deprecatedPropType(\n    PropTypes.node,\n    \"Instead use the backButon property to pass in the button for the back action\"\n  ),\n\n  /**\n   * Heading Level to apply to Title Area.\n   */\n  headingLevel: PropTypes.oneOf([1, 2, 3, 4, 5, 6]),\n  /**\n   * Position of the Global Actions.\n   * Defaults to `sticky` when it is a global title and `relative` when it's a section title.\n   */\n  position: PropTypes.oneOf([\"sticky\", \"fixed\", \"relative\"]),\n};\n\nexport default withStyles(styles, { name: \"HvGlobalActions\" })(HvGlobalActions);\n","\nimport React from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport HvIconBase from \"./IconBase\";\n\nconst sizeSelector = (iconSize, height, width) => {\n  if (height && width) {\n    return { width, height };\n  }\n\n  switch (iconSize) {\n    case \"XS\":\n      return { width: 12, height: 12 };\n    default:\n    case \"S\":\n      return { width: 16, height: 16 };\n    case \"M\":\n      return { width: 32, height: 32 };\n    case \"L\":\n      return { width: 96, height: 96 };\n  }\n};\n\nconst Bottom = ({\n  color,\n  iconSize = \"S\",\n  viewbox = \"0 0 16 16\",\n  height,\n  width,\n  semantic,\n  inverted = false,\n  svgProps,\n  ...others\n}) => {\n  const theme = useTheme();\n  const getColor = c => theme.palette?.[c] || c;\n  const colorArray = \n    (typeof color === \"string\" && [getColor(color)]) ||\n    (Array.isArray(color) && color.map?.(getColor)) ||\n    [theme.palette.acce1];\n\n  if (semantic) {\n    colorArray[0] = theme.palette?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  const size = sizeSelector(iconSize, height, width);\n\n  return (\n    <HvIconBase name=\"Bottom\" iconSize={iconSize ?? \"S\"} {...others}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox} height={size.height} width={size.width}   focusable={false} {...svgProps}>\n  <path fill={colorArray[0]} className=\"color0\"  d=\"M8 15.85L.3 8.25l.7-.8 6.5 6.5V.15h1v13.79989l6.5-6.5.7.80005z\" />\n</svg>\n    </HvIconBase>\n)};\n\nBottom.propTypes = HvIconBase.propTypes;\n\nexport default Bottom;","\nimport React from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport HvIconBase from \"./IconBase\";\n\nconst sizeSelector = (iconSize, height, width) => {\n  if (height && width) {\n    return { width, height };\n  }\n\n  switch (iconSize) {\n    case \"XS\":\n      return { width: 12, height: 12 };\n    default:\n    case \"S\":\n      return { width: 16, height: 16 };\n    case \"M\":\n      return { width: 32, height: 32 };\n    case \"L\":\n      return { width: 96, height: 96 };\n  }\n};\n\nconst Top = ({\n  color,\n  iconSize = \"S\",\n  viewbox = \"0 0 16 16\",\n  height,\n  width,\n  semantic,\n  inverted = false,\n  svgProps,\n  ...others\n}) => {\n  const theme = useTheme();\n  const getColor = c => theme.palette?.[c] || c;\n  const colorArray = \n    (typeof color === \"string\" && [getColor(color)]) ||\n    (Array.isArray(color) && color.map?.(getColor)) ||\n    [theme.palette.acce1];\n\n  if (semantic) {\n    colorArray[0] = theme.palette?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  const size = sizeSelector(iconSize, height, width);\n\n  return (\n    <HvIconBase name=\"Top\" iconSize={iconSize ?? \"S\"} {...others}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox} height={size.height} width={size.width}   focusable={false} {...svgProps}>\n  <path fill={colorArray[0]} className=\"color0\"  d=\"M15 8.54993l-6.5-6.5V15.85h-1V2.05005l-6.5 6.5L.3 7.75 8 .15l7.7 7.6z\" />\n</svg>\n    </HvIconBase>\n)};\n\nTop.propTypes = HvIconBase.propTypes;\n\nexport default Top;"],"names":["hover","theme","background","atmo3","root","paddingTop","nav","container","height","hidden","display","label","width","justifyContent","alignItems","outline","cursor","color","atmo5","disabled","withStyles","name","onChange","defaultExpanded","containerProps","others","useControlled","expanded","Boolean","handleAction","useCallback","event","setIsOpen","isOpen","handleClick","handleKeyDown","isEventHandled","key","accordionHeaderId","setId","id","accordionContainer","accordionHeader","useMemo","variantToApply","headingLevel","accordionButton","component","role","className","clsx","classes","tabIndex","onKeyDown","onClick","variant","position","positionSticky","positionFixed","marginLeft","marginRight","global","zIndex","top","left","content","opacity","backdropFilter","wrapper","paddingRight","globalWrapperComplement","padding","marginTop","xs","paddingBottom","globalSectionArea","borderTop","atmo4","backButton","flexGrow","actions","props","backButtonAriaLabel","positionProp","BackButtonComp","icon","backButtonAction","backwardsIcon","headingLevelToApply","bkButton","backButtonRenderer","isString","children","iconSize","viewbox","inverted","svgProps","useTheme","getColor","c","colorArray","Array","size","sizeSelector","xmlns","viewBox","focusable","fill","d"],"sourceRoot":""}