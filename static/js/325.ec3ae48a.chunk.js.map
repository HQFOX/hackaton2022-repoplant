{"version":3,"file":"static/js/325.ec3ae48a.chunk.js","mappings":"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","sources":["../node_modules/@material-ui/core/esm/CardContent/CardContent.js","../node_modules/@hitachivantara/uikit-react-core/src/Card/Content/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/Card/Content/Content.js","../node_modules/@material-ui/core/esm/DialogTitle/DialogTitle.js","../node_modules/@hitachivantara/uikit-react-icons/bin/Caution.js","../node_modules/@hitachivantara/uikit-react-core/src/utils/iconVariant.js","../node_modules/@hitachivantara/uikit-react-core/src/Dialog/DialogTitle/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/Dialog/DialogTitle/DialogTitle.js","../node_modules/@hitachivantara/uikit-react-core/src/Forms/CharCounter/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/Forms/CharCounter/CharCounter.js","../node_modules/@hitachivantara/uikit-react-core/src/TextArea/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/TextArea/TextArea.js"],"sourcesContent":["import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    padding: 16,\n    '&:last-child': {\n      paddingBottom: 24\n    }\n  }\n};\nvar CardContent = /*#__PURE__*/React.forwardRef(function CardContent(props, ref) {\n  var classes = props.classes,\n      className = props.className,\n      _props$component = props.component,\n      Component = _props$component === void 0 ? 'div' : _props$component,\n      other = _objectWithoutProperties(props, [\"classes\", \"className\", \"component\"]);\n\n  return /*#__PURE__*/React.createElement(Component, _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other));\n});\nprocess.env.NODE_ENV !== \"production\" ? CardContent.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * The component used for the root node.\n   * Either a string to use a HTML element or a component.\n   */\n  component: PropTypes\n  /* @typescript-to-proptypes-ignore */\n  .elementType\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiCardContent'\n})(CardContent);","const styles = (theme) => ({\n  content: {\n    padding: theme.hvSpacing(0, \"sm\", \"15px\", \"sm\"),\n    \"&:last-child\": {\n      paddingBottom: theme.hv.spacing.sm, // Overrides MUI padding\n    },\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { CardContent, withStyles } from \"@material-ui/core\";\nimport styles from \"./styles\";\n\n/**\n * The content container for the card.\n */\nexport const Content = (props) => {\n  const { id, classes, className, children, onClick, ...others } = props;\n  return (\n    <CardContent id={id} className={clsx(classes.content, className)} onClick={onClick} {...others}>\n      {children}\n    </CardContent>\n  );\n};\n\nContent.propTypes = {\n  /**\n   * Id to be applied to the root node.\n   */\n  id: PropTypes.string,\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Style applied to the root component.\n     */\n    content: PropTypes.string,\n  }).isRequired,\n  /**\n   *  The renderable content inside the body of the card.\n   */\n  children: PropTypes.node,\n  /**\n   *  The function that will be executed when this section is clicked.\n   */\n  onClick: PropTypes.func,\n};\n\nexport default withStyles(styles, { name: \"HvCardContent\" })(Content);\n","import _extends from \"@babel/runtime/helpers/esm/extends\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport * as React from 'react';\nimport PropTypes from 'prop-types';\nimport clsx from 'clsx';\nimport withStyles from '../styles/withStyles';\nimport Typography from '../Typography';\nexport var styles = {\n  /* Styles applied to the root element. */\n  root: {\n    margin: 0,\n    padding: '16px 24px',\n    flex: '0 0 auto'\n  }\n};\nvar DialogTitle = /*#__PURE__*/React.forwardRef(function DialogTitle(props, ref) {\n  var children = props.children,\n      classes = props.classes,\n      className = props.className,\n      _props$disableTypogra = props.disableTypography,\n      disableTypography = _props$disableTypogra === void 0 ? false : _props$disableTypogra,\n      other = _objectWithoutProperties(props, [\"children\", \"classes\", \"className\", \"disableTypography\"]);\n\n  return /*#__PURE__*/React.createElement(\"div\", _extends({\n    className: clsx(classes.root, className),\n    ref: ref\n  }, other), disableTypography ? children : /*#__PURE__*/React.createElement(Typography, {\n    component: \"h2\",\n    variant: \"h6\"\n  }, children));\n});\nprocess.env.NODE_ENV !== \"production\" ? DialogTitle.propTypes = {\n  // ----------------------------- Warning --------------------------------\n  // | These PropTypes are generated from the TypeScript type definitions |\n  // |     To update them edit the d.ts file and run \"yarn proptypes\"     |\n  // ----------------------------------------------------------------------\n\n  /**\n   * The content of the component.\n   */\n  children: PropTypes.node,\n\n  /**\n   * Override or extend the styles applied to the component.\n   * See [CSS API](#css) below for more details.\n   */\n  classes: PropTypes.object,\n\n  /**\n   * @ignore\n   */\n  className: PropTypes.string,\n\n  /**\n   * If `true`, the children won't be wrapped by a typography component.\n   * For instance, this can be useful to render an h4 instead of the default h2.\n   */\n  disableTypography: PropTypes.bool\n} : void 0;\nexport default withStyles(styles, {\n  name: 'MuiDialogTitle'\n})(DialogTitle);","\nimport React from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport HvIconBase from \"./IconBase\";\n\nconst sizeSelector = (iconSize, height, width) => {\n  if (height && width) {\n    return { width, height };\n  }\n\n  switch (iconSize) {\n    case \"XS\":\n      return { width: 12, height: 12 };\n    default:\n    case \"S\":\n      return { width: 16, height: 16 };\n    case \"M\":\n      return { width: 32, height: 32 };\n    case \"L\":\n      return { width: 96, height: 96 };\n  }\n};\n\nconst Caution = ({\n  color,\n  iconSize = \"S\",\n  viewbox = \"0 0 16 16\",\n  height,\n  width,\n  semantic,\n  inverted = false,\n  svgProps,\n  ...others\n}) => {\n  const theme = useTheme();\n  const getColor = c => theme.palette?.[c] || c;\n  const colorArray = \n    (typeof color === \"string\" && [getColor(color)]) ||\n    (Array.isArray(color) && color.map?.(getColor)) ||\n    [theme.palette.acce1];\n\n  if (semantic) {\n    colorArray[0] = theme.palette?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  const size = sizeSelector(iconSize, height, width);\n\n  return (\n    <HvIconBase name=\"Caution\" iconSize={iconSize ?? \"S\"} {...others}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox} height={size.height} width={size.width}   focusable={false} {...svgProps}>\n  <path fill={colorArray[0]} className=\"color0\"  d=\"M7.5 6h1v4h-1zm0 7.001h1v-1h-1zM16 15H0L8 1zM1.723 14h12.554L8 3.016z\" />\n</svg>\n    </HvIconBase>\n)};\n\nCaution.propTypes = HvIconBase.propTypes;\n\nexport default Caution;","import React from \"react\";\nimport { Fail, Success, Caution, Info } from \"@hitachivantara/uikit-react-icons\";\n\nconst iconVariant = (variant, color, semantic) => {\n  switch (variant) {\n    case \"success\":\n      return <Success color={color} semantic={semantic && \"sema1\"} />;\n    case \"warning\":\n      return <Caution color={color} semantic={semantic && \"sema3\"} />;\n    case \"error\":\n      return <Fail color={color} semantic={semantic && \"sema4\"} />;\n    case \"info\":\n      return <Info color={color} />;\n    default:\n      return null;\n  }\n};\n\nexport default iconVariant;\n","const styles = (theme) => ({\n  root: {\n    padding: theme.hvSpacing(\"sm\"),\n    margin: 0,\n    display: \"flex\",\n    justifyContent: \"space-between\",\n  },\n  messageContainer: {\n    display: \"flex\",\n    alignItems: \"center\",\n  },\n  textWithIcon: {\n    marginLeft: theme.hvSpacing(\"xs\"),\n    // 32px is the icon width\n    marginRight: `calc(32px + ${theme.hvSpacing(\"xs\")})`,\n  },\n  icon: {\n    marginRight: theme.hv.spacing.md,\n    width: 48,\n    height: 48,\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { DialogTitle, withStyles } from \"@material-ui/core\";\nimport HvTypography from \"../../Typography\";\nimport iconVariant from \"../../utils/iconVariant\";\nimport styles from \"./styles\";\n\nconst HvDialogTitle = ({\n  classes,\n  className,\n  children,\n  variant = \"default\",\n  showIcon = true,\n  customIcon = null,\n  ...others\n}) => {\n  const isString = typeof children === \"string\";\n  // prevent the `fullscreen` prop from being passed to the `DialogTitle` component\n  // eslint-disable-next-line no-param-reassign\n  delete others.fullscreen;\n\n  const icon = customIcon || (showIcon && iconVariant(variant));\n\n  return (\n    <DialogTitle className={clsx(classes.root, className)} disableTypography {...others}>\n      <div className={classes.messageContainer}>\n        {icon}\n        <div className={clsx({ [classes.textWithIcon]: icon })}>\n          {!isString && children}\n          {isString && <HvTypography variant=\"xxsTitle\">{children}</HvTypography>}\n        </div>\n      </div>\n    </DialogTitle>\n  );\n};\n\nHvDialogTitle.propTypes = {\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Style applied to the root of the component (container for the title).\n     */\n    root: PropTypes.string,\n    /**\n     * Style applied to the container of the title\n     */\n    messageContainer: PropTypes.string,\n    /**\n     * Style applied to the text when the icon is present.\n     */\n    textWithIcon: PropTypes.string,\n    /**\n     * Style applied to the icon.\n     */\n    icon: PropTypes.string,\n    /**\n     * Style applied to the close button.\n     */\n    closeButton: PropTypes.string,\n  }).isRequired,\n  /**\n   * Variant of the Dialog.\n   */\n  variant: PropTypes.oneOf([\"success\", \"warning\", \"error\", \"info\", \"default\"]),\n  /**\n   * Controls if the associated icon to the variant should be shown.\n   */\n  showIcon: PropTypes.bool,\n  /**\n   * Custom icon to replace the variant default.\n   */\n  customIcon: PropTypes.node,\n  /**\n   * Node to be render.\n   */\n  children: PropTypes.node.isRequired,\n};\n\nexport default withStyles(styles, { name: \"HvDialogTitle\" })(HvDialogTitle);\n","const styles = (theme) => ({\n  root: {\n    display: \"inline-block\",\n    float: \"right\",\n  },\n  counterDisabled: {\n    color: theme.hv.palette.atmosphere.atmo5,\n  },\n  overloaded: {\n    color: theme.hv.palette.semantic.sema4,\n  },\n  gutter: {\n    paddingLeft: `6px`,\n  },\n});\n\nexport default styles;\n","import React, { useContext } from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core\";\nimport { HvFormElementContext } from \"../FormElement\";\nimport { HvTypography } from \"../..\";\nimport { setId } from \"../../utils\";\nimport styles from \"./styles\";\n\n/**\n * Displays the capacity and current usage of a text input box (character count by default).\n *\n * Use the character counter when there is a character or word limit.\n * By itself it doesn't block the user from going above the limit.\n */\nconst HvCharCounter = (props) => {\n  const {\n    separator = \"/\",\n    maxCharQuantity,\n    currentCharQuantity = 0,\n    classes,\n    className,\n    id,\n    disabled,\n    disableGutter = false,\n    ...others\n  } = props;\n  const { elementId, elementDisabled } = useContext(HvFormElementContext);\n  const localDisabled = disabled || elementDisabled;\n  const localId = id ?? setId(elementId, \"counter\");\n  const currentId = setId(localId, \"currentQuantity\");\n  const maxQuantityId = setId(localId, \"maxQuantity\");\n  const isOverloaded = currentCharQuantity > maxCharQuantity;\n\n  return (\n    <div\n      id={localId}\n      className={clsx(className, classes.root, {\n        [classes.counterDisabled]: localDisabled,\n        [classes.gutter]: !disableGutter,\n      })}\n      aria-live=\"polite\"\n      aria-disabled={localDisabled}\n      {...others}\n    >\n      <HvTypography\n        id={currentId}\n        className={clsx({\n          [classes.overloaded]: isOverloaded && !localDisabled,\n          [classes.counterDisabled]: localDisabled,\n        })}\n        variant=\"highlightText\"\n        component=\"label\"\n      >\n        {currentCharQuantity}\n      </HvTypography>\n      <HvTypography\n        id={maxQuantityId}\n        className={clsx({\n          [classes.overloaded]: isOverloaded && !localDisabled,\n          [classes.counterDisabled]: localDisabled,\n        })}\n        variant=\"normalText\"\n        component=\"label\"\n      >\n        {` ${separator} ${maxCharQuantity}`}\n      </HvTypography>\n    </div>\n  );\n};\n\nHvCharCounter.formElementType = \"controlled\";\n\nHvCharCounter.propTypes = {\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * Id to be applied to the root node.\n   */\n  id: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the component styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Styles applied to the char counter root container.\n     */\n    root: PropTypes.string,\n    /**\n     * Styles applied to the char counter root container when the current char counter higher than the max.\n     */\n    overloaded: PropTypes.string,\n    /**\n     * Styles applied when the char counter is disabled.\n     */\n    counterDisabled: PropTypes.string,\n    /**\n     * Separation for the counter.\n     */\n    gutter: PropTypes.string,\n  }).isRequired,\n  /**\n   * The string that separtes the current char quantity from the max quantity.\n   */\n  separator: PropTypes.string,\n  /**\n   * The maximum allowed length of the characters.\n   */\n  maxCharQuantity: PropTypes.number.isRequired,\n  /**\n   * The current char quantity to be rendered.\n   */\n  currentCharQuantity: PropTypes.number,\n  /**\n   * If `true` the counter is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * If `true` the info message won't have margins.\n   */\n  disableGutter: PropTypes.bool,\n};\n\nexport default withStyles(styles, { name: \"HvCharCounter\" })(HvCharCounter);\n","const styles = {\n  root: {\n    display: \"inline-block\",\n    width: \"100%\",\n  },\n  resizable: {\n    width: \"auto\",\n  },\n  disabled: {},\n  invalid: {},\n\n  baseInput: {\n    clear: \"both\",\n    float: \"left\",\n  },\n\n  input: {},\n  inputResizable: {\n    resize: \"auto\",\n    minWidth: \"150px\",\n    maxWidth: \"610px\",\n  },\n\n  labelContainer: {\n    float: \"left\",\n    display: \"flex\",\n    alignItems: \"flex-start\",\n  },\n  label: {\n    display: \"block\",\n    float: \"left\",\n    paddingBottom: \"6px\",\n  },\n  description: {\n    display: \"block\",\n    float: \"left\",\n  },\n  characterCounter: {\n    display: \"block\",\n    float: \"right\",\n    textAlign: \"right\",\n    marginBottom: \"6px\",\n  },\n  error: {\n    float: \"left\",\n  },\n};\n\nexport default styles;\n","import React, { useRef, useState, useEffect, useCallback, useMemo } from \"react\";\nimport PropTypes from \"prop-types\";\n\nimport isNil from \"lodash/isNil\";\n\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core\";\n\nimport { refType, setId, useControlled } from \"../utils\";\n\nimport {\n  HvFormElement,\n  HvBaseInput,\n  HvLabel,\n  HvInfoMessage,\n  HvWarningText,\n  HvCharCounter,\n  useUniqueId,\n} from \"..\";\n\nimport validationStates, { isInvalid } from \"../Forms/FormElement/validationStates\";\nimport {\n  DEFAULT_ERROR_MESSAGES,\n  validationTypes,\n  hasBuiltInValidations,\n  validateInput,\n  computeValidationState,\n  computeValidationMessage,\n} from \"../BaseInput/validations\";\n\nimport styles from \"./styles\";\n\n/**\n * A text area is a multiline text input box, with an optional character counter when there is a length limit.\n */\nconst HvTextArea = (props) => {\n  const {\n    classes,\n    className,\n\n    id,\n    name,\n\n    value: valueProp,\n    defaultValue = \"\",\n\n    required = false,\n    readOnly = false,\n    disabled = false,\n\n    label,\n    \"aria-label\": ariaLabel,\n    \"aria-labelledby\": ariaLabelledBy,\n    description,\n    \"aria-describedby\": ariaDescribedBy,\n\n    onChange,\n\n    status,\n    statusMessage,\n    \"aria-errormessage\": ariaErrorMessage,\n\n    placeholder,\n\n    autoFocus = false,\n\n    middleCountLabel = \"/\",\n\n    rows = 1,\n    resizable = false,\n    autoScroll = false,\n\n    hideCounter = false,\n\n    validationMessages,\n\n    maxCharQuantity,\n    minCharQuantity,\n    validation,\n\n    blockMax = false,\n\n    inputRef: inputRefProp,\n    onBlur,\n    onFocus,\n\n    inputProps = {},\n    countCharProps = {},\n\n    ...others\n  } = props;\n\n  const elementId = useUniqueId(id, \"hvtextarea\");\n\n  const inputRefOwn = useRef(null);\n  const inputRef = inputRefProp || inputRefOwn;\n\n  const [focused, setFocused] = React.useState(false);\n\n  // signals that the user has manually edited the input value\n  const isDirty = useRef(false);\n\n  // value related state\n  const [value, setValue] = useControlled(valueProp, defaultValue);\n\n  const isEmptyValue = value == null || value === \"\";\n\n  // validation related state\n  const [validationState, setValidationState] = useControlled(status, validationStates.standBy);\n\n  const [validationMessage, setValidationMessage] = useControlled(statusMessage, \"\");\n\n  // validationMessages reference tends to change, as users will not memoize/useState for it;\n  // dependencies must be more explicit so we set\n  // eslint-disable-next-line react-hooks/exhaustive-deps\n  const errorMessages = useMemo(\n    () => ({ ...DEFAULT_ERROR_MESSAGES, ...validationMessages }),\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n    [\n      validationMessages?.error,\n      validationMessages?.requiredError,\n      validationMessages?.minCharError,\n      validationMessages?.maxCharError,\n    ]\n  );\n\n  const isOverflow = (currentValue) =>\n    isNil(maxCharQuantity) ? false : currentValue.length > maxCharQuantity;\n\n  // validates the input, sets the status and the statusMessage accordingly (if uncontrolled)\n  // and returns the validity state of the input.\n  const performValidation = useCallback(() => {\n    const inputValidity = validateInput(\n      inputRef.current,\n      value,\n      required,\n      minCharQuantity,\n      maxCharQuantity,\n      validationTypes.none,\n      validation\n    );\n\n    // this will only run if status is uncontrolled\n    setValidationState(computeValidationState(inputValidity, isEmptyValue));\n\n    // this will only run if statusMessage is uncontrolled\n    setValidationMessage(computeValidationMessage(inputValidity, errorMessages));\n\n    return inputValidity;\n  }, [\n    errorMessages,\n    inputRef,\n    isEmptyValue,\n    maxCharQuantity,\n    minCharQuantity,\n    required,\n    setValidationMessage,\n    setValidationState,\n    validation,\n    value,\n  ]);\n\n  /**\n   * Limit the string to the maxCharQuantity length.\n   *\n   * @param value - string to evaluate\n   * @returns {string|*} - string according the limit\n   */\n  const limitValue = (currentValue) => {\n    if (currentValue === undefined || !blockMax) return currentValue;\n    return !isOverflow(currentValue) ? currentValue : currentValue.substring(0, maxCharQuantity);\n  };\n\n  const [autoScrolling, setAutoScrolling] = useState(autoScroll);\n\n  const isScrolledDown = useCallback(() => {\n    const el = inputRef.current;\n    return el == null || el.offsetHeight + el.scrollTop >= el.scrollHeight;\n  }, [inputRef]);\n\n  const scrollDown = useCallback(() => {\n    const el = inputRef.current;\n    if (el != null) {\n      el.scrollTop = el.scrollHeight - el.clientHeight;\n    }\n  }, [inputRef]);\n\n  const addScrollListener = useCallback(() => {\n    const scrollHandler = {\n      handleEvent: () => {\n        setAutoScrolling(isScrolledDown());\n      },\n    };\n    inputRef.current.addEventListener(\"scroll\", scrollHandler);\n  }, [inputRef, isScrolledDown]);\n\n  /**\n   * Validates the text area updating the state and modifying the warning text, also executes\n   * the user provided onBlur passing the current validation status and value.\n   *\n   * @returns {undefined}\n   */\n  const onContainerBlurHandler = (event) => {\n    setFocused(false);\n\n    const inputValidity = performValidation();\n\n    onBlur?.(event, value, inputValidity);\n  };\n\n  /**\n   * Updates the state putting again the value from the state because the input value is\n   * not automatically manage, it also executes the onFocus function from the user passing the value\n   */\n  const onFocusHandler = (event) => {\n    setFocused(true);\n\n    // reset validation status to standBy (only when status is uncontrolled)\n    setValidationState(validationStates.standBy);\n\n    onFocus?.(event, value);\n  };\n\n  /**\n   * Updates the length of the string while is being inputted, also executes the user onChange\n   * allowing the customization of the input if required.\n   *\n   * @param {String} value - The value provided by the HvInput\n   */\n  const onChangeHandler = (event, currentValue) => {\n    isDirty.current = true;\n\n    const limitedValue = blockMax ? limitValue(currentValue) : currentValue;\n\n    // set the input value (only when value is uncontrolled)\n    setValue(limitedValue);\n\n    onChange?.(event, limitedValue);\n  };\n\n  useEffect(() => {\n    if (autoScroll) {\n      addScrollListener();\n    }\n  }, [autoScroll, addScrollListener]);\n\n  useEffect(() => {\n    if (autoScrolling) {\n      scrollDown();\n    }\n  }, [valueProp, autoScrolling, scrollDown]);\n\n  // run initial validation after first render\n  // and also when any validation condition changes\n  useEffect(() => {\n    if (focused || (!isDirty.current && isEmptyValue)) {\n      // skip validation if currently focused or if empty and\n      // the user never manually edited the input value\n      return;\n    }\n\n    performValidation();\n  }, [focused, isEmptyValue, performValidation]);\n\n  const hasLabel = label != null;\n  const hasDescription = description != null;\n  const hasCounter = maxCharQuantity != null && !hideCounter;\n\n  // the error message area will only be created if:\n  // - an external element that provides an error message isn't identified via aria-errormessage AND\n  //   - both status and statusMessage properties are being controlled OR\n  //   - status is uncontrolled and any of the built-in validations are active\n  const canShowError =\n    ariaErrorMessage == null &&\n    ((status !== undefined && statusMessage !== undefined) ||\n      (status === undefined &&\n        hasBuiltInValidations(\n          required,\n          validationTypes.none,\n          minCharQuantity,\n          // if blockMax is true maxCharQuantity will never produce an error\n          // unless the value is controlled, so we can't prevent it to overflow maxCharQuantity\n          maxCharQuantity != null && (blockMax !== true || value != null) ? maxCharQuantity : null,\n          validation,\n          inputProps\n        )));\n\n  const isStateInvalid = isInvalid(validationState);\n\n  let errorMessageId;\n  if (isStateInvalid) {\n    errorMessageId = canShowError ? setId(elementId, \"error\") : ariaErrorMessage;\n  }\n\n  return (\n    <HvFormElement\n      id={id}\n      name={name}\n      status={validationState}\n      disabled={disabled}\n      required={required}\n      readOnly={readOnly}\n      className={clsx(classes.root, className, {\n        [classes.resizable]: resizable,\n        [classes.disabled]: disabled,\n        [classes.invalid]: isStateInvalid,\n      })}\n      onBlur={onContainerBlurHandler}\n    >\n      {(hasLabel || hasDescription) && (\n        <div className={classes.labelContainer}>\n          {hasLabel && (\n            <HvLabel\n              className={classes.label}\n              id={setId(id, \"label\")}\n              htmlFor={setId(elementId, \"input\")}\n              label={label}\n            />\n          )}\n\n          {hasDescription && (\n            <HvInfoMessage className={classes.description} id={setId(elementId, \"description\")}>\n              {description}\n            </HvInfoMessage>\n          )}\n        </div>\n      )}\n\n      {hasCounter && (\n        <HvCharCounter\n          id={setId(elementId, \"charCounter\")}\n          className={classes.characterCounter}\n          separator={middleCountLabel}\n          currentCharQuantity={value.length}\n          maxCharQuantity={maxCharQuantity}\n          {...countCharProps}\n        />\n      )}\n\n      <HvBaseInput\n        classes={{\n          root: classes.baseInput,\n          input: classes.input,\n          inputResizable: classes.inputResizable,\n        }}\n        id={hasLabel ? setId(elementId, \"input\") : setId(id, \"input\")}\n        name={name}\n        value={value}\n        required={required}\n        readOnly={readOnly}\n        disabled={disabled}\n        onChange={onChangeHandler}\n        autoFocus={autoFocus}\n        onFocus={onFocusHandler}\n        placeholder={placeholder}\n        invalid={isStateInvalid}\n        resizable={resizable}\n        multiline\n        rows={rows}\n        inputProps={{\n          \"aria-label\": ariaLabel,\n          \"aria-labelledby\": ariaLabelledBy,\n          \"aria-invalid\": isStateInvalid ? true : undefined,\n          \"aria-errormessage\": errorMessageId,\n          \"aria-describedby\":\n            ariaDescribedBy != null\n              ? ariaDescribedBy\n              : description && setId(elementId, \"description\"),\n          \"aria-controls\": maxCharQuantity ? setId(elementId, \"charCounter\") : undefined,\n\n          ...inputProps,\n        }}\n        inputRef={inputRef}\n        {...others}\n      />\n\n      {canShowError && (\n        <HvWarningText id={setId(elementId, \"error\")} className={classes.error} disableBorder>\n          {validationMessage}\n        </HvWarningText>\n      )}\n    </HvFormElement>\n  );\n};\n\nHvTextArea.propTypes = {\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the component styles applied.\n   */\n  classes: PropTypes.PropTypes.shape({\n    /**\n     * Styles applied to the root container of the textarea.\n     */\n    root: PropTypes.string,\n    /**\n     * Style applied to the root when resizable is `true`.\n     */\n    disabled: PropTypes.string,\n    /**\n     * Style applied to the root when resizable is `true`.\n     */\n    resizable: PropTypes.string,\n    /**\n     * Style applied to the root when resizable is `true`.\n     */\n    invalid: PropTypes.string,\n\n    /**\n     * Styles applied to the base input root which is comprising of everything but the labels and descriptions.\n     */\n    baseInput: PropTypes.string,\n\n    /**\n     * Style applied on the text area element.\n     */\n    input: PropTypes.string,\n    /**\n     * Styles applied to text area element element when it is resizable. Can be used to set max/min width.\n     */\n    inputResizable: PropTypes.string,\n\n    /**\n     * Styles applied to text area container that holds the label, description and counter.\n     */\n    labelContainer: PropTypes.string,\n    /**\n     * Styles applied to the label element.\n     */\n    label: PropTypes.string,\n    /**\n     * Styles applied to the label element.\n     */\n    description: PropTypes.string,\n    /**\n     * Style applied on the character counter.\n     */\n    characterCounter: PropTypes.string,\n    /**\n     * Styles applied to the error area.\n     */\n    error: PropTypes.string,\n  }).isRequired,\n\n  /**\n   * Id to be applied to the form element root node.\n   */\n  id: PropTypes.string,\n  /**\n   * The form element name.\n   */\n  name: PropTypes.string,\n\n  /**\n   * The value of the form element.\n   */\n  value: PropTypes.string,\n  /**\n   * When uncontrolled, defines the initial input value.\n   */\n  defaultValue: PropTypes.string,\n\n  /**\n   * The label of the form element.\n   *\n   * The form element must be labeled for accessibility reasons.\n   * If not provided, an aria-label or aria-labelledby must be inputted via inputProps.\n   */\n  label: PropTypes.node,\n  /**\n   * @ignore\n   */\n  \"aria-label\": PropTypes.string,\n  /**\n   * @ignore\n   */\n  \"aria-labelledby\": PropTypes.string,\n  /**\n   * Provide additional descriptive text for the form element.\n   */\n  description: PropTypes.node,\n  /**\n   * @ignore\n   */\n  \"aria-describedby\": PropTypes.string,\n\n  /**\n   * Indicates that the form element is disabled.\n   */\n  disabled: PropTypes.bool,\n  /**\n   * Indicates that the form element is not editable.\n   */\n  readOnly: PropTypes.bool,\n  /**\n   * Indicates that user input is required on the form element.\n   */\n  required: PropTypes.bool,\n\n  /**\n   * The status of the form element.\n   *\n   * Valid is correct, invalid is incorrect and standBy means no validations have run.\n   *\n   * When uncontrolled and unspecified it will default to \"standBy\" and change to either \"valid\"\n   * or \"invalid\" after any change to `checked`, depending of the values of both `required` and `checked`.\n   */\n  status: PropTypes.oneOf([\"standBy\", \"valid\", \"invalid\"]),\n  /**\n   * The error message to show when `status` is \"invalid\".\n   */\n  statusMessage: PropTypes.string,\n  /**\n   * Identifies the element that provides an error message for the textarea.\n   *\n   * Will only be used when the validation status is invalid.\n   */\n  \"aria-errormessage\": PropTypes.string,\n\n  /**\n   * The function that will be executed onChange.\n   */\n  onChange: PropTypes.func,\n\n  /**\n   * The placeholder value of the input.\n   */\n  placeholder: PropTypes.string,\n\n  /**\n   * Text between the current char counter and max value.\n   */\n  middleCountLabel: PropTypes.string,\n\n  /**\n   * An Object containing the various texts associated with the input.\n   */\n  validationMessages: PropTypes.shape({\n    /**\n     * The value when a validation fails.\n     */\n    error: PropTypes.string,\n    /**\n     * The message that appears when there are too many characters.\n     */\n    maxCharError: PropTypes.string,\n    /**\n     * The message that appears when there are too few characters.\n     */\n    minCharError: PropTypes.string,\n    /**\n     * The message that appears when the input is empty and required.\n     */\n    requiredError: PropTypes.string,\n  }),\n\n  /**\n   * Attributes applied to the input element.\n   */\n  inputProps: PropTypes.instanceOf(Object),\n  /**\n   * Allows passing a ref to the underlying input\n   */\n  inputRef: refType,\n\n  /**\n   * The function that will be executed onBlur, allows checking the validation state,\n   * it receives the value and the validation state (`invalid`, `valid`).\n   */\n  onBlur: PropTypes.func,\n  /**\n   * The function that will be executed onBlur, allows checking the value state,\n   * it receives the value.\n   */\n  onFocus: PropTypes.func,\n\n  /**\n   * The custom validation function, it receives the value and must return\n   * either `true` for valid or `false` for invalid, default validations would only\n   * occur if this function is null or undefined\n   */\n  validation: PropTypes.func,\n  /**\n   * If `true` it should autofocus.\n   */\n  autoFocus: PropTypes.bool,\n\n  /**\n   * The maximum allowed length of the characters, if this value is null no check\n   * will be performed.\n   */\n  maxCharQuantity: PropTypes.number,\n  /**\n   * The minimum allowed length of the characters, if this value is null no check\n   * will be perform.\n   */\n  minCharQuantity: PropTypes.number,\n\n  /**\n   * The number of rows of the text area\n   */\n  rows: PropTypes.number,\n  /**\n   * If `true` the component is resizable.\n   */\n  resizable: PropTypes.bool,\n  /**\n   * Auto-scroll: automatically scroll to the end on value changes.\n   * Will stop if the user scrolls up and resume if scrolled to the bottom.\n   */\n  autoScroll: PropTypes.bool,\n  /**\n   * If `true` it isn't possible to have more characters than the `maxCharQuantity`\n   */\n  blockMax: PropTypes.bool,\n  /**\n   * If `true` the character counter isn't shown even if maxCharQuantity is set.\n   */\n  hideCounter: PropTypes.bool,\n\n  /**\n   * Props passed to the HvCharCount component.\n   */\n  countCharProps: PropTypes.instanceOf(Object),\n};\n\nexport default withStyles(styles, { name: \"HvTextArea\" })(HvTextArea);\n"],"names":["CardContent","React","props","ref","classes","className","_props$component","component","Component","other","_objectWithoutProperties","_extends","clsx","root","withStyles","padding","paddingBottom","name","theme","content","onClick","id","DialogTitle","children","_props$disableTypogra","disableTypography","Typography","variant","margin","flex","iconSize","viewbox","inverted","svgProps","others","useTheme","getColor","c","colorArray","color","Array","size","height","width","sizeSelector","xmlns","viewBox","focusable","fill","d","semantic","display","justifyContent","messageContainer","alignItems","textWithIcon","marginLeft","marginRight","icon","showIcon","customIcon","isString","iconVariant","float","counterDisabled","atmo5","overloaded","sema4","gutter","paddingLeft","HvCharCounter","separator","currentCharQuantity","disableGutter","useContext","elementDisabled","localDisabled","disabled","localId","setId","elementId","currentId","maxQuantityId","isOverloaded","resizable","invalid","baseInput","clear","input","inputResizable","resize","minWidth","maxWidth","labelContainer","label","description","characterCounter","textAlign","marginBottom","error","value","defaultValue","required","readOnly","autoFocus","middleCountLabel","rows","autoScroll","hideCounter","blockMax","inputRef","inputProps","countCharProps","useUniqueId","inputRefOwn","useRef","inputRefProp","isDirty","useControlled","valueProp","isEmptyValue","status","validationStates","statusMessage","errorMessages","useMemo","validationMessages","performValidation","useCallback","inputValidity","validateInput","validationTypes","setValidationState","computeValidationState","setValidationMessage","computeValidationMessage","limitValue","currentValue","isNil","isOverflow","useState","isScrolledDown","el","scrollDown","addScrollListener","scrollHandler","handleEvent","setAutoScrolling","useEffect","autoScrolling","focused","hasLabel","hasDescription","hasCounter","maxCharQuantity","canShowError","ariaErrorMessage","hasBuiltInValidations","isStateInvalid","isInvalid","errorMessageId","onBlur","event","setFocused","htmlFor","onChange","limitedValue","setValue","onFocus","placeholder","multiline","ariaDescribedBy","undefined","disableBorder"],"sourceRoot":""}