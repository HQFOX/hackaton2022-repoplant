{"version":3,"file":"static/js/733.d7f13e47.chunk.js","mappings":"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","sources":["generated/graphql.tsx","../node_modules/@hitachivantara/uikit-react-icons/bin/Cards.js","../node_modules/@hitachivantara/uikit-react-icons/bin/List.js","../node_modules/@hitachivantara/uikit-react-core/src/AssetInventory/CardView/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/AssetInventory/CardView/CardView.js","components/characters/CharactersList/utils.tsx","components/characters/CharactersList/cardRenderer/styles.tsx","components/characters/CharactersList/cardRenderer/cardRenderer.tsx","components/characters/CharactersList/CharactersList.tsx","pages/Characters/Characters.tsx","../node_modules/@hitachivantara/uikit-react-core/src/ActionBar/styles.js","../node_modules/@hitachivantara/uikit-react-core/src/ActionBar/ActionBar.js","../node_modules/@babel/runtime/helpers/esm/createSuper.js","../node_modules/@babel/runtime/helpers/esm/isNativeReflectConstruct.js"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\n\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n/** A single film. */\nexport type Film = Node & {\n  __typename?: \"Film\";\n  characterConnection?: Maybe<FilmCharactersConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The name of the director of this film. */\n  director?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /** The episode number of this film. */\n  episodeID?: Maybe<Scalars[\"Int\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The opening paragraphs at the beginning of this film. */\n  openingCrawl?: Maybe<Scalars[\"String\"]>;\n  planetConnection?: Maybe<FilmPlanetsConnection>;\n  /** The name(s) of the producer(s) of this film. */\n  producers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The ISO 8601 date format of film release at original creator country. */\n  releaseDate?: Maybe<Scalars[\"String\"]>;\n  speciesConnection?: Maybe<FilmSpeciesConnection>;\n  starshipConnection?: Maybe<FilmStarshipsConnection>;\n  /** The title of this film. */\n  title?: Maybe<Scalars[\"String\"]>;\n  vehicleConnection?: Maybe<FilmVehiclesConnection>;\n};\n\n/** A single film. */\nexport type FilmCharacterConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmPlanetConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmSpeciesConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmStarshipConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmVehicleConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type FilmCharactersConnection = {\n  __typename?: \"FilmCharactersConnection\";\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  characters?: Maybe<Array<Maybe<Person>>>;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmCharactersEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmCharactersEdge = {\n  __typename?: \"FilmCharactersEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type FilmPlanetsConnection = {\n  __typename?: \"FilmPlanetsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmPlanetsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmPlanetsEdge = {\n  __typename?: \"FilmPlanetsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n};\n\n/** A connection to a list of items. */\nexport type FilmSpeciesConnection = {\n  __typename?: \"FilmSpeciesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmSpeciesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmSpeciesEdge = {\n  __typename?: \"FilmSpeciesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n};\n\n/** A connection to a list of items. */\nexport type FilmStarshipsConnection = {\n  __typename?: \"FilmStarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmStarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmStarshipsEdge = {\n  __typename?: \"FilmStarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A connection to a list of items. */\nexport type FilmVehiclesConnection = {\n  __typename?: \"FilmVehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmVehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmVehiclesEdge = {\n  __typename?: \"FilmVehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\n/** A connection to a list of items. */\nexport type FilmsConnection = {\n  __typename?: \"FilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmsEdge = {\n  __typename?: \"FilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The id of the object. */\n  id: Scalars[\"ID\"];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: \"PageInfo\";\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars[\"String\"]>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PeopleConnection = {\n  __typename?: \"PeopleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PeopleEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PeopleEdge = {\n  __typename?: \"PeopleEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type Person = Node & {\n  __typename?: \"Person\";\n  /**\n   * The birth year of the person, using the in-universe standard of BBY or ABY -\n   * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\n   * a battle that occurs at the end of Star Wars episode IV: A New Hope.\n   */\n  birthYear?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The eye color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have an eye.\n   */\n  eyeColor?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<PersonFilmsConnection>;\n  /**\n   * The gender of this person. Either \"Male\", \"Female\" or \"unknown\",\n   * \"n/a\" if the person does not have a gender.\n   */\n  gender?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The hair color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have hair.\n   */\n  hairColor?: Maybe<Scalars[\"String\"]>;\n  /** The height of the person in centimeters. */\n  height?: Maybe<Scalars[\"Int\"]>;\n  /** A planet that this person was born on or inhabits. */\n  homeworld?: Maybe<Planet>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The mass of the person in kilograms. */\n  mass?: Maybe<Scalars[\"Float\"]>;\n  /** The name of this person. */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The skin color of this person. */\n  skinColor?: Maybe<Scalars[\"String\"]>;\n  /** The species that this person belongs to, or null if unknown. */\n  species?: Maybe<Species>;\n  starshipConnection?: Maybe<PersonStarshipsConnection>;\n  vehicleConnection?: Maybe<PersonVehiclesConnection>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonStarshipConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonVehicleConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PersonFilmsConnection = {\n  __typename?: \"PersonFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PersonFilmsEdge = {\n  __typename?: \"PersonFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type PersonStarshipsConnection = {\n  __typename?: \"PersonStarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonStarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PersonStarshipsEdge = {\n  __typename?: \"PersonStarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A connection to a list of items. */\nexport type PersonVehiclesConnection = {\n  __typename?: \"PersonVehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonVehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonVehiclesEdge = {\n  __typename?: \"PersonVehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type Planet = Node & {\n  __typename?: \"Planet\";\n  /** The climates of this planet. */\n  climates?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The diameter of this planet in kilometers. */\n  diameter?: Maybe<Scalars[\"Int\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<PlanetFilmsConnection>;\n  /**\n   * A number denoting the gravity of this planet, where \"1\" is normal or 1 standard\n   * G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs.\n   */\n  gravity?: Maybe<Scalars[\"String\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The name of this planet. */\n  name?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The number of standard days it takes for this planet to complete a single orbit\n   * of its local star.\n   */\n  orbitalPeriod?: Maybe<Scalars[\"Int\"]>;\n  /** The average population of sentient beings inhabiting this planet. */\n  population?: Maybe<Scalars[\"Float\"]>;\n  residentConnection?: Maybe<PlanetResidentsConnection>;\n  /**\n   * The number of standard hours it takes for this planet to complete a single\n   * rotation on its axis.\n   */\n  rotationPeriod?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The percentage of the planet surface that is naturally occurring water or bodies\n   * of water.\n   */\n  surfaceWater?: Maybe<Scalars[\"Float\"]>;\n  /** The terrains of this planet. */\n  terrains?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetResidentConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetFilmsConnection = {\n  __typename?: \"PlanetFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetFilmsEdge = {\n  __typename?: \"PlanetFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetResidentsConnection = {\n  __typename?: \"PlanetResidentsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetResidentsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  residents?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetResidentsEdge = {\n  __typename?: \"PlanetResidentsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetsConnection = {\n  __typename?: \"PlanetsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetsEdge = {\n  __typename?: \"PlanetsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n};\n\nexport type Root = {\n  __typename?: \"Root\";\n  allFilms?: Maybe<FilmsConnection>;\n  allPeople?: Maybe<PeopleConnection>;\n  allPlanets?: Maybe<PlanetsConnection>;\n  allSpecies?: Maybe<SpeciesConnection>;\n  allStarships?: Maybe<StarshipsConnection>;\n  allVehicles?: Maybe<VehiclesConnection>;\n  film?: Maybe<Film>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n  person?: Maybe<Person>;\n  planet?: Maybe<Planet>;\n  species?: Maybe<Species>;\n  starship?: Maybe<Starship>;\n  vehicle?: Maybe<Vehicle>;\n};\n\nexport type RootAllFilmsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllPeopleArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllPlanetsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllSpeciesArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllStarshipsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllVehiclesArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootFilmArgs = {\n  filmID?: InputMaybe<Scalars[\"ID\"]>;\n  id?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootNodeArgs = {\n  id: Scalars[\"ID\"];\n};\n\nexport type RootPersonArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  personID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootPlanetArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  planetID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootSpeciesArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  speciesID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootStarshipArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  starshipID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootVehicleArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  vehicleID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type Species = Node & {\n  __typename?: \"Species\";\n  /** The average height of this species in centimeters. */\n  averageHeight?: Maybe<Scalars[\"Float\"]>;\n  /** The average lifespan of this species in years, null if unknown. */\n  averageLifespan?: Maybe<Scalars[\"Int\"]>;\n  /** The classification of this species, such as \"mammal\" or \"reptile\". */\n  classification?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The designation of this species, such as \"sentient\". */\n  designation?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /**\n   * Common eye colors for this species, null if this species does not typically\n   * have eyes.\n   */\n  eyeColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  filmConnection?: Maybe<SpeciesFilmsConnection>;\n  /**\n   * Common hair colors for this species, null if this species does not typically\n   * have hair.\n   */\n  hairColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** A planet that this species originates from. */\n  homeworld?: Maybe<Planet>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The language commonly spoken by this species. */\n  language?: Maybe<Scalars[\"String\"]>;\n  /** The name of this species. */\n  name?: Maybe<Scalars[\"String\"]>;\n  personConnection?: Maybe<SpeciesPeopleConnection>;\n  /**\n   * Common skin colors for this species, null if this species does not typically\n   * have skin.\n   */\n  skinColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesPersonConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesConnection = {\n  __typename?: \"SpeciesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesEdge = {\n  __typename?: \"SpeciesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesFilmsConnection = {\n  __typename?: \"SpeciesFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesFilmsEdge = {\n  __typename?: \"SpeciesFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesPeopleConnection = {\n  __typename?: \"SpeciesPeopleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesPeopleEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesPeopleEdge = {\n  __typename?: \"SpeciesPeopleEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type Starship = Node & {\n  __typename?: \"Starship\";\n  /**\n   * The Maximum number of Megalights this starship can travel in a standard hour.\n   * A \"Megalight\" is a standard unit of distance and has never been defined before\n   * within the Star Wars universe. This figure is only really useful for measuring\n   * the difference in speed of starships. We can assume it is similar to AU, the\n   * distance between our Sun (Sol) and Earth.\n   */\n  MGLT?: Maybe<Scalars[\"Int\"]>;\n  /** The maximum number of kilograms that this starship can transport. */\n  cargoCapacity?: Maybe<Scalars[\"Float\"]>;\n  /**\n   * The maximum length of time that this starship can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars[\"String\"]>;\n  /** The cost of this starship new, in galactic credits. */\n  costInCredits?: Maybe<Scalars[\"Float\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The number of personnel needed to run or pilot this starship. */\n  crew?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<StarshipFilmsConnection>;\n  /** The class of this starships hyperdrive. */\n  hyperdriveRating?: Maybe<Scalars[\"Float\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The length of this starship in meters. */\n  length?: Maybe<Scalars[\"Float\"]>;\n  /** The manufacturers of this starship. */\n  manufacturers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /**\n   * The maximum speed of this starship in atmosphere. null if this starship is\n   * incapable of atmosphering flight.\n   */\n  maxAtmospheringSpeed?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The model or official name of this starship. Such as \"T-65 X-wing\" or \"DS-1\n   * Orbital Battle Station\".\n   */\n  model?: Maybe<Scalars[\"String\"]>;\n  /** The name of this starship. The common name, such as \"Death Star\". */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The number of non-essential people this starship can transport. */\n  passengers?: Maybe<Scalars[\"String\"]>;\n  pilotConnection?: Maybe<StarshipPilotsConnection>;\n  /**\n   * The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile\n   * Battlestation\"\n   */\n  starshipClass?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipPilotConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipFilmsConnection = {\n  __typename?: \"StarshipFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipFilmsEdge = {\n  __typename?: \"StarshipFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipPilotsConnection = {\n  __typename?: \"StarshipPilotsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipPilotsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipPilotsEdge = {\n  __typename?: \"StarshipPilotsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipsConnection = {\n  __typename?: \"StarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipsEdge = {\n  __typename?: \"StarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type Vehicle = Node & {\n  __typename?: \"Vehicle\";\n  /** The maximum number of kilograms that this vehicle can transport. */\n  cargoCapacity?: Maybe<Scalars[\"Float\"]>;\n  /**\n   * The maximum length of time that this vehicle can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars[\"String\"]>;\n  /** The cost of this vehicle new, in Galactic Credits. */\n  costInCredits?: Maybe<Scalars[\"Float\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The number of personnel needed to run or pilot this vehicle. */\n  crew?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<VehicleFilmsConnection>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The length of this vehicle in meters. */\n  length?: Maybe<Scalars[\"Float\"]>;\n  /** The manufacturers of this vehicle. */\n  manufacturers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The maximum speed of this vehicle in atmosphere. */\n  maxAtmospheringSpeed?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The model or official name of this vehicle. Such as \"All-Terrain Attack\n   * Transport\".\n   */\n  model?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder\n   * bike\".\n   */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The number of non-essential people this vehicle can transport. */\n  passengers?: Maybe<Scalars[\"String\"]>;\n  pilotConnection?: Maybe<VehiclePilotsConnection>;\n  /** The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\". */\n  vehicleClass?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehicleFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclePilotConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type VehicleFilmsConnection = {\n  __typename?: \"VehicleFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehicleFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type VehicleFilmsEdge = {\n  __typename?: \"VehicleFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclePilotsConnection = {\n  __typename?: \"VehiclePilotsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclePilotsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type VehiclePilotsEdge = {\n  __typename?: \"VehiclePilotsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclesConnection = {\n  __typename?: \"VehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclesEdge = {\n  __typename?: \"VehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\nexport type FilmCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FilmCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  filmConnection?:\n                    | {\n                        __typename?: \"PersonFilmsConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type StarshipCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type StarshipCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  starshipConnection?:\n                    | {\n                        __typename?: \"PersonStarshipsConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type VehicleCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type VehicleCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  vehicleConnection?:\n                    | {\n                        __typename?: \"PersonVehiclesConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetPeopleQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetPeopleQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        edges?:\n          | Array<\n              | {\n                  __typename?: \"PeopleEdge\";\n                  node?:\n                    | {\n                        __typename?: \"Person\";\n                        id: string;\n                        name?: string | null | undefined;\n                        birthYear?: string | null | undefined;\n                        homeworld?:\n                          | {\n                              __typename?: \"Planet\";\n                              name?: string | null | undefined;\n                            }\n                          | null\n                          | undefined;\n                        species?:\n                          | {\n                              __typename?: \"Species\";\n                              name?: string | null | undefined;\n                            }\n                          | null\n                          | undefined;\n                        filmConnection?:\n                          | {\n                              __typename?: \"PersonFilmsConnection\";\n                              edges?:\n                                | Array<\n                                    | {\n                                        __typename?: \"PersonFilmsEdge\";\n                                        node?:\n                                          | {\n                                              __typename?: \"Film\";\n                                              title?: string | null | undefined;\n                                            }\n                                          | null\n                                          | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetCharacterQueryVariables = Exact<{\n  id?: InputMaybe<Scalars[\"ID\"]>;\n}>;\n\nexport type GetCharacterQuery = {\n  __typename?: \"Root\";\n  person?:\n    | {\n        __typename?: \"Person\";\n        name?: string | null | undefined;\n        birthYear?: string | null | undefined;\n        eyeColor?: string | null | undefined;\n        gender?: string | null | undefined;\n        hairColor?: string | null | undefined;\n        height?: number | null | undefined;\n        mass?: number | null | undefined;\n        skinColor?: string | null | undefined;\n        homeworld?:\n          | { __typename?: \"Planet\"; name?: string | null | undefined }\n          | null\n          | undefined;\n        species?:\n          | { __typename?: \"Species\"; name?: string | null | undefined }\n          | null\n          | undefined;\n        filmConnection?:\n          | {\n              __typename?: \"PersonFilmsConnection\";\n              totalCount?: number | null | undefined;\n              films?:\n                | Array<\n                    | {\n                        __typename?: \"Film\";\n                        title?: string | null | undefined;\n                        episodeID?: number | null | undefined;\n                        openingCrawl?: string | null | undefined;\n                        director?: string | null | undefined;\n                        producers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        releaseDate?: string | null | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n        starshipConnection?:\n          | {\n              __typename?: \"PersonStarshipsConnection\";\n              totalCount?: number | null | undefined;\n              starships?:\n                | Array<\n                    | {\n                        __typename?: \"Starship\";\n                        id: string;\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        starshipClass?: string | null | undefined;\n                        costInCredits?: number | null | undefined;\n                        length?: number | null | undefined;\n                        passengers?: string | null | undefined;\n                        crew?: string | null | undefined;\n                        MGLT?: number | null | undefined;\n                        maxAtmospheringSpeed?: number | null | undefined;\n                        hyperdriveRating?: number | null | undefined;\n                        manufacturers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        consumables?: string | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                        pilotConnection?:\n                          | {\n                              __typename?: \"StarshipPilotsConnection\";\n                              pilots?:\n                                | Array<\n                                    | {\n                                        __typename?: \"Person\";\n                                        id: string;\n                                        name?: string | null | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n        vehicleConnection?:\n          | {\n              __typename?: \"PersonVehiclesConnection\";\n              totalCount?: number | null | undefined;\n              vehicles?:\n                | Array<\n                    | {\n                        __typename?: \"Vehicle\";\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        vehicleClass?: string | null | undefined;\n                        manufacturers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        costInCredits?: number | null | undefined;\n                        length?: number | null | undefined;\n                        crew?: string | null | undefined;\n                        passengers?: string | null | undefined;\n                        maxAtmospheringSpeed?: number | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                        consumables?: string | null | undefined;\n                        id: string;\n                        pilotConnection?:\n                          | {\n                              __typename?: \"VehiclePilotsConnection\";\n                              pilots?:\n                                | Array<\n                                    | {\n                                        __typename?: \"Person\";\n                                        id: string;\n                                        name?: string | null | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetSpaceshipsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetSpaceshipsQuery = {\n  __typename?: \"Root\";\n  allStarships?:\n    | {\n        __typename?: \"StarshipsConnection\";\n        edges?:\n          | Array<\n              | {\n                  __typename?: \"StarshipsEdge\";\n                  node?:\n                    | {\n                        __typename?: \"Starship\";\n                        id: string;\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        passengers?: string | null | undefined;\n                        crew?: string | null | undefined;\n                        length?: number | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport const FilmCountDocument = gql`\n  query FilmCount {\n    allPeople {\n      totalCount\n      people {\n        filmConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useFilmCountQuery__\n *\n * To run a query within a React component, call `useFilmCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useFilmCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFilmCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFilmCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<FilmCountQuery, FilmCountQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<FilmCountQuery, FilmCountQueryVariables>(\n    FilmCountDocument,\n    options\n  );\n}\nexport function useFilmCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    FilmCountQuery,\n    FilmCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<FilmCountQuery, FilmCountQueryVariables>(\n    FilmCountDocument,\n    options\n  );\n}\nexport type FilmCountQueryHookResult = ReturnType<typeof useFilmCountQuery>;\nexport type FilmCountLazyQueryHookResult = ReturnType<\n  typeof useFilmCountLazyQuery\n>;\nexport type FilmCountQueryResult = Apollo.QueryResult<\n  FilmCountQuery,\n  FilmCountQueryVariables\n>;\nexport const StarshipCountDocument = gql`\n  query StarshipCount {\n    allPeople {\n      totalCount\n      people {\n        starshipConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useStarshipCountQuery__\n *\n * To run a query within a React component, call `useStarshipCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useStarshipCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStarshipCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStarshipCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    StarshipCountQuery,\n    StarshipCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<StarshipCountQuery, StarshipCountQueryVariables>(\n    StarshipCountDocument,\n    options\n  );\n}\nexport function useStarshipCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    StarshipCountQuery,\n    StarshipCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<StarshipCountQuery, StarshipCountQueryVariables>(\n    StarshipCountDocument,\n    options\n  );\n}\nexport type StarshipCountQueryHookResult = ReturnType<\n  typeof useStarshipCountQuery\n>;\nexport type StarshipCountLazyQueryHookResult = ReturnType<\n  typeof useStarshipCountLazyQuery\n>;\nexport type StarshipCountQueryResult = Apollo.QueryResult<\n  StarshipCountQuery,\n  StarshipCountQueryVariables\n>;\nexport const VehicleCountDocument = gql`\n  query VehicleCount {\n    allPeople {\n      totalCount\n      people {\n        vehicleConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useVehicleCountQuery__\n *\n * To run a query within a React component, call `useVehicleCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useVehicleCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useVehicleCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useVehicleCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    VehicleCountQuery,\n    VehicleCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<VehicleCountQuery, VehicleCountQueryVariables>(\n    VehicleCountDocument,\n    options\n  );\n}\nexport function useVehicleCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    VehicleCountQuery,\n    VehicleCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<VehicleCountQuery, VehicleCountQueryVariables>(\n    VehicleCountDocument,\n    options\n  );\n}\nexport type VehicleCountQueryHookResult = ReturnType<\n  typeof useVehicleCountQuery\n>;\nexport type VehicleCountLazyQueryHookResult = ReturnType<\n  typeof useVehicleCountLazyQuery\n>;\nexport type VehicleCountQueryResult = Apollo.QueryResult<\n  VehicleCountQuery,\n  VehicleCountQueryVariables\n>;\nexport const GetPeopleDocument = gql`\n  query GetPeople {\n    allPeople {\n      edges {\n        node {\n          id\n          name\n          birthYear\n          homeworld {\n            name\n          }\n          species {\n            name\n          }\n          filmConnection {\n            edges {\n              node {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetPeopleQuery__\n *\n * To run a query within a React component, call `useGetPeopleQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPeopleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPeopleQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPeopleQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetPeopleQuery, GetPeopleQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetPeopleQuery, GetPeopleQueryVariables>(\n    GetPeopleDocument,\n    options\n  );\n}\nexport function useGetPeopleLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetPeopleQuery,\n    GetPeopleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetPeopleQuery, GetPeopleQueryVariables>(\n    GetPeopleDocument,\n    options\n  );\n}\nexport type GetPeopleQueryHookResult = ReturnType<typeof useGetPeopleQuery>;\nexport type GetPeopleLazyQueryHookResult = ReturnType<\n  typeof useGetPeopleLazyQuery\n>;\nexport type GetPeopleQueryResult = Apollo.QueryResult<\n  GetPeopleQuery,\n  GetPeopleQueryVariables\n>;\nexport const GetCharacterDocument = gql`\n  query GetCharacter($id: ID) {\n    person(id: $id) {\n      name\n      birthYear\n      eyeColor\n      gender\n      hairColor\n      height\n      mass\n      skinColor\n      homeworld {\n        name\n      }\n      species {\n        name\n      }\n      filmConnection {\n        totalCount\n        films {\n          title\n          episodeID\n          openingCrawl\n          director\n          producers\n          releaseDate\n        }\n      }\n      starshipConnection {\n        totalCount\n        starships {\n          id\n          name\n          model\n          starshipClass\n          costInCredits\n          length\n          passengers\n          crew\n          MGLT\n          maxAtmospheringSpeed\n          hyperdriveRating\n          manufacturers\n          consumables\n          cargoCapacity\n          pilotConnection {\n            pilots {\n              id\n              name\n            }\n          }\n        }\n      }\n      vehicleConnection {\n        totalCount\n        vehicles {\n          name\n          model\n          vehicleClass\n          manufacturers\n          costInCredits\n          length\n          crew\n          passengers\n          maxAtmospheringSpeed\n          cargoCapacity\n          consumables\n          pilotConnection {\n            pilots {\n              id\n              name\n            }\n          }\n          id\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetCharacterQuery__\n *\n * To run a query within a React component, call `useGetCharacterQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharacterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharacterQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCharacterQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    options\n  );\n}\nexport function useGetCharacterLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    options\n  );\n}\nexport type GetCharacterQueryHookResult = ReturnType<\n  typeof useGetCharacterQuery\n>;\nexport type GetCharacterLazyQueryHookResult = ReturnType<\n  typeof useGetCharacterLazyQuery\n>;\nexport type GetCharacterQueryResult = Apollo.QueryResult<\n  GetCharacterQuery,\n  GetCharacterQueryVariables\n>;\nexport const GetSpaceshipsDocument = gql`\n  query GetSpaceships {\n    allStarships {\n      edges {\n        node {\n          id\n          name\n          model\n          passengers\n          crew\n          length\n          cargoCapacity\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetSpaceshipsQuery__\n *\n * To run a query within a React component, call `useGetSpaceshipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSpaceshipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSpaceshipsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSpaceshipsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetSpaceshipsQuery,\n    GetSpaceshipsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetSpaceshipsQuery, GetSpaceshipsQueryVariables>(\n    GetSpaceshipsDocument,\n    options\n  );\n}\nexport function useGetSpaceshipsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetSpaceshipsQuery,\n    GetSpaceshipsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetSpaceshipsQuery, GetSpaceshipsQueryVariables>(\n    GetSpaceshipsDocument,\n    options\n  );\n}\nexport type GetSpaceshipsQueryHookResult = ReturnType<\n  typeof useGetSpaceshipsQuery\n>;\nexport type GetSpaceshipsLazyQueryHookResult = ReturnType<\n  typeof useGetSpaceshipsLazyQuery\n>;\nexport type GetSpaceshipsQueryResult = Apollo.QueryResult<\n  GetSpaceshipsQuery,\n  GetSpaceshipsQueryVariables\n>;\n","\nimport React from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport HvIconBase from \"./IconBase\";\n\nconst sizeSelector = (iconSize, height, width) => {\n  if (height && width) {\n    return { width, height };\n  }\n\n  switch (iconSize) {\n    case \"XS\":\n      return { width: 12, height: 12 };\n    default:\n    case \"S\":\n      return { width: 16, height: 16 };\n    case \"M\":\n      return { width: 32, height: 32 };\n    case \"L\":\n      return { width: 96, height: 96 };\n  }\n};\n\nconst Cards = ({\n  color,\n  iconSize = \"S\",\n  viewbox = \"0 0 16 16\",\n  height,\n  width,\n  semantic,\n  inverted = false,\n  svgProps,\n  ...others\n}) => {\n  const theme = useTheme();\n  const getColor = c => theme.palette?.[c] || c;\n  const colorArray = \n    (typeof color === \"string\" && [getColor(color)]) ||\n    (Array.isArray(color) && color.map?.(getColor)) ||\n    [theme.palette.acce1];\n\n  if (semantic) {\n    colorArray[0] = theme.palette?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  const size = sizeSelector(iconSize, height, width);\n\n  return (\n    <HvIconBase name=\"Cards\" iconSize={iconSize ?? \"S\"} {...others}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox} height={size.height} width={size.width}   focusable={false} {...svgProps}>\n  <path fill={colorArray[0]} className=\"color0\"  d=\"M2 14h5V9H2zm1-4h3v3H3zM2 7h5V2H2zm1-4h3v3H3zm6 11h5V9H9zm1-4h3v3h-3zM9 2v5h5V2zm4 4h-3V3h3z\" />\n</svg>\n    </HvIconBase>\n)};\n\nCards.propTypes = HvIconBase.propTypes;\n\nexport default Cards;","\nimport React from \"react\";\nimport { useTheme } from \"@material-ui/core\";\nimport HvIconBase from \"./IconBase\";\n\nconst sizeSelector = (iconSize, height, width) => {\n  if (height && width) {\n    return { width, height };\n  }\n\n  switch (iconSize) {\n    case \"XS\":\n      return { width: 12, height: 12 };\n    default:\n    case \"S\":\n      return { width: 16, height: 16 };\n    case \"M\":\n      return { width: 32, height: 32 };\n    case \"L\":\n      return { width: 96, height: 96 };\n  }\n};\n\nconst List = ({\n  color,\n  iconSize = \"S\",\n  viewbox = \"0 0 16 16\",\n  height,\n  width,\n  semantic,\n  inverted = false,\n  svgProps,\n  ...others\n}) => {\n  const theme = useTheme();\n  const getColor = c => theme.palette?.[c] || c;\n  const colorArray = \n    (typeof color === \"string\" && [getColor(color)]) ||\n    (Array.isArray(color) && color.map?.(getColor)) ||\n    [theme.palette.acce1];\n\n  if (semantic) {\n    colorArray[0] = theme.palette?.[semantic] || colorArray[0];\n  }\n\n  if (inverted && colorArray[1]) {\n    colorArray[1] = colorArray[0];\n    colorArray[0] = \"none\";\n  }\n\n  const size = sizeSelector(iconSize, height, width);\n\n  return (\n    <HvIconBase name=\"List\" iconSize={iconSize ?? \"S\"} {...others}>\n      <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox={viewbox} height={size.height} width={size.width}   focusable={false} {...svgProps}>\n  <path fill={colorArray[0]} className=\"color0\"  d=\"M0 7h2v2H0zm0-3h2V2H0zm0 10h2v-2H0zm4-5.6h12v-1H4zm0-5h12v-1H4zm0 10h12v-1H4z\" />\n</svg>\n    </HvIconBase>\n)};\n\nList.propTypes = HvIconBase.propTypes;\n\nexport default List;","const styles = (theme) => ({\n  root: {\n    marginTop: theme.hvSpacing(2),\n  },\n  elements: {},\n});\n\nexport default styles;\n","import React, { useRef } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { withStyles } from \"@material-ui/core\";\nimport {\n  HvActionBar,\n  HvActionsGeneric,\n  HvCard,\n  HvCardContent,\n  HvGrid,\n  useWidth,\n  setId,\n} from \"../..\";\nimport Focus from \"../../Focus\";\nimport styles from \"./styles\";\nimport setActionsId from \"../setActionsId\";\n\nconst DEFAULT_VIEW_CONFIGURATION = {\n  onSelection: null,\n  breakpoints: {\n    xs: false,\n    sm: false,\n    md: false,\n    lg: false,\n    xl: false,\n  },\n  actions: null,\n};\n\nconst CardRenderChooser =\n  (viewConfiguration, render, cardContent, metadata, cardProps) => (data) => {\n    const { onSelection, isSelectable, maxVisibleActions, actionsCallback } = viewConfiguration;\n    const actions = setActionsId(viewConfiguration.actions, data.id);\n\n    return render ? (\n      render(data, { ...viewConfiguration, actions }, metadata, cardProps)\n    ) : (\n      <HvCard onChange={onSelection} selectable={isSelectable} {...data} {...cardProps}>\n        <HvCardContent>{cardContent?.(data)}</HvCardContent>\n        {actions && (\n          <HvActionBar>\n            <HvActionsGeneric\n              actions={actions}\n              actionsCallback={actionsCallback}\n              maxVisibleActions={maxVisibleActions}\n            />\n          </HvActionBar>\n        )}\n      </HvCard>\n    );\n  };\n\nconst CardView = ({\n  id = \"\",\n  className,\n  classes,\n  values,\n  selectedValues,\n  renderer,\n  viewConfiguration = DEFAULT_VIEW_CONFIGURATION,\n  innerCardContent,\n  metadata,\n  emptyComponent = null,\n  ...others\n}) => {\n  const containerRef = useRef(null);\n  const currentBreakpoint = useWidth();\n\n  // If no custom render is passed, the render uses the standard card implementation\n  const renderCard = CardRenderChooser(\n    viewConfiguration,\n    renderer,\n    innerCardContent,\n    metadata,\n    others\n  );\n\n  const { breakpoints } = viewConfiguration;\n\n  const cardJump = () =>\n    breakpoints[currentBreakpoint] === false ? 1 : 12 / breakpoints[currentBreakpoint];\n\n  /**\n   * Render of the cards for each value.\n   */\n  const renderCards = () => {\n    return values.map((value, index) => {\n      // eslint-disable-next-line no-param-reassign\n      value.checked = !!(selectedValues && selectedValues.indexOf(value.id) > -1);\n\n      return (\n        <HvGrid id={setId(value.id, \"grid\")} key={value.id} item {...breakpoints}>\n          <Focus\n            rootRef={containerRef}\n            key={value.id}\n            strategy=\"grid\"\n            filterClass=\"grid\"\n            navigationJump={cardJump()}\n            focusDisabled={false}\n          >\n            <div key={value.id} tabIndex={index === 0 ? 0 : -1}>\n              {renderCard(value)}\n            </div>\n          </Focus>\n        </HvGrid>\n      );\n    });\n  };\n\n  const hasValues = values.length > 0;\n\n  return hasValues ? (\n    <div className={classes.root} ref={containerRef}>\n      <div className={classes.elements}>\n        <HvGrid\n          className={className}\n          id={id}\n          container\n          justifyContent=\"flex-start\"\n          alignItems=\"flex-start\"\n        >\n          {renderCards()}\n        </HvGrid>\n      </div>\n    </div>\n  ) : (\n    emptyComponent\n  );\n};\n\nconst sizeProps = [true, false, \"auto\", 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12];\n\nCardView.propTypes = {\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * Id to be applied to the root node.\n   */\n  id: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Styles applied to the root.\n     */\n    root: PropTypes.string,\n    /**\n     * Styles applied to the component that contains the elements class.\n     */\n    elements: PropTypes.string,\n  }).isRequired,\n  /**\n   * Metadata associated with the values.\n   */\n  metadata: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      title: PropTypes.string,\n      accessor: PropTypes.string,\n      cellType: PropTypes.oneOf([\"alpha-numeric\", \"numeric\", \"date\", \"node\"]),\n      sortable: PropTypes.bool,\n      sortFunction: PropTypes.func,\n      searchable: PropTypes.bool,\n      searchFunction: PropTypes.func,\n    })\n  ),\n  /**\n   * Values to be passed to the card render.\n   */\n  values: PropTypes.instanceOf(Array).isRequired,\n  /**\n   * Selected values.\n   */\n  selectedValues: PropTypes.arrayOf(PropTypes.string),\n  /**\n   * Custom render for the cards.\n   */\n  renderer: PropTypes.func,\n  /**\n   * innerCardContent to be passed to the standard render.\n   */\n  innerCardContent: PropTypes.func,\n  /**\n   * Component to the present when no data is available.\n   */\n  emptyComponent: PropTypes.node,\n  /**\n   * Configuration settings for the view.\n   */\n  viewConfiguration: PropTypes.shape({\n    /**\n     * Callback evoked in the selection of the card.\n     */\n    onSelection: PropTypes.func,\n    /**\n     * Defines if the view allows selections.\n     */\n    isSelectable: PropTypes.bool,\n    /**\n     * List of actions to be passed to the cards.\n     */\n    actions: PropTypes.arrayOf(\n      PropTypes.shape({\n        id: PropTypes.string.isRequired,\n        label: PropTypes.string.isRequired,\n        icon: PropTypes.oneOfType([PropTypes.node, PropTypes.func]),\n        disabled: PropTypes.bool,\n      })\n    ),\n    /**\n     * The callback function ran when an action is triggered, receiving `action` as param\n     */\n    actionsCallback: PropTypes.func,\n    /**\n     * The number of maximum visible actions before they're collapsed into a `DropDownMenu`.\n     */\n    maxVisibleActions: PropTypes.number,\n    /**\n     * Defines the number of columns the component is going to use. Check the\n     * Grid component for possible values\n     */\n    breakpoints: PropTypes.shape({\n      xs: PropTypes.oneOf(sizeProps),\n      sm: PropTypes.oneOf(sizeProps),\n      md: PropTypes.oneOf(sizeProps),\n      lg: PropTypes.oneOf(sizeProps),\n      xl: PropTypes.oneOf(sizeProps),\n    }),\n  }),\n};\n\nexport default withStyles(styles, { name: \"HvCardView\" })(CardView);\n","import {\n  AssetInventoryMetadata,\n  AssetInventoryConfiguration,\n} from \"@hitachivantara/uikit-react-core\";\n\nconst metadata: AssetInventoryMetadata[] = [\n  {\n    id: \"id1\",\n    accessor: \"name\",\n    cellType: \"alpha-numeric\",\n    searchable: true,\n    sortable: true,\n    sortableLabelAsc: \"Name ascending\",\n    sortableLabelDesc: \"Name descending\",\n  },\n  {\n    id: \"id2\",\n    accessor: \"birthYear\",\n    cellType: \"alpha-numeric\",\n    sortable: true,\n    sortableLabelAsc: \"Birthday ascending\",\n    sortableLabelDesc: \"Birthday descending\",\n  },\n];\n\nconst viewConfiguration: AssetInventoryConfiguration = {\n  breakpoints: { xs: 12, sm: 6, md: 4, lg: 3, xl: 3 },\n  columnConfiguration: [\n    { style: { width: 1, textAlign: \"center\" } },\n    {\n      title: \"Event\",\n      style: { minWidth: \"360px\", textAlign: \"start\" },\n    },\n    {\n      title: \"Probability\",\n      style: { minWidth: \"80px\", textAlign: \"end\" },\n    },\n    {\n      title: \"Time horizon\",\n      style: { minWidth: \"100px\", textAlign: \"end\" },\n    },\n    {\n      title: \"Related Assets\",\n      style: {\n        minWidth: \"195px\",\n        paddingLeft: \"30px\",\n        textAlign: \"start\",\n      },\n    },\n  ],\n};\n\nconst configuration = {\n  metadata,\n  viewConfiguration,\n};\n\nconst actions = [{ id: \"view\", label: \"View\", disabled: false }];\n\nexport { configuration, actions };\n","import { makeStyles } from \"@material-ui/core\";\n\nconst useStyles = makeStyles((theme) => ({\n  card: {\n    cursor: \"pointer\",\n    \"& .HvCard-semanticBar\": {\n      backgroundColor: \"#facd2d\",\n    },\n  },\n  item: {\n    paddingBottom: theme.hv.spacing.sm,\n  },\n  kpis: {\n    display: \"flex\",\n  },\n  timestamp: {\n    paddingRight: theme.hv.spacing.xs,\n    borderRight: `solid 1px ${theme.hv.palette.accent.acce1}`,\n    marginRight: theme.hv.spacing.xs,\n  },\n}));\n\nexport default useStyles;\n","import React from \"react\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Person } from \"generated/graphql\";\n\nimport {\n  HvGrid,\n  HvTypography,\n  HvCard,\n  HvCardHeader,\n  HvCardContent,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport useStyles from \"./styles\";\n\nconst Card: React.FC<Person> = ({\n  id,\n  name,\n  birthYear,\n  species,\n  homeworld,\n  filmConnection,\n}) => {\n  const { t } = useTranslation(\"characters\");\n  const history = useHistory();\n  const classes = useStyles();\n\n  const labels = {\n    homeworld: t(\"list.cardView.homeworld\"),\n    films: t(\"list.cardView.films\"),\n  };\n\n  let movies = \"\";\n  filmConnection?.edges?.forEach((edge, index) => {\n    movies = `${movies}${index > 0 ? \", \" : \"\"}${edge?.node?.title}`;\n  });\n\n  return (\n    <HvCard\n      key={id}\n      bgcolor=\"atmo1\"\n      selectable={false}\n      className={classes.card}\n      onClick={() => history.push(`/star-wars/characters/${id}`)}\n    >\n      <HvCardHeader title={name || \"\"} />\n      <HvCardContent>\n        <HvGrid container>\n          <HvGrid item xs={12} sm={12} md={12}>\n            <div className={classes.kpis}>\n              <HvTypography className={classes.timestamp}>\n                {birthYear === \"unknown\" ? \"N/A\" : birthYear}\n              </HvTypography>\n              <HvTypography>{species?.name || \"N/A\"}</HvTypography>\n            </div>\n          </HvGrid>\n\n          <HvGrid item xs={5} sm={6} md={12}>\n            <HvTypography variant=\"highlightText\">\n              {labels.homeworld}\n            </HvTypography>\n            <HvTypography noWrap>{homeworld?.name}</HvTypography>\n          </HvGrid>\n\n          <HvGrid item xs={7} sm={6} md={12} className={classes.item}>\n            <HvTypography variant=\"highlightText\">{labels.films}</HvTypography>\n            <HvTypography noWrap>{movies}</HvTypography>\n          </HvGrid>\n        </HvGrid>\n      </HvCardContent>\n    </HvCard>\n  );\n};\n\nconst cardRenderer = (data: object) => {\n  const person: Person = data as Record<string, unknown> as Person;\n\n  return <Card {...person} />;\n};\n\nexport default cardRenderer;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { Cards, Fail, List } from \"@hitachivantara/uikit-react-icons\";\nimport {\n  HvAssetInventory,\n  HvCardView,\n  HvEmptyState,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport { useGetPeopleQuery, Person } from \"generated/graphql\";\nimport { actions, configuration } from \"./utils\";\nimport cardRenderer from \"./cardRenderer\";\n\nconst CharactersList = () => {\n  const { t } = useTranslation(\"characters\");\n  const { data } = useGetPeopleQuery();\n\n  const labels = {\n    search: t(\"list.searchLabel\"),\n    cardView: t(\"list.cardView.label\"),\n    listView: t(\"list.listViewLabel\"),\n    noMessage: t(\"list.noMessageLabel\"),\n  };\n\n  const people: Person[] | undefined = data?.allPeople?.edges?.map(\n    (edge) =>\n      ({\n        ...edge?.node,\n      } as Person)\n  );\n\n  return data ? (\n    <HvAssetInventory\n      id=\"hv-assetinventory\"\n      values={people as { id: string }[]}\n      configuration={configuration}\n      actions={actions}\n      actionsCallback={(e, id, action) =>\n        // eslint-disable-next-line no-console\n        console.log(`You have pressed action ${action.label}`)\n      }\n      searchProps={{ \"aria-label\": labels.search }}\n      multibuttonProps={[\n        {\n          id: \"card-button\",\n          icon: <Cards />,\n          \"aria-label\": labels.cardView,\n        },\n        { id: \"list-button\", icon: <List />, \"aria-label\": labels.listView },\n      ]}\n      emptyComponent={\n        <HvEmptyState\n          message={t(\"list.noMessageLabel\")}\n          icon={<Fail iconSize=\"S\" color=\"acce1\" />}\n        />\n      }\n    >\n      <HvCardView id=\"card\" renderer={cardRenderer} />\n    </HvAssetInventory>\n  ) : null;\n};\n\nexport default CharactersList;\n","import React from \"react\";\n\nimport CharactersList from \"components/characters/CharactersList\";\nimport { Container } from \"components/layout\";\n\nconst Characters: React.FC = () => {\n  return (\n    <Container>\n      <CharactersList />\n    </Container>\n  );\n};\n\nexport default Characters;\n","const styles = (theme) => ({\n  root: {\n    width: \"100%\",\n    height: \"75px\",\n    padding: theme.hv.spacing.sm,\n    borderTop: `3px solid ${theme.hv.palette.atmosphere.atmo2}`,\n    display: \"flex\",\n    justifyContent: \"flex-end\",\n  },\n});\n\nexport default styles;\n","import React from \"react\";\nimport PropTypes from \"prop-types\";\nimport clsx from \"clsx\";\nimport { withStyles } from \"@material-ui/core\";\nimport styles from \"./styles\";\n\n/**\n * This component acts as a container for the Action Bar pattern.\n */\nconst HvActionBar = (props) => {\n  const { classes, className, id, children, ...others } = props;\n\n  return (\n    <div id={id} className={clsx(classes.root, className)} {...others}>\n      {children}\n    </div>\n  );\n};\n\nHvActionBar.propTypes = {\n  /**\n   * Class names to be applied.\n   */\n  className: PropTypes.string,\n  /**\n   * Id to be applied to the root node.\n   */\n  id: PropTypes.string,\n  /**\n   * A Jss Object used to override or extend the styles applied.\n   */\n  classes: PropTypes.shape({\n    /**\n     * Styles applied to the component root class.\n     */\n    root: PropTypes.string,\n  }).isRequired,\n  /**\n   * The content of the action container.\n   */\n  children: PropTypes.node.isRequired,\n};\n\nexport default withStyles(styles, { name: \"HvActionBar\" })(HvActionBar);\n","import getPrototypeOf from \"./getPrototypeOf.js\";\nimport isNativeReflectConstruct from \"./isNativeReflectConstruct.js\";\nimport possibleConstructorReturn from \"./possibleConstructorReturn.js\";\nexport default function _createSuper(Derived) {\n  var hasNativeReflectConstruct = isNativeReflectConstruct();\n  return function _createSuperInternal() {\n    var Super = getPrototypeOf(Derived),\n        result;\n\n    if (hasNativeReflectConstruct) {\n      var NewTarget = getPrototypeOf(this).constructor;\n      result = Reflect.construct(Super, arguments, NewTarget);\n    } else {\n      result = Super.apply(this, arguments);\n    }\n\n    return possibleConstructorReturn(this, result);\n  };\n}","export default function _isNativeReflectConstruct() {\n  if (typeof Reflect === \"undefined\" || !Reflect.construct) return false;\n  if (Reflect.construct.sham) return false;\n  if (typeof Proxy === \"function\") return true;\n\n  try {\n    Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {}));\n    return true;\n  } catch (e) {\n    return false;\n  }\n}"],"names":["defaultOptions","FilmCountDocument","gql","useFilmCountQuery","baseOptions","options","Apollo","StarshipCountDocument","useStarshipCountQuery","VehicleCountDocument","useVehicleCountQuery","GetPeopleDocument","useGetPeopleQuery","GetCharacterDocument","useGetCharacterQuery","iconSize","viewbox","inverted","svgProps","others","theme","useTheme","getColor","c","colorArray","color","Array","size","height","width","sizeSelector","name","xmlns","viewBox","focusable","fill","className","d","root","marginTop","elements","DEFAULT_VIEW_CONFIGURATION","onSelection","breakpoints","xs","sm","md","lg","xl","actions","withStyles","id","viewConfiguration","emptyComponent","containerRef","useRef","currentBreakpoint","useWidth","renderCard","render","cardContent","metadata","cardProps","data","actionsCallback","setActionsId","onChange","selectable","isSelectable","maxVisibleActions","CardRenderChooser","values","classes","ref","container","justifyContent","alignItems","value","selectedValues","setId","key","item","rootRef","strategy","filterClass","navigationJump","focusDisabled","tabIndex","index","configuration","accessor","cellType","searchable","sortable","sortableLabelAsc","sortableLabelDesc","columnConfiguration","style","textAlign","title","minWidth","paddingLeft","label","disabled","makeStyles","card","cursor","backgroundColor","paddingBottom","hv","spacing","kpis","display","timestamp","paddingRight","borderRight","palette","accent","acce1","marginRight","Card","birthYear","species","homeworld","filmConnection","t","useTranslation","history","useHistory","useStyles","labels","films","movies","edges","forEach","edge","node","bgcolor","onClick","push","variant","noWrap","person","search","cardView","listView","noMessage","people","allPeople","map","e","action","console","log","searchProps","multibuttonProps","icon","message","Fail","renderer","cardRenderer","padding","borderTop","props","children","clsx","_createSuper","Derived","hasNativeReflectConstruct","result","Super","NewTarget","this","constructor","Reflect","construct","arguments","apply","_isNativeReflectConstruct","sham","Proxy","Boolean","prototype","valueOf","call"],"sourceRoot":""}