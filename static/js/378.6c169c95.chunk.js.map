{"version":3,"file":"static/js/378.6c169c95.chunk.js","mappings":"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","sources":["generated/graphql.tsx","components/common/CountKPI/styles.tsx","components/common/CountKPI/CountKPI.tsx","components/common/DetailsKPI/styles.tsx","components/common/DetailsKPI/DetailsKPI.tsx","components/characters/characterDetails/FilmsTable/FilmsTable.tsx","lib/utils/measures.ts","components/characters/characterDetails/MovieCountKPI/MovieCountKPI.tsx","components/characters/characterDetails/StarshipCountKPI/StarshipCountKPI.tsx","components/characters/characterDetails/StarshipsTable/expandContent/expandContext.tsx","components/characters/characterDetails/StarshipsTable/StarshipsTable.tsx","components/characters/characterDetails/VehicleCountKPI/VehicleCountKPI.tsx","components/characters/characterDetails/VehiclesTable/expandContent/expandContext.tsx","components/characters/characterDetails/VehiclesTable/VehiclesTable.tsx","pages/Characters/CharacterDetails/styles.tsx","pages/Characters/CharacterDetails/CharacterDetails.tsx"],"sourcesContent":["import { gql } from \"@apollo/client\";\nimport * as Apollo from \"@apollo/client\";\n\nexport type Maybe<T> = T | null;\nexport type InputMaybe<T> = Maybe<T>;\nexport type Exact<T extends { [key: string]: unknown }> = {\n  [K in keyof T]: T[K];\n};\nexport type MakeOptional<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]?: Maybe<T[SubKey]>;\n};\nexport type MakeMaybe<T, K extends keyof T> = Omit<T, K> & {\n  [SubKey in K]: Maybe<T[SubKey]>;\n};\nconst defaultOptions = {} as const;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n};\n\n/** A single film. */\nexport type Film = Node & {\n  __typename?: \"Film\";\n  characterConnection?: Maybe<FilmCharactersConnection>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The name of the director of this film. */\n  director?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /** The episode number of this film. */\n  episodeID?: Maybe<Scalars[\"Int\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The opening paragraphs at the beginning of this film. */\n  openingCrawl?: Maybe<Scalars[\"String\"]>;\n  planetConnection?: Maybe<FilmPlanetsConnection>;\n  /** The name(s) of the producer(s) of this film. */\n  producers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The ISO 8601 date format of film release at original creator country. */\n  releaseDate?: Maybe<Scalars[\"String\"]>;\n  speciesConnection?: Maybe<FilmSpeciesConnection>;\n  starshipConnection?: Maybe<FilmStarshipsConnection>;\n  /** The title of this film. */\n  title?: Maybe<Scalars[\"String\"]>;\n  vehicleConnection?: Maybe<FilmVehiclesConnection>;\n};\n\n/** A single film. */\nexport type FilmCharacterConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmPlanetConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmSpeciesConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmStarshipConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single film. */\nexport type FilmVehicleConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type FilmCharactersConnection = {\n  __typename?: \"FilmCharactersConnection\";\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  characters?: Maybe<Array<Maybe<Person>>>;\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmCharactersEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmCharactersEdge = {\n  __typename?: \"FilmCharactersEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type FilmPlanetsConnection = {\n  __typename?: \"FilmPlanetsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmPlanetsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmPlanetsEdge = {\n  __typename?: \"FilmPlanetsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n};\n\n/** A connection to a list of items. */\nexport type FilmSpeciesConnection = {\n  __typename?: \"FilmSpeciesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmSpeciesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmSpeciesEdge = {\n  __typename?: \"FilmSpeciesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n};\n\n/** A connection to a list of items. */\nexport type FilmStarshipsConnection = {\n  __typename?: \"FilmStarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmStarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmStarshipsEdge = {\n  __typename?: \"FilmStarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A connection to a list of items. */\nexport type FilmVehiclesConnection = {\n  __typename?: \"FilmVehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmVehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type FilmVehiclesEdge = {\n  __typename?: \"FilmVehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\n/** A connection to a list of items. */\nexport type FilmsConnection = {\n  __typename?: \"FilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<FilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type FilmsEdge = {\n  __typename?: \"FilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** An object with an ID */\nexport type Node = {\n  /** The id of the object. */\n  id: Scalars[\"ID\"];\n};\n\n/** Information about pagination in a connection. */\nexport type PageInfo = {\n  __typename?: \"PageInfo\";\n  /** When paginating forwards, the cursor to continue. */\n  endCursor?: Maybe<Scalars[\"String\"]>;\n  /** When paginating forwards, are there more items? */\n  hasNextPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, are there more items? */\n  hasPreviousPage: Scalars[\"Boolean\"];\n  /** When paginating backwards, the cursor to continue. */\n  startCursor?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PeopleConnection = {\n  __typename?: \"PeopleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PeopleEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PeopleEdge = {\n  __typename?: \"PeopleEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type Person = Node & {\n  __typename?: \"Person\";\n  /**\n   * The birth year of the person, using the in-universe standard of BBY or ABY -\n   * Before the Battle of Yavin or After the Battle of Yavin. The Battle of Yavin is\n   * a battle that occurs at the end of Star Wars episode IV: A New Hope.\n   */\n  birthYear?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The eye color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have an eye.\n   */\n  eyeColor?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<PersonFilmsConnection>;\n  /**\n   * The gender of this person. Either \"Male\", \"Female\" or \"unknown\",\n   * \"n/a\" if the person does not have a gender.\n   */\n  gender?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The hair color of this person. Will be \"unknown\" if not known or \"n/a\" if the\n   * person does not have hair.\n   */\n  hairColor?: Maybe<Scalars[\"String\"]>;\n  /** The height of the person in centimeters. */\n  height?: Maybe<Scalars[\"Int\"]>;\n  /** A planet that this person was born on or inhabits. */\n  homeworld?: Maybe<Planet>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The mass of the person in kilograms. */\n  mass?: Maybe<Scalars[\"Float\"]>;\n  /** The name of this person. */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The skin color of this person. */\n  skinColor?: Maybe<Scalars[\"String\"]>;\n  /** The species that this person belongs to, or null if unknown. */\n  species?: Maybe<Species>;\n  starshipConnection?: Maybe<PersonStarshipsConnection>;\n  vehicleConnection?: Maybe<PersonVehiclesConnection>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonStarshipConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** An individual person or character within the Star Wars universe. */\nexport type PersonVehicleConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PersonFilmsConnection = {\n  __typename?: \"PersonFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PersonFilmsEdge = {\n  __typename?: \"PersonFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type PersonStarshipsConnection = {\n  __typename?: \"PersonStarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonStarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PersonStarshipsEdge = {\n  __typename?: \"PersonStarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A connection to a list of items. */\nexport type PersonVehiclesConnection = {\n  __typename?: \"PersonVehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PersonVehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type PersonVehiclesEdge = {\n  __typename?: \"PersonVehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type Planet = Node & {\n  __typename?: \"Planet\";\n  /** The climates of this planet. */\n  climates?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The diameter of this planet in kilometers. */\n  diameter?: Maybe<Scalars[\"Int\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<PlanetFilmsConnection>;\n  /**\n   * A number denoting the gravity of this planet, where \"1\" is normal or 1 standard\n   * G. \"2\" is twice or 2 standard Gs. \"0.5\" is half or 0.5 standard Gs.\n   */\n  gravity?: Maybe<Scalars[\"String\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The name of this planet. */\n  name?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The number of standard days it takes for this planet to complete a single orbit\n   * of its local star.\n   */\n  orbitalPeriod?: Maybe<Scalars[\"Int\"]>;\n  /** The average population of sentient beings inhabiting this planet. */\n  population?: Maybe<Scalars[\"Float\"]>;\n  residentConnection?: Maybe<PlanetResidentsConnection>;\n  /**\n   * The number of standard hours it takes for this planet to complete a single\n   * rotation on its axis.\n   */\n  rotationPeriod?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The percentage of the planet surface that is naturally occurring water or bodies\n   * of water.\n   */\n  surfaceWater?: Maybe<Scalars[\"Float\"]>;\n  /** The terrains of this planet. */\n  terrains?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/**\n * A large mass, planet or planetoid in the Star Wars Universe, at the time of\n * 0 ABY.\n */\nexport type PlanetResidentConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetFilmsConnection = {\n  __typename?: \"PlanetFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetFilmsEdge = {\n  __typename?: \"PlanetFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetResidentsConnection = {\n  __typename?: \"PlanetResidentsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetResidentsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  residents?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetResidentsEdge = {\n  __typename?: \"PlanetResidentsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type PlanetsConnection = {\n  __typename?: \"PlanetsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<PlanetsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  planets?: Maybe<Array<Maybe<Planet>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type PlanetsEdge = {\n  __typename?: \"PlanetsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Planet>;\n};\n\nexport type Root = {\n  __typename?: \"Root\";\n  allFilms?: Maybe<FilmsConnection>;\n  allPeople?: Maybe<PeopleConnection>;\n  allPlanets?: Maybe<PlanetsConnection>;\n  allSpecies?: Maybe<SpeciesConnection>;\n  allStarships?: Maybe<StarshipsConnection>;\n  allVehicles?: Maybe<VehiclesConnection>;\n  film?: Maybe<Film>;\n  /** Fetches an object given its ID */\n  node?: Maybe<Node>;\n  person?: Maybe<Person>;\n  planet?: Maybe<Planet>;\n  species?: Maybe<Species>;\n  starship?: Maybe<Starship>;\n  vehicle?: Maybe<Vehicle>;\n};\n\nexport type RootAllFilmsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllPeopleArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllPlanetsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllSpeciesArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllStarshipsArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootAllVehiclesArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\nexport type RootFilmArgs = {\n  filmID?: InputMaybe<Scalars[\"ID\"]>;\n  id?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootNodeArgs = {\n  id: Scalars[\"ID\"];\n};\n\nexport type RootPersonArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  personID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootPlanetArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  planetID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootSpeciesArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  speciesID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootStarshipArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  starshipID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\nexport type RootVehicleArgs = {\n  id?: InputMaybe<Scalars[\"ID\"]>;\n  vehicleID?: InputMaybe<Scalars[\"ID\"]>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type Species = Node & {\n  __typename?: \"Species\";\n  /** The average height of this species in centimeters. */\n  averageHeight?: Maybe<Scalars[\"Float\"]>;\n  /** The average lifespan of this species in years, null if unknown. */\n  averageLifespan?: Maybe<Scalars[\"Int\"]>;\n  /** The classification of this species, such as \"mammal\" or \"reptile\". */\n  classification?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The designation of this species, such as \"sentient\". */\n  designation?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  /**\n   * Common eye colors for this species, null if this species does not typically\n   * have eyes.\n   */\n  eyeColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  filmConnection?: Maybe<SpeciesFilmsConnection>;\n  /**\n   * Common hair colors for this species, null if this species does not typically\n   * have hair.\n   */\n  hairColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** A planet that this species originates from. */\n  homeworld?: Maybe<Planet>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The language commonly spoken by this species. */\n  language?: Maybe<Scalars[\"String\"]>;\n  /** The name of this species. */\n  name?: Maybe<Scalars[\"String\"]>;\n  personConnection?: Maybe<SpeciesPeopleConnection>;\n  /**\n   * Common skin colors for this species, null if this species does not typically\n   * have skin.\n   */\n  skinColors?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A type of person or character within the Star Wars Universe. */\nexport type SpeciesPersonConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesConnection = {\n  __typename?: \"SpeciesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  species?: Maybe<Array<Maybe<Species>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesEdge = {\n  __typename?: \"SpeciesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Species>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesFilmsConnection = {\n  __typename?: \"SpeciesFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesFilmsEdge = {\n  __typename?: \"SpeciesFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type SpeciesPeopleConnection = {\n  __typename?: \"SpeciesPeopleConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<SpeciesPeopleEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  people?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type SpeciesPeopleEdge = {\n  __typename?: \"SpeciesPeopleEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type Starship = Node & {\n  __typename?: \"Starship\";\n  /**\n   * The Maximum number of Megalights this starship can travel in a standard hour.\n   * A \"Megalight\" is a standard unit of distance and has never been defined before\n   * within the Star Wars universe. This figure is only really useful for measuring\n   * the difference in speed of starships. We can assume it is similar to AU, the\n   * distance between our Sun (Sol) and Earth.\n   */\n  MGLT?: Maybe<Scalars[\"Int\"]>;\n  /** The maximum number of kilograms that this starship can transport. */\n  cargoCapacity?: Maybe<Scalars[\"Float\"]>;\n  /**\n   * The maximum length of time that this starship can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars[\"String\"]>;\n  /** The cost of this starship new, in galactic credits. */\n  costInCredits?: Maybe<Scalars[\"Float\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The number of personnel needed to run or pilot this starship. */\n  crew?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<StarshipFilmsConnection>;\n  /** The class of this starships hyperdrive. */\n  hyperdriveRating?: Maybe<Scalars[\"Float\"]>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The length of this starship in meters. */\n  length?: Maybe<Scalars[\"Float\"]>;\n  /** The manufacturers of this starship. */\n  manufacturers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /**\n   * The maximum speed of this starship in atmosphere. null if this starship is\n   * incapable of atmosphering flight.\n   */\n  maxAtmospheringSpeed?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The model or official name of this starship. Such as \"T-65 X-wing\" or \"DS-1\n   * Orbital Battle Station\".\n   */\n  model?: Maybe<Scalars[\"String\"]>;\n  /** The name of this starship. The common name, such as \"Death Star\". */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The number of non-essential people this starship can transport. */\n  passengers?: Maybe<Scalars[\"String\"]>;\n  pilotConnection?: Maybe<StarshipPilotsConnection>;\n  /**\n   * The class of this starship, such as \"Starfighter\" or \"Deep Space Mobile\n   * Battlestation\"\n   */\n  starshipClass?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single transport craft that has hyperdrive capability. */\nexport type StarshipPilotConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipFilmsConnection = {\n  __typename?: \"StarshipFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipFilmsEdge = {\n  __typename?: \"StarshipFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipPilotsConnection = {\n  __typename?: \"StarshipPilotsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipPilotsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipPilotsEdge = {\n  __typename?: \"StarshipPilotsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type StarshipsConnection = {\n  __typename?: \"StarshipsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<StarshipsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  starships?: Maybe<Array<Maybe<Starship>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type StarshipsEdge = {\n  __typename?: \"StarshipsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Starship>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type Vehicle = Node & {\n  __typename?: \"Vehicle\";\n  /** The maximum number of kilograms that this vehicle can transport. */\n  cargoCapacity?: Maybe<Scalars[\"Float\"]>;\n  /**\n   * The maximum length of time that this vehicle can provide consumables for its\n   * entire crew without having to resupply.\n   */\n  consumables?: Maybe<Scalars[\"String\"]>;\n  /** The cost of this vehicle new, in Galactic Credits. */\n  costInCredits?: Maybe<Scalars[\"Float\"]>;\n  /** The ISO 8601 date format of the time that this resource was created. */\n  created?: Maybe<Scalars[\"String\"]>;\n  /** The number of personnel needed to run or pilot this vehicle. */\n  crew?: Maybe<Scalars[\"String\"]>;\n  /** The ISO 8601 date format of the time that this resource was edited. */\n  edited?: Maybe<Scalars[\"String\"]>;\n  filmConnection?: Maybe<VehicleFilmsConnection>;\n  /** The ID of an object */\n  id: Scalars[\"ID\"];\n  /** The length of this vehicle in meters. */\n  length?: Maybe<Scalars[\"Float\"]>;\n  /** The manufacturers of this vehicle. */\n  manufacturers?: Maybe<Array<Maybe<Scalars[\"String\"]>>>;\n  /** The maximum speed of this vehicle in atmosphere. */\n  maxAtmospheringSpeed?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * The model or official name of this vehicle. Such as \"All-Terrain Attack\n   * Transport\".\n   */\n  model?: Maybe<Scalars[\"String\"]>;\n  /**\n   * The name of this vehicle. The common name, such as \"Sand Crawler\" or \"Speeder\n   * bike\".\n   */\n  name?: Maybe<Scalars[\"String\"]>;\n  /** The number of non-essential people this vehicle can transport. */\n  passengers?: Maybe<Scalars[\"String\"]>;\n  pilotConnection?: Maybe<VehiclePilotsConnection>;\n  /** The class of this vehicle, such as \"Wheeled\" or \"Repulsorcraft\". */\n  vehicleClass?: Maybe<Scalars[\"String\"]>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehicleFilmConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A single transport craft that does not have hyperdrive capability */\nexport type VehiclePilotConnectionArgs = {\n  after?: InputMaybe<Scalars[\"String\"]>;\n  before?: InputMaybe<Scalars[\"String\"]>;\n  first?: InputMaybe<Scalars[\"Int\"]>;\n  last?: InputMaybe<Scalars[\"Int\"]>;\n};\n\n/** A connection to a list of items. */\nexport type VehicleFilmsConnection = {\n  __typename?: \"VehicleFilmsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehicleFilmsEdge>>>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  films?: Maybe<Array<Maybe<Film>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type VehicleFilmsEdge = {\n  __typename?: \"VehicleFilmsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Film>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclePilotsConnection = {\n  __typename?: \"VehiclePilotsConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclePilotsEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  pilots?: Maybe<Array<Maybe<Person>>>;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n};\n\n/** An edge in a connection. */\nexport type VehiclePilotsEdge = {\n  __typename?: \"VehiclePilotsEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Person>;\n};\n\n/** A connection to a list of items. */\nexport type VehiclesConnection = {\n  __typename?: \"VehiclesConnection\";\n  /** A list of edges. */\n  edges?: Maybe<Array<Maybe<VehiclesEdge>>>;\n  /** Information to aid in pagination. */\n  pageInfo: PageInfo;\n  /**\n   * A count of the total number of objects in this connection, ignoring pagination.\n   * This allows a client to fetch the first five objects by passing \"5\" as the\n   * argument to \"first\", then fetch the total count so it could display \"5 of 83\",\n   * for example.\n   */\n  totalCount?: Maybe<Scalars[\"Int\"]>;\n  /**\n   * A list of all of the objects returned in the connection. This is a convenience\n   * field provided for quickly exploring the API; rather than querying for\n   * \"{ edges { node } }\" when no edge data is needed, this field can be be used\n   * instead. Note that when clients like Relay need to fetch the \"cursor\" field on\n   * the edge to enable efficient pagination, this shortcut cannot be used, and the\n   * full \"{ edges { node } }\" version should be used instead.\n   */\n  vehicles?: Maybe<Array<Maybe<Vehicle>>>;\n};\n\n/** An edge in a connection. */\nexport type VehiclesEdge = {\n  __typename?: \"VehiclesEdge\";\n  /** A cursor for use in pagination */\n  cursor: Scalars[\"String\"];\n  /** The item at the end of the edge */\n  node?: Maybe<Vehicle>;\n};\n\nexport type FilmCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type FilmCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  filmConnection?:\n                    | {\n                        __typename?: \"PersonFilmsConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type StarshipCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type StarshipCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  starshipConnection?:\n                    | {\n                        __typename?: \"PersonStarshipsConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type VehicleCountQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type VehicleCountQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        totalCount?: number | null | undefined;\n        people?:\n          | Array<\n              | {\n                  __typename?: \"Person\";\n                  vehicleConnection?:\n                    | {\n                        __typename?: \"PersonVehiclesConnection\";\n                        totalCount?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetPeopleQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetPeopleQuery = {\n  __typename?: \"Root\";\n  allPeople?:\n    | {\n        __typename?: \"PeopleConnection\";\n        edges?:\n          | Array<\n              | {\n                  __typename?: \"PeopleEdge\";\n                  node?:\n                    | {\n                        __typename?: \"Person\";\n                        id: string;\n                        name?: string | null | undefined;\n                        birthYear?: string | null | undefined;\n                        homeworld?:\n                          | {\n                              __typename?: \"Planet\";\n                              name?: string | null | undefined;\n                            }\n                          | null\n                          | undefined;\n                        species?:\n                          | {\n                              __typename?: \"Species\";\n                              name?: string | null | undefined;\n                            }\n                          | null\n                          | undefined;\n                        filmConnection?:\n                          | {\n                              __typename?: \"PersonFilmsConnection\";\n                              edges?:\n                                | Array<\n                                    | {\n                                        __typename?: \"PersonFilmsEdge\";\n                                        node?:\n                                          | {\n                                              __typename?: \"Film\";\n                                              title?: string | null | undefined;\n                                            }\n                                          | null\n                                          | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetCharacterQueryVariables = Exact<{\n  id?: InputMaybe<Scalars[\"ID\"]>;\n}>;\n\nexport type GetCharacterQuery = {\n  __typename?: \"Root\";\n  person?:\n    | {\n        __typename?: \"Person\";\n        name?: string | null | undefined;\n        birthYear?: string | null | undefined;\n        eyeColor?: string | null | undefined;\n        gender?: string | null | undefined;\n        hairColor?: string | null | undefined;\n        height?: number | null | undefined;\n        mass?: number | null | undefined;\n        skinColor?: string | null | undefined;\n        homeworld?:\n          | { __typename?: \"Planet\"; name?: string | null | undefined }\n          | null\n          | undefined;\n        species?:\n          | { __typename?: \"Species\"; name?: string | null | undefined }\n          | null\n          | undefined;\n        filmConnection?:\n          | {\n              __typename?: \"PersonFilmsConnection\";\n              totalCount?: number | null | undefined;\n              films?:\n                | Array<\n                    | {\n                        __typename?: \"Film\";\n                        title?: string | null | undefined;\n                        episodeID?: number | null | undefined;\n                        openingCrawl?: string | null | undefined;\n                        director?: string | null | undefined;\n                        producers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        releaseDate?: string | null | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n        starshipConnection?:\n          | {\n              __typename?: \"PersonStarshipsConnection\";\n              totalCount?: number | null | undefined;\n              starships?:\n                | Array<\n                    | {\n                        __typename?: \"Starship\";\n                        id: string;\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        starshipClass?: string | null | undefined;\n                        costInCredits?: number | null | undefined;\n                        length?: number | null | undefined;\n                        passengers?: string | null | undefined;\n                        crew?: string | null | undefined;\n                        MGLT?: number | null | undefined;\n                        maxAtmospheringSpeed?: number | null | undefined;\n                        hyperdriveRating?: number | null | undefined;\n                        manufacturers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        consumables?: string | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                        pilotConnection?:\n                          | {\n                              __typename?: \"StarshipPilotsConnection\";\n                              pilots?:\n                                | Array<\n                                    | {\n                                        __typename?: \"Person\";\n                                        id: string;\n                                        name?: string | null | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n        vehicleConnection?:\n          | {\n              __typename?: \"PersonVehiclesConnection\";\n              totalCount?: number | null | undefined;\n              vehicles?:\n                | Array<\n                    | {\n                        __typename?: \"Vehicle\";\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        vehicleClass?: string | null | undefined;\n                        manufacturers?:\n                          | Array<string | null | undefined>\n                          | null\n                          | undefined;\n                        costInCredits?: number | null | undefined;\n                        length?: number | null | undefined;\n                        crew?: string | null | undefined;\n                        passengers?: string | null | undefined;\n                        maxAtmospheringSpeed?: number | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                        consumables?: string | null | undefined;\n                        id: string;\n                        pilotConnection?:\n                          | {\n                              __typename?: \"VehiclePilotsConnection\";\n                              pilots?:\n                                | Array<\n                                    | {\n                                        __typename?: \"Person\";\n                                        id: string;\n                                        name?: string | null | undefined;\n                                      }\n                                    | null\n                                    | undefined\n                                  >\n                                | null\n                                | undefined;\n                            }\n                          | null\n                          | undefined;\n                      }\n                    | null\n                    | undefined\n                  >\n                | null\n                | undefined;\n            }\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport type GetSpaceshipsQueryVariables = Exact<{ [key: string]: never }>;\n\nexport type GetSpaceshipsQuery = {\n  __typename?: \"Root\";\n  allStarships?:\n    | {\n        __typename?: \"StarshipsConnection\";\n        edges?:\n          | Array<\n              | {\n                  __typename?: \"StarshipsEdge\";\n                  node?:\n                    | {\n                        __typename?: \"Starship\";\n                        id: string;\n                        name?: string | null | undefined;\n                        model?: string | null | undefined;\n                        passengers?: string | null | undefined;\n                        crew?: string | null | undefined;\n                        length?: number | null | undefined;\n                        cargoCapacity?: number | null | undefined;\n                      }\n                    | null\n                    | undefined;\n                }\n              | null\n              | undefined\n            >\n          | null\n          | undefined;\n      }\n    | null\n    | undefined;\n};\n\nexport const FilmCountDocument = gql`\n  query FilmCount {\n    allPeople {\n      totalCount\n      people {\n        filmConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useFilmCountQuery__\n *\n * To run a query within a React component, call `useFilmCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useFilmCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useFilmCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useFilmCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<FilmCountQuery, FilmCountQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<FilmCountQuery, FilmCountQueryVariables>(\n    FilmCountDocument,\n    options\n  );\n}\nexport function useFilmCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    FilmCountQuery,\n    FilmCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<FilmCountQuery, FilmCountQueryVariables>(\n    FilmCountDocument,\n    options\n  );\n}\nexport type FilmCountQueryHookResult = ReturnType<typeof useFilmCountQuery>;\nexport type FilmCountLazyQueryHookResult = ReturnType<\n  typeof useFilmCountLazyQuery\n>;\nexport type FilmCountQueryResult = Apollo.QueryResult<\n  FilmCountQuery,\n  FilmCountQueryVariables\n>;\nexport const StarshipCountDocument = gql`\n  query StarshipCount {\n    allPeople {\n      totalCount\n      people {\n        starshipConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useStarshipCountQuery__\n *\n * To run a query within a React component, call `useStarshipCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useStarshipCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useStarshipCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useStarshipCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    StarshipCountQuery,\n    StarshipCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<StarshipCountQuery, StarshipCountQueryVariables>(\n    StarshipCountDocument,\n    options\n  );\n}\nexport function useStarshipCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    StarshipCountQuery,\n    StarshipCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<StarshipCountQuery, StarshipCountQueryVariables>(\n    StarshipCountDocument,\n    options\n  );\n}\nexport type StarshipCountQueryHookResult = ReturnType<\n  typeof useStarshipCountQuery\n>;\nexport type StarshipCountLazyQueryHookResult = ReturnType<\n  typeof useStarshipCountLazyQuery\n>;\nexport type StarshipCountQueryResult = Apollo.QueryResult<\n  StarshipCountQuery,\n  StarshipCountQueryVariables\n>;\nexport const VehicleCountDocument = gql`\n  query VehicleCount {\n    allPeople {\n      totalCount\n      people {\n        vehicleConnection {\n          totalCount\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useVehicleCountQuery__\n *\n * To run a query within a React component, call `useVehicleCountQuery` and pass it any options that fit your needs.\n * When your component renders, `useVehicleCountQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useVehicleCountQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useVehicleCountQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    VehicleCountQuery,\n    VehicleCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<VehicleCountQuery, VehicleCountQueryVariables>(\n    VehicleCountDocument,\n    options\n  );\n}\nexport function useVehicleCountLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    VehicleCountQuery,\n    VehicleCountQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<VehicleCountQuery, VehicleCountQueryVariables>(\n    VehicleCountDocument,\n    options\n  );\n}\nexport type VehicleCountQueryHookResult = ReturnType<\n  typeof useVehicleCountQuery\n>;\nexport type VehicleCountLazyQueryHookResult = ReturnType<\n  typeof useVehicleCountLazyQuery\n>;\nexport type VehicleCountQueryResult = Apollo.QueryResult<\n  VehicleCountQuery,\n  VehicleCountQueryVariables\n>;\nexport const GetPeopleDocument = gql`\n  query GetPeople {\n    allPeople {\n      edges {\n        node {\n          id\n          name\n          birthYear\n          homeworld {\n            name\n          }\n          species {\n            name\n          }\n          filmConnection {\n            edges {\n              node {\n                title\n              }\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetPeopleQuery__\n *\n * To run a query within a React component, call `useGetPeopleQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetPeopleQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetPeopleQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetPeopleQuery(\n  baseOptions?: Apollo.QueryHookOptions<GetPeopleQuery, GetPeopleQueryVariables>\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetPeopleQuery, GetPeopleQueryVariables>(\n    GetPeopleDocument,\n    options\n  );\n}\nexport function useGetPeopleLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetPeopleQuery,\n    GetPeopleQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetPeopleQuery, GetPeopleQueryVariables>(\n    GetPeopleDocument,\n    options\n  );\n}\nexport type GetPeopleQueryHookResult = ReturnType<typeof useGetPeopleQuery>;\nexport type GetPeopleLazyQueryHookResult = ReturnType<\n  typeof useGetPeopleLazyQuery\n>;\nexport type GetPeopleQueryResult = Apollo.QueryResult<\n  GetPeopleQuery,\n  GetPeopleQueryVariables\n>;\nexport const GetCharacterDocument = gql`\n  query GetCharacter($id: ID) {\n    person(id: $id) {\n      name\n      birthYear\n      eyeColor\n      gender\n      hairColor\n      height\n      mass\n      skinColor\n      homeworld {\n        name\n      }\n      species {\n        name\n      }\n      filmConnection {\n        totalCount\n        films {\n          title\n          episodeID\n          openingCrawl\n          director\n          producers\n          releaseDate\n        }\n      }\n      starshipConnection {\n        totalCount\n        starships {\n          id\n          name\n          model\n          starshipClass\n          costInCredits\n          length\n          passengers\n          crew\n          MGLT\n          maxAtmospheringSpeed\n          hyperdriveRating\n          manufacturers\n          consumables\n          cargoCapacity\n          pilotConnection {\n            pilots {\n              id\n              name\n            }\n          }\n        }\n      }\n      vehicleConnection {\n        totalCount\n        vehicles {\n          name\n          model\n          vehicleClass\n          manufacturers\n          costInCredits\n          length\n          crew\n          passengers\n          maxAtmospheringSpeed\n          cargoCapacity\n          consumables\n          pilotConnection {\n            pilots {\n              id\n              name\n            }\n          }\n          id\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetCharacterQuery__\n *\n * To run a query within a React component, call `useGetCharacterQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetCharacterQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetCharacterQuery({\n *   variables: {\n *      id: // value for 'id'\n *   },\n * });\n */\nexport function useGetCharacterQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    options\n  );\n}\nexport function useGetCharacterLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetCharacterQuery,\n    GetCharacterQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetCharacterQuery, GetCharacterQueryVariables>(\n    GetCharacterDocument,\n    options\n  );\n}\nexport type GetCharacterQueryHookResult = ReturnType<\n  typeof useGetCharacterQuery\n>;\nexport type GetCharacterLazyQueryHookResult = ReturnType<\n  typeof useGetCharacterLazyQuery\n>;\nexport type GetCharacterQueryResult = Apollo.QueryResult<\n  GetCharacterQuery,\n  GetCharacterQueryVariables\n>;\nexport const GetSpaceshipsDocument = gql`\n  query GetSpaceships {\n    allStarships {\n      edges {\n        node {\n          id\n          name\n          model\n          passengers\n          crew\n          length\n          cargoCapacity\n        }\n      }\n    }\n  }\n`;\n\n/**\n * __useGetSpaceshipsQuery__\n *\n * To run a query within a React component, call `useGetSpaceshipsQuery` and pass it any options that fit your needs.\n * When your component renders, `useGetSpaceshipsQuery` returns an object from Apollo Client that contains loading, error, and data properties\n * you can use to render your UI.\n *\n * @param baseOptions options that will be passed into the query, supported options are listed on: https://www.apollographql.com/docs/react/api/react-hooks/#options;\n *\n * @example\n * const { data, loading, error } = useGetSpaceshipsQuery({\n *   variables: {\n *   },\n * });\n */\nexport function useGetSpaceshipsQuery(\n  baseOptions?: Apollo.QueryHookOptions<\n    GetSpaceshipsQuery,\n    GetSpaceshipsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useQuery<GetSpaceshipsQuery, GetSpaceshipsQueryVariables>(\n    GetSpaceshipsDocument,\n    options\n  );\n}\nexport function useGetSpaceshipsLazyQuery(\n  baseOptions?: Apollo.LazyQueryHookOptions<\n    GetSpaceshipsQuery,\n    GetSpaceshipsQueryVariables\n  >\n) {\n  const options = { ...defaultOptions, ...baseOptions };\n  return Apollo.useLazyQuery<GetSpaceshipsQuery, GetSpaceshipsQueryVariables>(\n    GetSpaceshipsDocument,\n    options\n  );\n}\nexport type GetSpaceshipsQueryHookResult = ReturnType<\n  typeof useGetSpaceshipsQuery\n>;\nexport type GetSpaceshipsLazyQueryHookResult = ReturnType<\n  typeof useGetSpaceshipsLazyQuery\n>;\nexport type GetSpaceshipsQueryResult = Apollo.QueryResult<\n  GetSpaceshipsQuery,\n  GetSpaceshipsQueryVariables\n>;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst styles = makeStyles((theme) => ({\n  titleRoot: {\n    paddingBottom: 5,\n  },\n  titleText: {\n    ...theme.hv.typography.highlightText,\n  },\n  content: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justify: \"flex-start\",\n    paddingBottom: \"0px !important\",\n  },\n  indicatorIcon: {\n    marginLeft: theme.hv.spacing.sm,\n    marginRight: theme.hv.spacing.sm,\n  },\n  cardBorder: {\n    background: theme.hv.palette.accent.acce1,\n  },\n}));\nexport default styles;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { useTheme } from \"@material-ui/core\";\nimport { Top, Bottom } from \"@hitachivantara/uikit-react-icons\";\nimport {\n  HvTypography,\n  HvCard,\n  HvCardHeader,\n  HvCardContent,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport useStyles from \"./styles\";\n\ninterface CountKPIProps {\n  title: React.ReactNode;\n  count: number;\n  diff: number;\n}\n\nconst CountKPI: React.FC<CountKPIProps> = ({ title, count, diff }) => {\n  const { t } = useTranslation(\"common\");\n  const { hv } = useTheme();\n  const classes = useStyles();\n\n  return (\n    <HvCard\n      classes={{\n        sema0: classes.cardBorder,\n      }}\n      bgcolor=\"transparent\"\n    >\n      <HvCardHeader\n        title={title}\n        classes={{\n          root: classes.titleRoot,\n          title: classes.titleText,\n        }}\n      />\n      <HvCardContent className={classes.content}>\n        <HvTypography variant=\"mTitle\">{count}</HvTypography>\n        {diff > 0 && (\n          <>\n            <Top\n              color={hv.palette.semantic.sema1}\n              className={classes.indicatorIcon}\n            />\n            <HvTypography variant=\"vizText\">{`${diff.toFixed(2)} ${t(\n              \"countKPI.more\"\n            )}`}</HvTypography>\n          </>\n        )}\n        {diff < 0 && (\n          <>\n            <Bottom\n              color={hv.palette.semantic.sema3}\n              className={classes.indicatorIcon}\n            />\n            <HvTypography variant=\"vizText\">{`${Math.abs(diff).toFixed(2)} ${t(\n              \"countKPI.less\"\n            )}`}</HvTypography>\n          </>\n        )}\n      </HvCardContent>\n    </HvCard>\n  );\n};\nexport default CountKPI;\n","import { makeStyles } from \"@material-ui/core\";\n\nconst styles = makeStyles((theme) => ({\n  titleRoot: {\n    paddingBottom: 5,\n  },\n  titleText: {\n    ...theme.hv.typography.highlightText,\n  },\n  content: {\n    display: \"flex\",\n    alignItems: \"center\",\n    justify: \"flex-start\",\n    paddingBottom: \"0px !important\",\n  },\n  contentText: {\n    textTransform: \"capitalize\",\n  },\n  indicatorIcon: {\n    marginLeft: theme.hv.spacing.sm,\n    marginRight: theme.hv.spacing.sm,\n  },\n}));\nexport default styles;\n","import React from \"react\";\nimport {\n  HvTypography,\n  HvCard,\n  HvCardHeader,\n  HvCardContent,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport useStyles from \"./styles\";\n\ninterface DetailsKPIProps {\n  title: string;\n  subtitle: React.ReactNode;\n}\n\nconst DetailsKPI: React.FC<DetailsKPIProps> = ({ title, subtitle }) => {\n  const classes = useStyles();\n\n  return (\n    <HvCard bgcolor=\"transparent\">\n      <HvCardHeader\n        title={title}\n        classes={{\n          root: classes.titleRoot,\n          title: classes.titleText,\n        }}\n      />\n      <HvCardContent className={classes.content}>\n        <HvTypography variant=\"normalText\" className={classes.contentText}>\n          {subtitle || \"-\"}\n        </HvTypography>\n      </HvCardContent>\n    </HvCard>\n  );\n};\nexport default DetailsKPI;\n","import React, { useCallback } from \"react\";\nimport { HvTable, TableColumn } from \"@hitachivantara/uikit-react-core\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { Film } from \"generated/graphql\";\n\ninterface FilmsTableProps {\n  data: Film[];\n}\n\nconst defaultSorted = [{ id: \"releaseDate\", desc: false }];\n\nconst FilmsTable: React.FC<FilmsTableProps> = ({ data }) => {\n  const { t } = useTranslation(\"characterDetails\");\n\n  const getColumns = useCallback(\n    (): TableColumn[] => [\n      {\n        headerText: t(\"accordion.films.table.columns.title\"),\n        accessor: \"title\",\n        cellType: \"alpha-numeric\",\n        minWidth: 200,\n        sortable: false,\n      },\n      {\n        headerText: t(\"accordion.films.table.columns.director\"),\n        accessor: \"director\",\n        cellType: \"alpha-numeric\",\n        minWidth: 200,\n        sortable: false,\n      },\n      {\n        headerText: t(\"accordion.films.table.columns.producers\"),\n        accessor: \"producers\",\n        cellType: \"alpha-numeric\",\n        format: ({ value }) => value.join(\", \"),\n        minWidth: 350,\n        sortable: false,\n      },\n      {\n        headerText: t(\"accordion.films.table.columns.releaseDate\"),\n        accessor: \"releaseDate\",\n        cellType: \"alpha-numeric\",\n        minWidth: 150,\n        sortable: true,\n      },\n    ],\n    [t]\n  );\n\n  return (\n    <HvTable\n      data={data}\n      columns={getColumns()}\n      showPagination={false}\n      resizable={false}\n      defaultSorted={defaultSorted}\n      showPageSize={false}\n    />\n  );\n};\n\nexport default FilmsTable;\n","export const avg = (values: number[]): number => {\n  if (!values || values.length === 0) {\n    return 0;\n  }\n  return (\n    values.reduce((a, b) => {\n      return a + b;\n    }) / values.length\n  );\n};\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useFilmCountQuery, FilmCountQuery } from \"generated/graphql\";\nimport { CountKPI } from \"components/common\";\nimport { avg } from \"lib/utils/measures\";\n\ninterface MovieCountKPIProps {\n  count: number;\n}\n\nconst MovieCountKPI: React.FC<MovieCountKPIProps> = ({ count }) => {\n  const { t } = useTranslation(\"characterDetails\");\n  const { data } = useFilmCountQuery();\n\n  const filmTotalCount: FilmCountQuery[] | undefined =\n    data?.allPeople?.people?.map(\n      (person) => person?.filmConnection?.totalCount as FilmCountQuery\n    );\n\n  const filmCountAvg = avg(filmTotalCount as number[]);\n\n  return (\n    <CountKPI\n      title={t(\"kpis.movieCountKPI.title\")}\n      count={count}\n      diff={count - filmCountAvg}\n    />\n  );\n};\nexport default MovieCountKPI;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useStarshipCountQuery, StarshipCountQuery } from \"generated/graphql\";\nimport { CountKPI } from \"components/common\";\nimport { avg } from \"lib/utils/measures\";\n\ninterface StarshipCountKPIProps {\n  count: number;\n}\n\nconst StarshipCountKPI: React.FC<StarshipCountKPIProps> = ({ count }) => {\n  const { t } = useTranslation(\"characterDetails\");\n  const { data } = useStarshipCountQuery();\n\n  const starshipCount: StarshipCountQuery[] | undefined =\n    data?.allPeople?.people?.map(\n      (person) => person?.starshipConnection?.totalCount as StarshipCountQuery\n    );\n\n  const starshipCountAvg = avg(starshipCount as number[]);\n\n  return (\n    <CountKPI\n      title={t(\"kpis.starshipCountKPI.title\")}\n      count={count}\n      diff={count - starshipCountAvg}\n    />\n  );\n};\nexport default StarshipCountKPI;\n","import React from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { HvTypography, HvGrid } from \"@hitachivantara/uikit-react-core\";\n\nimport { Starship } from \"generated/graphql\";\nimport { DetailsKPI } from \"components/common\";\n\nconst Content: React.FC<Starship> = ({\n  maxAtmospheringSpeed,\n  hyperdriveRating,\n  cargoCapacity,\n  MGLT,\n  consumables,\n  costInCredits,\n  crew,\n  passengers,\n  length,\n  pilotConnection,\n}) => {\n  const history = useHistory();\n  const { t } = useTranslation(\"characterDetails\");\n  const { id: characterID } = useParams<{ id: string }>();\n\n  const labels = {\n    maxAtmospheringSpeed: t(\n      \"accordion.starships.table.expand.maxAtmospheringSpeed\"\n    ),\n    hyperdriveRating: t(\"accordion.starships.table.expand.hyperdriveRating\"),\n    cargoCapacity: t(\"accordion.starships.table.expand.cargoCapacity\"),\n    MGLT: t(\"accordion.starships.table.expand.MGLT\"),\n    consumables: t(\"accordion.starships.table.expand.consumables\"),\n    costInCredits: t(\"accordion.starships.table.expand.costInCredits\"),\n    crew: t(\"accordion.starships.table.expand.crew\"),\n    passengers: t(\"accordion.starships.table.expand.passengers\"),\n    length: t(\"accordion.starships.table.expand.length\"),\n    otherCharacters: t(\"accordion.starships.table.expand.otherCharacters\"),\n  };\n\n  return (\n    <HvGrid container>\n      <HvGrid item>\n        <DetailsKPI\n          title={labels.maxAtmospheringSpeed}\n          subtitle={maxAtmospheringSpeed}\n        />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI\n          title={labels.hyperdriveRating}\n          subtitle={hyperdriveRating}\n        />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.cargoCapacity} subtitle={cargoCapacity} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.MGLT} subtitle={MGLT} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.consumables} subtitle={consumables} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.costInCredits} subtitle={costInCredits} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.crew} subtitle={crew} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.passengers} subtitle={passengers} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI title={labels.length} subtitle={length} />\n      </HvGrid>\n      <HvGrid item>\n        <DetailsKPI\n          title={labels.otherCharacters}\n          subtitle={pilotConnection?.pilots?.map(\n            (pilot) =>\n              pilot?.id !== characterID && (\n                <span key={pilot?.id}>\n                  <HvTypography\n                    variant=\"link\"\n                    component=\"a\"\n                    onClick={() =>\n                      history.push(`/star-wars/characters/${pilot?.id}`)\n                    }\n                  >\n                    {pilot?.name}\n                  </HvTypography>\n                  {pilotConnection?.pilots?.length ? `${\" \"}` : \"\"}\n                </span>\n              )\n          )}\n        />\n      </HvGrid>\n    </HvGrid>\n  );\n};\n\nconst expandContent = (data: object) => {\n  const startship: Starship = (data as Record<string, unknown>)\n    .original as Starship;\n\n  return <Content {...startship} />;\n};\n\nexport default expandContent;\n","import React, { useCallback, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HvTable, TableColumn } from \"@hitachivantara/uikit-react-core\";\n\nimport { Starship } from \"generated/graphql\";\nimport expandContent from \"./expandContent\";\n\ninterface StarshipsTableProps {\n  data: Starship[];\n}\n\nconst defaultSorted = [{ id: \"episodeID\", desc: false }];\n\nconst StarshipsTable: React.FC<StarshipsTableProps> = ({ data }) => {\n  const { t } = useTranslation(\"characterDetails\");\n\n  const labels = useMemo(\n    () => ({\n      name: t(\"accordion.starships.table.columns.name\"),\n      model: t(\"accordion.starships.table.columns.model\"),\n      class: t(\"accordion.starships.table.columns.class\"),\n      manufacturers: t(\"accordion.starships.table.columns.manufacturers\"),\n    }),\n    [t]\n  );\n\n  const getColumns = useCallback(\n    (): TableColumn[] => [\n      {\n        headerText: labels.name,\n        accessor: \"name\",\n        cellType: \"alpha-numeric\",\n        minWidth: 200,\n      },\n      {\n        headerText: labels.model,\n        accessor: \"model\",\n        cellType: \"alpha-numeric\",\n        minWidth: 250,\n      },\n      {\n        headerText: labels.class,\n        accessor: \"starshipClass\",\n        cellType: \"alpha-numeric\",\n        minWidth: 100,\n      },\n      {\n        headerText: labels.manufacturers,\n        accessor: \"manufacturers\",\n        cellType: \"alpha-numeric\",\n        format: ({ value }) => value.join(\", \"),\n        minWidth: 350,\n      },\n    ],\n    [labels.class, labels.manufacturers, labels.model, labels.name]\n  );\n\n  return (\n    <HvTable\n      data={data}\n      columns={getColumns()}\n      showPagination={false}\n      resizable={false}\n      defaultSorted={defaultSorted}\n      showPageSize={false}\n      sortable={false}\n      subElementTemplate={expandContent}\n    />\n  );\n};\n\nexport default StarshipsTable;\n","import React from \"react\";\nimport { useTranslation } from \"react-i18next\";\n\nimport { useVehicleCountQuery, VehicleCountQuery } from \"generated/graphql\";\nimport { CountKPI } from \"components/common\";\nimport { avg } from \"lib/utils/measures\";\n\ninterface VehicleCountKPIProps {\n  count: number;\n}\n\nconst VehicleCountKPI: React.FC<VehicleCountKPIProps> = ({ count }) => {\n  const { t } = useTranslation(\"characterDetails\");\n  const { data } = useVehicleCountQuery();\n\n  const vehicleCount: VehicleCountQuery[] | undefined =\n    data?.allPeople?.people?.map(\n      (person) => person?.vehicleConnection?.totalCount as VehicleCountQuery\n    );\n\n  const vehicleCountAvg = avg(vehicleCount as number[]);\n\n  return (\n    <CountKPI\n      title={t(\"kpis.vehicleCountKPI.title\")}\n      count={count}\n      diff={count - vehicleCountAvg}\n    />\n  );\n};\nexport default VehicleCountKPI;\n","import React from \"react\";\nimport { useHistory, useParams } from \"react-router-dom\";\nimport { useTranslation } from \"react-i18next\";\nimport { HvTypography, HvGrid } from \"@hitachivantara/uikit-react-core\";\n\nimport { Vehicle } from \"generated/graphql\";\nimport { DetailsKPI } from \"components/common\";\n\nconst expandContent = (data: object) => {\n  const vehicle: Vehicle = (data as Record<string, unknown>)\n    .original as Vehicle;\n\n  const Content: React.FC = () => {\n    const history = useHistory();\n    const { id: characterID } = useParams<{ id: string }>();\n    const { t } = useTranslation(\"characterDetails\");\n\n    const labels = {\n      cargoCapacity: t(\"accordion.vehicles.table.expand.cargoCapacity\"),\n      consumables: t(\"accordion.vehicles.table.expand.consumables\"),\n      costInCredits: t(\"accordion.vehicles.table.expand.costInCredits\"),\n      maxAtmospheringSpeed: t(\n        \"accordion.vehicles.table.expand.maxAtmospheringSpeed\"\n      ),\n      crew: t(\"accordion.vehicles.table.expand.crew\"),\n      passengers: t(\"accordion.vehicles.table.expand.passengers\"),\n      length: t(\"accordion.vehicles.table.expand.length\"),\n      otherCharacters: t(\"accordion.vehicles.table.expand.otherCharacters\"),\n    };\n\n    return (\n      <HvGrid container>\n        <HvGrid item>\n          <DetailsKPI\n            title={labels.cargoCapacity}\n            subtitle={vehicle.cargoCapacity}\n          />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI\n            title={labels.consumables}\n            subtitle={vehicle.consumables}\n          />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI\n            title={labels.costInCredits}\n            subtitle={vehicle.costInCredits}\n          />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI\n            title={labels.maxAtmospheringSpeed}\n            subtitle={vehicle.maxAtmospheringSpeed}\n          />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI title={labels.crew} subtitle={vehicle.crew} />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI title={labels.passengers} subtitle={vehicle.passengers} />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI title={labels.length} subtitle={vehicle.length} />\n        </HvGrid>\n        <HvGrid item>\n          <DetailsKPI\n            title={labels.otherCharacters}\n            subtitle={vehicle?.pilotConnection?.pilots?.map(\n              (pilot) =>\n                pilot?.id !== characterID && (\n                  <span key={pilot?.id}>\n                    <HvTypography\n                      variant=\"link\"\n                      component=\"a\"\n                      onClick={() =>\n                        history.push(`/star-wars/characters/${pilot?.id}`)\n                      }\n                    >\n                      {pilot?.name}\n                    </HvTypography>\n                    {vehicle?.pilotConnection?.pilots?.length ? `${\" \"}` : \"\"}\n                  </span>\n                )\n            )}\n          />\n        </HvGrid>\n      </HvGrid>\n    );\n  };\n  return <Content />;\n};\n\nexport default expandContent;\n","import React, { useCallback, useMemo } from \"react\";\nimport { useTranslation } from \"react-i18next\";\nimport { HvTable, TableColumn } from \"@hitachivantara/uikit-react-core\";\n\nimport { Vehicle } from \"generated/graphql\";\nimport expandContent from \"./expandContent\";\n\ninterface VehiclesTableProps {\n  data: Vehicle[];\n}\n\nconst defaultSorted = [{ id: \"episodeID\", desc: false }];\n\nconst VehiclesTable: React.FC<VehiclesTableProps> = ({ data }) => {\n  const { t } = useTranslation(\"characterDetails\");\n\n  const labels = useMemo(\n    () => ({\n      name: t(\"accordion.vehicles.table.columns.name\"),\n      model: t(\"accordion.vehicles.table.columns.model\"),\n      class: t(\"accordion.vehicles.table.columns.class\"),\n      manufacturers: t(\"accordion.vehicles.table.columns.manufacturers\"),\n    }),\n    [t]\n  );\n\n  const getColumns = useCallback(\n    (): TableColumn[] => [\n      {\n        headerText: labels.name,\n        accessor: \"name\",\n        cellType: \"alpha-numeric\",\n        minWidth: 200,\n      },\n      {\n        headerText: labels.model,\n        accessor: \"model\",\n        cellType: \"alpha-numeric\",\n        minWidth: 250,\n      },\n      {\n        headerText: labels.class,\n        accessor: \"vehicleClass\",\n        cellType: \"alpha-numeric\",\n        minWidth: 100,\n      },\n      {\n        headerText: labels.manufacturers,\n        accessor: \"manufacturers\",\n        cellType: \"alpha-numeric\",\n        format: ({ value }) => value.join(\", \"),\n        minWidth: 350,\n      },\n    ],\n    [labels.class, labels.manufacturers, labels.model, labels.name]\n  );\n\n  return (\n    <HvTable\n      data={data}\n      columns={getColumns()}\n      showPagination={false}\n      resizable={false}\n      defaultSorted={defaultSorted}\n      showPageSize={false}\n      sortable={false}\n      subElementTemplate={expandContent}\n    />\n  );\n};\n\nexport default VehiclesTable;\n","import { makeStyles } from \"@material-ui/core\";\n\nimport { HEADER_HEIGHT, SECOND_LEVEL_HEIGHT } from \"lib/utils/layout\";\n\nconst styles = makeStyles((theme) => ({\n  root: {\n    position: \"relative\",\n    paddingTop: 72,\n  },\n  title: {\n    paddingTop: theme.hv.spacing.xs,\n    marginBottom: theme.hv.spacing.md,\n    borderTop: `1px solid ${theme.hv.palette.atmosphere.atmo4}`,\n  },\n  icon: {\n    margin: `${theme.hv.spacing.md}px 0`,\n    border: `3px solid ${theme.hv.palette.atmosphere.atmo4}`,\n    borderRadius: 75,\n    width: 125,\n    height: 125,\n  },\n  globalActions: {\n    top: HEADER_HEIGHT,\n  },\n  hasSecondLevel: {\n    [theme.breakpoints.up(\"md\")]: {\n      top: `calc(${HEADER_HEIGHT}px + ${SECOND_LEVEL_HEIGHT}px + ${theme.hv.spacing.xs}px)`,\n    },\n  },\n}));\n\nexport default styles;\n","import React from \"react\";\nimport clsx from \"clsx\";\nimport { useTranslation } from \"react-i18next\";\nimport { useParams, useHistory, useLocation } from \"react-router-dom\";\nimport { Backwards, User } from \"@hitachivantara/uikit-react-icons\";\nimport {\n  HvButton,\n  HvGrid,\n  HvGlobalActions,\n  HvAccordion,\n} from \"@hitachivantara/uikit-react-core\";\n\nimport {\n  useGetCharacterQuery,\n  Person,\n  Film,\n  Starship,\n  Vehicle,\n} from \"generated/graphql\";\nimport {\n  MovieCountKPI,\n  StarshipCountKPI,\n  VehicleCountKPI,\n  StarshipsTable,\n  VehiclesTable,\n} from \"components/characters/characterDetails\";\nimport { DetailsKPI, FilmsTable } from \"components/common\";\nimport { Container } from \"components/layout\";\nimport { isTopLevelPage } from \"lib/utils/navigation\";\nimport useStyles from \"./styles\";\n\nconst CharacterDetails: React.FC = () => {\n  const { t } = useTranslation(\"characterDetails\");\n  const { pathname } = useLocation();\n  const { id } = useParams<{ id: string }>();\n  const { data } = useGetCharacterQuery({\n    variables: { id: id as never },\n  });\n  const { goBack } = useHistory();\n  const hasSecondLevel = !isTopLevelPage(pathname);\n\n  const person: Person | undefined = data?.person as Person;\n\n  const classes = useStyles();\n\n  return data ? (\n    <Container>\n      <HvGlobalActions\n        className={clsx(classes.globalActions, {\n          [classes.hasSecondLevel]: hasSecondLevel,\n        })}\n        position=\"fixed\"\n        title={person?.name}\n        backButton={\n          <HvButton aria-label=\"Back\" icon onClick={goBack}>\n            <Backwards />\n          </HvButton>\n        }\n      >\n        <HvButton>{t(\"globalActions.button\")}</HvButton>\n      </HvGlobalActions>\n      <HvGrid container className={classes.root}>\n        <HvGrid item xs={12}>\n          <HvGrid container>\n            <HvGrid item xs={12} md={3} lg={2}>\n              <HvGrid item container justifyContent=\"center\">\n                <User\n                  color=\"acce1\"\n                  iconSize=\"M\"\n                  className={classes.icon}\n                  height=\"48\"\n                  width=\"48\"\n                />\n              </HvGrid>\n            </HvGrid>\n            <HvGrid item xs={12} md={9} lg={10}>\n              <HvGrid container direction=\"row\">\n                <HvGrid item xs={12} sm={6} md={4} lg={2}>\n                  <MovieCountKPI\n                    count={person?.filmConnection?.totalCount || 0}\n                  />\n                </HvGrid>\n                <HvGrid item xs={12} sm={6} md={4} lg={2}>\n                  <StarshipCountKPI\n                    count={person?.starshipConnection?.totalCount || 0}\n                  />\n                </HvGrid>\n                <HvGrid item xs={12} sm={6} md={4} lg={2}>\n                  <VehicleCountKPI\n                    count={person?.vehicleConnection?.totalCount || 0}\n                  />\n                </HvGrid>\n                <HvGrid container item xs={12} />\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.birthYear\")}\n                    subtitle={person?.birthYear}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.homeworld\")}\n                    subtitle={person?.homeworld?.name}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.eyeColor\")}\n                    subtitle={person?.eyeColor}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.hairColor\")}\n                    subtitle={person?.hairColor}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.skinColor\")}\n                    subtitle={person?.skinColor}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.gender\")}\n                    subtitle={person?.gender}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.species\")}\n                    subtitle={person?.species?.name}\n                  />\n                </HvGrid>\n                <HvGrid item xs={6} md={4} lg={2}>\n                  <DetailsKPI\n                    title={t(\"details.height\")}\n                    subtitle={person?.height}\n                  />\n                </HvGrid>\n              </HvGrid>\n            </HvGrid>\n          </HvGrid>\n          <HvGrid container>\n            <HvGrid item xs={12} />\n          </HvGrid>\n          <HvGrid container>\n            <HvGrid item xs={12}>\n              <HvAccordion\n                label={t(\"accordion.films.title\")}\n                defaultExpanded\n                headingLevel={2}\n              >\n                <FilmsTable data={person?.filmConnection?.films as Film[]} />\n              </HvAccordion>\n            </HvGrid>\n            {!!person?.starshipConnection?.starships?.length && (\n              <HvGrid item xs={12}>\n                <HvAccordion\n                  label={t(\"accordion.starships.title\")}\n                  defaultExpanded\n                  headingLevel={2}\n                >\n                  <StarshipsTable\n                    data={person?.starshipConnection.starships as Starship[]}\n                  />\n                </HvAccordion>\n              </HvGrid>\n            )}\n            {!!person?.vehicleConnection?.vehicles?.length && (\n              <HvGrid item xs={12}>\n                <HvAccordion\n                  label={t(\"accordion.vehicles.title\")}\n                  defaultExpanded\n                  headingLevel={2}\n                >\n                  <VehiclesTable\n                    data={person?.vehicleConnection?.vehicles as Vehicle[]}\n                  />\n                </HvAccordion>\n              </HvGrid>\n            )}\n          </HvGrid>\n        </HvGrid>\n      </HvGrid>\n    </Container>\n  ) : null;\n};\n\nexport default CharacterDetails;\n"],"names":["defaultOptions","FilmCountDocument","gql","useFilmCountQuery","baseOptions","options","Apollo","StarshipCountDocument","useStarshipCountQuery","VehicleCountDocument","useVehicleCountQuery","GetPeopleDocument","useGetPeopleQuery","GetCharacterDocument","useGetCharacterQuery","makeStyles","theme","titleRoot","paddingBottom","titleText","hv","typography","highlightText","content","display","alignItems","justify","indicatorIcon","marginLeft","spacing","sm","marginRight","cardBorder","background","palette","accent","acce1","title","count","diff","t","useTranslation","useTheme","classes","useStyles","sema0","bgcolor","root","className","variant","Top","color","semantic","sema1","toFixed","Bottom","sema3","Math","abs","contentText","textTransform","subtitle","defaultSorted","id","desc","data","getColumns","useCallback","headerText","accessor","cellType","minWidth","sortable","format","value","join","columns","showPagination","resizable","showPageSize","avg","values","length","reduce","a","b","filmTotalCount","allPeople","people","map","person","filmConnection","totalCount","filmCountAvg","starshipCount","starshipConnection","starshipCountAvg","Content","maxAtmospheringSpeed","hyperdriveRating","cargoCapacity","MGLT","consumables","costInCredits","crew","passengers","pilotConnection","history","useHistory","characterID","useParams","labels","otherCharacters","container","item","pilots","pilot","component","onClick","push","name","startship","original","useMemo","model","class","manufacturers","subElementTemplate","expandContent","vehicleCount","vehicleConnection","vehicleCountAvg","vehicle","position","paddingTop","xs","marginBottom","md","borderTop","atmosphere","atmo4","icon","margin","border","borderRadius","width","height","globalActions","top","HEADER_HEIGHT","hasSecondLevel","breakpoints","up","SECOND_LEVEL_HEIGHT","pathname","useLocation","variables","goBack","isTopLevelPage","clsx","backButton","Backwards","lg","justifyContent","User","iconSize","direction","birthYear","homeworld","eyeColor","hairColor","skinColor","gender","species","label","defaultExpanded","headingLevel","films","starships","vehicles"],"sourceRoot":""}