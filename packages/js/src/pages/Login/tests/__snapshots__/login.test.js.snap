// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`<Login /> it matches the snapshot 1`] = `
<Component>
  <Provider
    store={
      Object {
        "clearActions": [Function],
        "dispatch": [Function],
        "getActions": [Function],
        "getState": [Function],
        "replaceReducer": [Function],
        "subscribe": [Function],
      }
    }
  >
    <HvProvider>
      <StylesProvider
        generateClassName={[Function]}
      >
        <ThemeProvider
          theme={
            Object {
              "breakpoints": Object {
                "between": [Function],
                "down": [Function],
                "keys": Array [
                  "xs",
                  "sm",
                  "md",
                  "lg",
                  "xl",
                ],
                "only": [Function],
                "up": [Function],
                "values": Object {
                  "lg": 1270,
                  "md": 960,
                  "sm": 600,
                  "xl": 1920,
                  "xs": 0,
                },
                "width": [Function],
              },
              "direction": "ltr",
              "hv": Object {
                "deprecated": Object {
                  "palette": Object {
                    "accent": Object {},
                    "atmosphere": Object {},
                    "base": Object {},
                    "semantic": Object {},
                    "support": Object {},
                  },
                  "typography": Object {},
                  "viz": Object {
                    "palette": Object {
                      "categorical": Object {},
                      "polarized": Object {},
                      "sequential": Object {},
                      "undefinedState": Object {},
                    },
                  },
                },
                "name": "dawn",
                "palette": Object {
                  "accent": Object {
                    "acce1": "#414141",
                    "acce2": "#2064B4",
                    "acce2h": "#477DBD",
                    "acce3": "#CC0000",
                  },
                  "atmosphere": Object {
                    "atmo1": "#FBFCFC",
                    "atmo2": "#F0F0F0",
                    "atmo3": "#E8E8E8",
                    "atmo4": "#CCCED0",
                    "atmo5": "#999999",
                  },
                  "base": Object {
                    "base1": "#FBFCFC",
                    "base2": "#414141",
                  },
                  "semantic": Object {
                    "sema1": "#59941B",
                    "sema10": "#CE703D",
                    "sema11": "#D36041",
                    "sema12": "#CF4E38",
                    "sema13": "#CB3B30",
                    "sema14": "#BA2626",
                    "sema15": "#6589CB",
                    "sema16": "#4D8AC0",
                    "sema17": "#3388B1",
                    "sema18": "#1A85A1",
                    "sema19": "#00838F",
                    "sema2": "#4D9284",
                    "sema20": "#F9E3C5",
                    "sema3": "#DB6B22",
                    "sema4": "#C62828",
                    "sema5": "#C51162",
                    "sema6": "#AA00FF",
                    "sema7": "#D3E3F6",
                    "sema8": "#DFECD1",
                    "sema9": "#F5D8D8",
                  },
                  "support": Object {
                    "supp1": "#0F8B8D",
                    "supp2": "#734B6D",
                    "supp3": "#4E7599",
                    "supp4": "#C19C31",
                    "supp5": "#546B6B",
                  },
                },
                "shadows": Array [
                  "none",
                  "0 2px 12px rgba(65,65,65,0.12)",
                ],
                "spacing": Object {
                  "lg": 60,
                  "md": 30,
                  "sm": 20,
                  "xl": 90,
                  "xs": 10,
                },
                "type": "light",
                "typography": Object {
                  "3xlTitle": Object {
                    "color": "#414141",
                    "fontSize": "42px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "52px",
                  },
                  "4xlTitle": Object {
                    "color": "#414141",
                    "fontSize": "52px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "60px",
                  },
                  "5xlTitle": Object {
                    "color": "#414141",
                    "fontSize": "52px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "60px",
                  },
                  "disabledText": Object {
                    "color": "#999999",
                    "fontSize": "12px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "16px",
                  },
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "highlightText": Object {
                    "color": "#414141",
                    "fontSize": "12px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "16px",
                  },
                  "lTitle": Object {
                    "color": "#414141",
                    "fontSize": "32px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "40px",
                  },
                  "link": Object {
                    "color": "#2064B4",
                    "fontSize": "12px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "16px",
                    "textDecoration": "underline",
                  },
                  "mTitle": Object {
                    "color": "#414141",
                    "fontSize": "22px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "30px",
                  },
                  "normalText": Object {
                    "color": "#414141",
                    "fontSize": "12px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "16px",
                  },
                  "placeholderText": Object {
                    "color": "#999999",
                    "fontSize": "12px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "16px",
                  },
                  "sTitle": Object {
                    "color": "#414141",
                    "fontSize": "22px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "30px",
                  },
                  "sectionTitle": Object {
                    "color": "#414141",
                    "fontSize": "14px",
                    "fontWeight": 400,
                    "letterSpacing": "0.32em",
                    "lineHeight": "18px",
                    "textTransform": "uppercase",
                  },
                  "selectedNavText": Object {
                    "color": "#CC0000",
                    "fontSize": "12px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "16px",
                  },
                  "vizText": Object {
                    "color": "#414141",
                    "fontSize": "10px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "15px",
                  },
                  "vizTextDisabled": Object {
                    "color": "#999999",
                    "fontSize": "10px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "15px",
                  },
                  "xlTitle": Object {
                    "color": "#414141",
                    "fontSize": "32px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "40px",
                  },
                  "xsInlineLink": Object {
                    "color": "#2064B4",
                    "fontSize": "10px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "15px",
                    "textDecoration": "underline",
                  },
                  "xsTitle": Object {
                    "color": "#414141",
                    "fontSize": "18px",
                    "fontWeight": 600,
                    "letterSpacing": "0.02em",
                    "lineHeight": "28px",
                  },
                  "xxlTitle": Object {
                    "color": "#414141",
                    "fontSize": "42px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "52px",
                  },
                  "xxsTitle": Object {
                    "color": "#414141",
                    "fontSize": "18px",
                    "fontWeight": 400,
                    "letterSpacing": "0.02em",
                    "lineHeight": "28px",
                  },
                },
                "viz": Object {
                  "palette": Object {
                    "categorical": Object {
                      "cviz1": "#6EAFFF",
                      "cviz10": "#EB7397",
                      "cviz11": "#33ABCC",
                      "cviz12": "#F8C169",
                      "cviz13": "#DE64BD",
                      "cviz14": "#419393",
                      "cviz15": "#F5996E",
                      "cviz16": "#528BBF",
                      "cviz17": "#EB95AF",
                      "cviz18": "#73BF9C",
                      "cviz19": "#B55984",
                      "cviz2": "#FFAB5C",
                      "cviz20": "#F7B552",
                      "cviz3": "#5CD1B2",
                      "cviz4": "#9672C1",
                      "cviz5": "#ED6868",
                      "cviz6": "#58C9DD",
                      "cviz7": "#FFDB70",
                      "cviz8": "#4AB573",
                      "cviz9": "#646A98",
                    },
                    "polarized": Object {
                      "cviz21": "#869F1E",
                      "cviz22": "#A4991C",
                      "cviz23": "#C4931A",
                      "cviz24": "#E68C17",
                      "cviz25": "#F27034",
                      "cviz26": "#FF5252",
                      "cviz27": "#EC3D57",
                      "cviz28": "#D8265D",
                      "sema1": "#59941B",
                      "sema5": "#C51162",
                    },
                    "sequential": Object {
                      "cviz1": "#2DB3E0",
                      "cviz1_100": "#E3F1F6",
                      "cviz1_200": "#CFEAF3",
                      "cviz1_300": "#BAE3F1",
                      "cviz1_400": "#A6DCEE",
                      "cviz1_500": "#92D5EC",
                      "cviz1_600": "#7ECEE9",
                      "cviz1_700": "#69C7E7",
                      "cviz1_800": "#55C0E4",
                      "cviz1_900": "#40B9E2",
                    },
                    "undefinedState": Object {
                      "atmo4": "#CCCED0",
                    },
                  },
                },
              },
              "hvSpacing": [Function],
              "mixins": Object {
                "gutters": [Function],
                "toolbar": Object {
                  "@media (min-width:0px) and (orientation: landscape)": Object {
                    "minHeight": 48,
                  },
                  "@media (min-width:600px)": Object {
                    "minHeight": 64,
                  },
                  "minHeight": 56,
                },
              },
              "overrides": Object {
                "MuiAppBar": Object {
                  "colorDefault": Object {
                    "backgroundColor": "#FBFCFC",
                    "contrastText": "#414141",
                  },
                  "root": Object {
                    "@media (min-width: 600px)": Object {
                      "height": "50px",
                    },
                    "borderTop": "4px solid #CC0000",
                  },
                },
                "MuiIconButton": Object {
                  "root": Object {
                    "&:focus": Object {
                      "boxShadow": "0 0 0 1px #52A8EC, 0 0 0 4px rgba(29,155,209,.3)",
                      "outlineColor": "#52A8EC",
                      "outlineOffset": "-1px",
                      "outlineStyle": "solid",
                      "outlineWidth": "0px",
                    },
                    "&:hover": Object {
                      "backgroundColor": "#E8E8E8",
                    },
                    "borderRadius": 0,
                    "padding": 0,
                  },
                },
                "MuiPaper": Object {
                  "root": Object {
                    "backgroundColor": "#FBFCFC",
                  },
                },
                "MuiToolbar": Object {
                  "dense": Object {
                    "minHeight": "46px",
                  },
                  "gutters": Object {
                    "@media (min-width:600px)": Object {
                      "paddingLeft": "20px",
                      "paddingRight": "20px",
                    },
                    "paddingLeft": "20px",
                    "paddingRight": "20px",
                  },
                  "root": Object {
                    "@media (min-width: 600px)": Object {
                      "minHeight": "46px",
                    },
                    "alignItems": "center",
                  },
                },
              },
              "palette": Object {
                "acce1": "#414141",
                "acce2": "#2064B4",
                "acce2h": "#477DBD",
                "acce3": "#CC0000",
                "action": Object {
                  "activatedOpacity": 0.12,
                  "active": "rgba(0, 0, 0, 0.54)",
                  "disabled": "rgba(0, 0, 0, 0.26)",
                  "disabledBackground": "rgba(0, 0, 0, 0.12)",
                  "disabledOpacity": 0.38,
                  "focus": "rgba(0, 0, 0, 0.12)",
                  "focusOpacity": 0.12,
                  "hover": "rgba(0, 0, 0, 0.04)",
                  "hoverOpacity": 0.04,
                  "selected": "rgba(0, 0, 0, 0.08)",
                  "selectedOpacity": 0.08,
                },
                "atmo1": "#FBFCFC",
                "atmo2": "#F0F0F0",
                "atmo3": "#E8E8E8",
                "atmo4": "#CCCED0",
                "atmo5": "#999999",
                "augmentColor": [Function],
                "background": Object {
                  "default": "#E8E8E8",
                  "paper": "#fff",
                },
                "base1": "#FBFCFC",
                "base2": "#414141",
                "common": Object {
                  "black": "#000",
                  "white": "#fff",
                },
                "contrastThreshold": 3,
                "divider": "rgba(0, 0, 0, 0.12)",
                "error": Object {
                  "contrastText": "#fff",
                  "dark": "#d32f2f",
                  "light": "#e57373",
                  "main": "#f44336",
                },
                "getContrastText": [Function],
                "grey": Object {
                  "100": "#f5f5f5",
                  "200": "#eeeeee",
                  "300": "#e0e0e0",
                  "400": "#bdbdbd",
                  "50": "#fafafa",
                  "500": "#9e9e9e",
                  "600": "#757575",
                  "700": "#616161",
                  "800": "#424242",
                  "900": "#212121",
                  "A100": "#d5d5d5",
                  "A200": "#aaaaaa",
                  "A400": "#303030",
                  "A700": "#616161",
                },
                "info": Object {
                  "contrastText": "#fff",
                  "dark": "#1976d2",
                  "light": "#64b5f6",
                  "main": "#2196f3",
                },
                "primary": Object {
                  "contrastText": "#fff",
                  "dark": "rgb(22, 70, 125)",
                  "light": "#477DBD",
                  "main": "#2064B4",
                },
                "secondary": Object {
                  "contrastText": "#fff",
                  "dark": "rgb(45, 45, 45)",
                  "light": "#999999",
                  "main": "#414141",
                },
                "sema1": "#59941B",
                "sema10": "#CE703D",
                "sema11": "#D36041",
                "sema12": "#CF4E38",
                "sema13": "#CB3B30",
                "sema14": "#BA2626",
                "sema15": "#6589CB",
                "sema16": "#4D8AC0",
                "sema17": "#3388B1",
                "sema18": "#1A85A1",
                "sema19": "#00838F",
                "sema2": "#4D9284",
                "sema20": "#F9E3C5",
                "sema3": "#DB6B22",
                "sema4": "#C62828",
                "sema5": "#C51162",
                "sema6": "#AA00FF",
                "sema7": "#D3E3F6",
                "sema8": "#DFECD1",
                "sema9": "#F5D8D8",
                "success": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#388e3c",
                  "light": "#81c784",
                  "main": "#4caf50",
                },
                "supp1": "#0F8B8D",
                "supp2": "#734B6D",
                "supp3": "#4E7599",
                "supp4": "#C19C31",
                "supp5": "#546B6B",
                "text": Object {
                  "disabled": "#999999",
                  "hint": "rgba(0, 0, 0, 0.38)",
                  "primary": "#414141",
                  "secondary": "rgba(0, 0, 0, 0.54)",
                },
                "tonalOffset": 0.2,
                "type": "light",
                "warning": Object {
                  "contrastText": "rgba(0, 0, 0, 0.87)",
                  "dark": "#f57c00",
                  "light": "#ffb74d",
                  "main": "#ff9800",
                },
              },
              "props": Object {
                "MuiButtonBase": Object {
                  "disableRipple": true,
                },
                "MuiInput": Object {
                  "disableUnderline": true,
                },
              },
              "shadows": Array [
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
                "none",
              ],
              "shape": Object {
                "borderRadius": 0,
              },
              "spacing": [Function],
              "transitions": Object {
                "create": [Function],
                "duration": Object {
                  "complex": 375,
                  "enteringScreen": 225,
                  "leavingScreen": 195,
                  "short": 250,
                  "shorter": 200,
                  "shortest": 150,
                  "standard": 300,
                },
                "easing": Object {
                  "easeIn": "cubic-bezier(0.4, 0, 1, 1)",
                  "easeInOut": "cubic-bezier(0.4, 0, 0.2, 1)",
                  "easeOut": "cubic-bezier(0.0, 0, 0.2, 1)",
                  "sharp": "cubic-bezier(0.4, 0, 0.6, 1)",
                },
                "getAutoHeightDuration": [Function],
              },
              "typography": Object {
                "body1": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "12px",
                  "fontWeight": 400,
                  "letterSpacing": "0.02em",
                  "lineHeight": "16px",
                },
                "body2": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "12px",
                  "fontWeight": 400,
                  "letterSpacing": "0.02em",
                  "lineHeight": "16px",
                },
                "button": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "12px",
                  "fontWeight": 600,
                  "letterSpacing": "0.02em",
                  "lineHeight": "16px",
                  "textTransform": "uppercase",
                },
                "caption": Object {
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 1.66,
                },
                "fontFamily": Array [
                  "'Open Sans'",
                  "Arial",
                  "Helvetica",
                  "sans-serif",
                ],
                "fontSize": 14,
                "fontWeightBold": 700,
                "fontWeightLight": 300,
                "fontWeightMedium": 500,
                "fontWeightRegular": 400,
                "h1": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "32px",
                  "fontWeight": 600,
                  "letterSpacing": "0.02em",
                  "lineHeight": "40px",
                },
                "h2": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "32px",
                  "fontWeight": 400,
                  "letterSpacing": "0.02em",
                  "lineHeight": "40px",
                },
                "h3": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "22px",
                  "fontWeight": 600,
                  "letterSpacing": "0.02em",
                  "lineHeight": "30px",
                },
                "h4": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "22px",
                  "fontWeight": 400,
                  "letterSpacing": "0.02em",
                  "lineHeight": "30px",
                },
                "h5": Object {
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "1.5rem",
                  "fontWeight": 400,
                  "lineHeight": 1.334,
                },
                "h6": Object {
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "1.25rem",
                  "fontWeight": 500,
                  "lineHeight": 1.6,
                },
                "htmlFontSize": 16,
                "overline": Object {
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "0.75rem",
                  "fontWeight": 400,
                  "lineHeight": 2.66,
                  "textTransform": "uppercase",
                },
                "pxToRem": [Function],
                "round": [Function],
                "subtitle1": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "12px",
                  "fontWeight": 600,
                  "letterSpacing": "0.02em",
                  "lineHeight": "16px",
                },
                "subtitle2": Object {
                  "color": "#414141",
                  "fontFamily": Array [
                    "'Open Sans'",
                    "Arial",
                    "Helvetica",
                    "sans-serif",
                  ],
                  "fontSize": "12px",
                  "fontWeight": 600,
                  "letterSpacing": "0.02em",
                  "lineHeight": "16px",
                },
                "suppressDeprecationWarnings": true,
              },
              "zIndex": Object {
                "appBar": 1100,
                "drawer": 1200,
                "mobileStepper": 1000,
                "modal": 1300,
                "snackbar": 1400,
                "speedDial": 1050,
                "tooltip": 1500,
              },
              Symbol(mui.nested): false,
            }
          }
        >
          <CssBaseline />
          <MemoryRouter
            initialEntries={
              Array [
                Object {
                  "key": "testKey",
                  "pathname": "/",
                },
              ]
            }
          >
            <Router
              history={
                Object {
                  "action": "POP",
                  "block": [Function],
                  "canGo": [Function],
                  "createHref": [Function],
                  "entries": Array [
                    Object {
                      "hash": "",
                      "key": "testKey",
                      "pathname": "/",
                      "search": "",
                    },
                  ],
                  "go": [Function],
                  "goBack": [Function],
                  "goForward": [Function],
                  "index": 0,
                  "length": 1,
                  "listen": [Function],
                  "location": Object {
                    "hash": "",
                    "key": "testKey",
                    "pathname": "/",
                    "search": "",
                  },
                  "push": [Function],
                  "replace": [Function],
                }
              }
            >
              <WithStyles(Connect(Component))>
                <Connect(Component)
                  classes={
                    Object {
                      "container": "Login-container-1",
                      "item": "Login-item-2",
                      "root": "Login-root-3",
                    }
                  }
                >
                  <Component
                    auth={
                      Object {
                        "isAuthed": false,
                      }
                    }
                    classes={
                      Object {
                        "container": "Login-container-1",
                        "item": "Login-item-2",
                        "root": "Login-root-3",
                      }
                    }
                    login={[Function]}
                    recover={[Function]}
                    setActiveForm={[Function]}
                  >
                    <WithStyles(Connect(Header))>
                      <Connect(Header)
                        classes={Object {}}
                      >
                        <Header
                          auth={
                            Object {
                              "isAuthed": false,
                            }
                          }
                          classes={Object {}}
                          getPages={[Function]}
                          logout={[Function]}
                          pages={
                            Object {
                              "data": Array [],
                            }
                          }
                          redirect={[Function]}
                          router={
                            Object {
                              "location": Object {
                                "pathname": "/",
                              },
                            }
                          }
                        >
                          <WithStyles(HvHeader)>
                            <HvHeader
                              classes={
                                Object {
                                  "backgroundColor": "HvHeader-backgroundColor",
                                  "header": "HvHeader-header",
                                  "root": "HvHeader-root",
                                }
                              }
                            >
                              <WithStyles(ForwardRef(AppBar))
                                classes={
                                  Object {
                                    "colorPrimary": "HvHeader-backgroundColor",
                                    "root": "HvHeader-root",
                                  }
                                }
                                position="fixed"
                              >
                                <ForwardRef(AppBar)
                                  classes={
                                    Object {
                                      "colorDefault": "MuiAppBar-colorDefault",
                                      "colorInherit": "MuiAppBar-colorInherit",
                                      "colorPrimary": "MuiAppBar-colorPrimary HvHeader-backgroundColor",
                                      "colorSecondary": "MuiAppBar-colorSecondary",
                                      "colorTransparent": "MuiAppBar-colorTransparent",
                                      "positionAbsolute": "MuiAppBar-positionAbsolute",
                                      "positionFixed": "MuiAppBar-positionFixed",
                                      "positionRelative": "MuiAppBar-positionRelative",
                                      "positionStatic": "MuiAppBar-positionStatic",
                                      "positionSticky": "MuiAppBar-positionSticky",
                                      "root": "MuiAppBar-root HvHeader-root",
                                    }
                                  }
                                  position="fixed"
                                >
                                  <WithStyles(ForwardRef(Paper))
                                    className="MuiAppBar-root HvHeader-root MuiAppBar-positionFixed MuiAppBar-colorPrimary HvHeader-backgroundColor mui-fixed"
                                    component="header"
                                    elevation={4}
                                    square={true}
                                  >
                                    <ForwardRef(Paper)
                                      className="MuiAppBar-root HvHeader-root MuiAppBar-positionFixed MuiAppBar-colorPrimary HvHeader-backgroundColor mui-fixed"
                                      classes={
                                        Object {
                                          "elevation0": "MuiPaper-elevation0",
                                          "elevation1": "MuiPaper-elevation1",
                                          "elevation10": "MuiPaper-elevation10",
                                          "elevation11": "MuiPaper-elevation11",
                                          "elevation12": "MuiPaper-elevation12",
                                          "elevation13": "MuiPaper-elevation13",
                                          "elevation14": "MuiPaper-elevation14",
                                          "elevation15": "MuiPaper-elevation15",
                                          "elevation16": "MuiPaper-elevation16",
                                          "elevation17": "MuiPaper-elevation17",
                                          "elevation18": "MuiPaper-elevation18",
                                          "elevation19": "MuiPaper-elevation19",
                                          "elevation2": "MuiPaper-elevation2",
                                          "elevation20": "MuiPaper-elevation20",
                                          "elevation21": "MuiPaper-elevation21",
                                          "elevation22": "MuiPaper-elevation22",
                                          "elevation23": "MuiPaper-elevation23",
                                          "elevation24": "MuiPaper-elevation24",
                                          "elevation3": "MuiPaper-elevation3",
                                          "elevation4": "MuiPaper-elevation4",
                                          "elevation5": "MuiPaper-elevation5",
                                          "elevation6": "MuiPaper-elevation6",
                                          "elevation7": "MuiPaper-elevation7",
                                          "elevation8": "MuiPaper-elevation8",
                                          "elevation9": "MuiPaper-elevation9",
                                          "outlined": "MuiPaper-outlined",
                                          "root": "MuiPaper-root",
                                          "rounded": "MuiPaper-rounded",
                                        }
                                      }
                                      component="header"
                                      elevation={4}
                                      square={true}
                                    >
                                      <header
                                        className="MuiPaper-root MuiAppBar-root HvHeader-root MuiAppBar-positionFixed MuiAppBar-colorPrimary HvHeader-backgroundColor mui-fixed MuiPaper-elevation4"
                                      >
                                        <div
                                          className="HvHeader-header"
                                        >
                                          <WithStyles(HvButton)
                                            icon={true}
                                            onClick={[Function]}
                                          >
                                            <HvButton
                                              classes={
                                                Object {
                                                  "focusVisible": "HvButton-focusVisible",
                                                  "ghost": "HvButton-ghost",
                                                  "ghostDisabled": "HvButton-ghostDisabled",
                                                  "ghostSVG": "HvButton-ghostSVG",
                                                  "icon": "HvButton-icon",
                                                  "iconSVG": "HvButton-iconSVG",
                                                  "primary": "HvButton-primary",
                                                  "primaryDisabled": "HvButton-primaryDisabled",
                                                  "primarySVG": "HvButton-primarySVG",
                                                  "root": "HvButton-root",
                                                  "secondary": "HvButton-secondary",
                                                  "secondaryDisabled": "HvButton-secondaryDisabled",
                                                  "secondarySVG": "HvButton-secondarySVG",
                                                  "semantic": "HvButton-semantic",
                                                  "semanticDisabled": "HvButton-semanticDisabled",
                                                  "semanticSVG": "HvButton-semanticSVG",
                                                  "startIcon": "HvButton-startIcon",
                                                }
                                              }
                                              icon={true}
                                              onClick={[Function]}
                                            >
                                              <WithStyles(ForwardRef(Button))
                                                className="HvButton-icon HvButton-ghostSVG"
                                                classes={
                                                  Object {
                                                    "containedPrimary": "HvButton-primary",
                                                    "disabled": "HvButton-ghostDisabled",
                                                    "outlinedPrimary": "HvButton-secondary",
                                                    "root": "HvButton-root",
                                                    "startIcon": "HvButton-startIcon",
                                                    "textPrimary": "HvButton-ghost",
                                                  }
                                                }
                                                color="primary"
                                                disableRipple={true}
                                                focusVisibleClassName="HvButton-focusVisible"
                                                onClick={[Function]}
                                                variant="text"
                                              >
                                                <ForwardRef(Button)
                                                  className="HvButton-icon HvButton-ghostSVG"
                                                  classes={
                                                    Object {
                                                      "colorInherit": "MuiButton-colorInherit",
                                                      "contained": "MuiButton-contained",
                                                      "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                                      "containedSecondary": "MuiButton-containedSecondary",
                                                      "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                      "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                      "disableElevation": "MuiButton-disableElevation",
                                                      "disabled": "Mui-disabled HvButton-ghostDisabled",
                                                      "endIcon": "MuiButton-endIcon",
                                                      "focusVisible": "Mui-focusVisible",
                                                      "fullWidth": "MuiButton-fullWidth",
                                                      "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                      "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                      "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                      "label": "MuiButton-label",
                                                      "outlined": "MuiButton-outlined",
                                                      "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                                      "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                      "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                      "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                      "root": "MuiButton-root HvButton-root",
                                                      "sizeLarge": "MuiButton-sizeLarge",
                                                      "sizeSmall": "MuiButton-sizeSmall",
                                                      "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                                      "text": "MuiButton-text",
                                                      "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                                      "textSecondary": "MuiButton-textSecondary",
                                                      "textSizeLarge": "MuiButton-textSizeLarge",
                                                      "textSizeSmall": "MuiButton-textSizeSmall",
                                                    }
                                                  }
                                                  color="primary"
                                                  disableRipple={true}
                                                  focusVisibleClassName="HvButton-focusVisible"
                                                  onClick={[Function]}
                                                  variant="text"
                                                >
                                                  <WithStyles(ForwardRef(ButtonBase))
                                                    className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                    component="button"
                                                    disableRipple={true}
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <ForwardRef(ButtonBase)
                                                      className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                      classes={
                                                        Object {
                                                          "disabled": "Mui-disabled",
                                                          "focusVisible": "Mui-focusVisible",
                                                          "root": "MuiButtonBase-root",
                                                        }
                                                      }
                                                      component="button"
                                                      disableRipple={true}
                                                      disabled={false}
                                                      focusRipple={true}
                                                      focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                      onClick={[Function]}
                                                      type="button"
                                                    >
                                                      <button
                                                        className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                        disabled={false}
                                                        onBlur={[Function]}
                                                        onClick={[Function]}
                                                        onDragLeave={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onKeyUp={[Function]}
                                                        onMouseDown={[Function]}
                                                        onMouseLeave={[Function]}
                                                        onMouseUp={[Function]}
                                                        onTouchEnd={[Function]}
                                                        onTouchMove={[Function]}
                                                        onTouchStart={[Function]}
                                                        tabIndex={0}
                                                        type="button"
                                                      >
                                                        <span
                                                          className="MuiButton-label"
                                                        >
                                                          <Menu>
                                                            <HvIconBase
                                                              iconSize="S"
                                                              name="Menu"
                                                            >
                                                              <div
                                                                className="HvIconBase-root HvIconBase-s"
                                                                name="Menu"
                                                              >
                                                                <svg
                                                                  focusable={false}
                                                                  height={16}
                                                                  viewBox="0 0 16 16"
                                                                  width={16}
                                                                  xmlns="http://www.w3.org/2000/svg"
                                                                >
                                                                  <path
                                                                    className="color0"
                                                                    d="M0 7.4h16v1H0zM0 3h16V2H0zm0 11h16v-1H0z"
                                                                    fill="#414141"
                                                                  />
                                                                </svg>
                                                              </div>
                                                            </HvIconBase>
                                                          </Menu>
                                                        </span>
                                                      </button>
                                                    </ForwardRef(ButtonBase)>
                                                  </WithStyles(ForwardRef(ButtonBase))>
                                                </ForwardRef(Button)>
                                              </WithStyles(ForwardRef(Button))>
                                            </HvButton>
                                          </WithStyles(HvButton)>
                                          <WithStyles(Brand)
                                            logo={<_default />}
                                            name="components.layout.header.appName"
                                          >
                                            <Brand
                                              classes={
                                                Object {
                                                  "root": "HvHeaderBrand-root",
                                                  "separator": "HvHeaderBrand-separator",
                                                }
                                              }
                                              logo={<_default />}
                                              name="components.layout.header.appName"
                                            >
                                              <div
                                                className="HvHeaderBrand-root"
                                              >
                                                <_default>
                                                  <HitachiLogo
                                                    style={
                                                      Object {
                                                        "height": 20,
                                                        "width": 72,
                                                      }
                                                    }
                                                  >
                                                    <svg
                                                      height={16}
                                                      style={
                                                        Object {
                                                          "height": 20,
                                                          "width": 72,
                                                        }
                                                      }
                                                      version="1.1"
                                                      viewBox="0 0 80 16"
                                                      width={80}
                                                      x="0px"
                                                      xmlSpace="preserve"
                                                      xmlns="http://www.w3.org/2000/svg"
                                                      xmlnsXlink="http://www.w3.org/1999/xlink"
                                                      y="0px"
                                                    >
                                                      <path
                                                        d="M63.6,2.5c0,0,0,4.8,0,4.7H70c0,0,0-4.7,0-4.7s3.1,0,3.1,0c0,0,0,11.8,0,11.9H70c0,0,0-5.2,0-5.2c0,0-6.3,0-6.3,0c0,0,0,5.2,0,5.2h-3.1c0,0,0-11.9,0-11.9C60.5,2.5,63.6,2.5,63.6,2.5z"
                                                        fill="#414141"
                                                      />
                                                      <path
                                                        d="M33.9,2.5c0,0,0,2,0,2h-4.8v9.8h-3.1V4.5h-4.8v-2C21.1,2.5,33.9,2.5,33.9,2.5z"
                                                        fill="#414141"
                                                      />
                                                      <path
                                                        d="M46,14.3c0,0-3.5,0-3.5,0l-1-2.6h-5.9c0,0-1,2.6-1,2.6h-3.5l5.5-11.9h3.8L46,14.3z M38.6,4.5l-2.2,5.4h4.4L38.6,4.5"
                                                        fill="#414141"
                                                      />
                                                      <rect
                                                        fill="#414141"
                                                        height="11.9"
                                                        width="3.1"
                                                        x="75.6"
                                                        y="2.5"
                                                      />
                                                      <path
                                                        d="M4.9,2.5c0,0,0,4.8,0,4.7h6.3c0,0,0-4.7,0-4.7s3.1,0,3.1,0c0,0,0,11.8,0,11.9h-3.1c0,0,0-5.2,0-5.2c0,0-6.3,0-6.3,0c0,0,0,5.2,0,5.2H1.7c0,0,0-11.9,0-11.9C1.7,2.5,4.9,2.5,4.9,2.5z"
                                                        fill="#414141"
                                                      />
                                                      <rect
                                                        fill="#414141"
                                                        height="11.9"
                                                        width="3.1"
                                                        x="16.9"
                                                        y="2.5"
                                                      />
                                                      <path
                                                        d="M45.9,11c-0.3-0.8-0.4-1.6-0.4-2.5c0-1.2,0.2-2.4,0.8-3.4c0.6-1,1.5-1.8,2.7-2.2 c1.1-0.4,2.2-0.6,3.5-0.6c1.4,0,2.7,0.3,4,0.8c1.1,0.5,2,1.5,2.2,2.7c0.1,0.3,0.1,0.5,0.1,0.8h-3.3c0-0.3-0.1-0.6-0.2-0.9 c-0.3-0.6-0.8-1.2-1.5-1.4c-0.4-0.1-0.9-0.2-1.4-0.2c-0.5,0-1.1,0.1-1.5,0.3c-0.8,0.3-1.4,0.9-1.7,1.7 c-0.3,0.8-0.4,1.6-0.4,2.5c0,0.7,0.1,1.4,0.3,2.1c0.2,0.9,0.9,1.6,1.7,1.9c0.5,0.2,1.1,0.3,1.7,0.3c0.5,0,1-0.1,1.5-0.2 c0.6-0.2,1.1-0.6,1.4-1.2c0.2-0.4,0.3-0.8,0.3-1.3h3.3c0,0.4-0.1,0.8-0.2,1.1c-0.3,1.2-1.1,2.2-2.2,2.6 c-1.2,0.5-2.6,0.8-4,0.8c-1.1,0-2.2-0.2-3.2-0.5C47.8,13.6,46.5,12.5,45.9,11z"
                                                        fill="#414141"
                                                      />
                                                    </svg>
                                                  </HitachiLogo>
                                                </_default>
                                                <div
                                                  className="HvHeaderBrand-separator"
                                                />
                                                <WithStyles(ForwardRef)
                                                  variant="highlightText"
                                                >
                                                  <ForwardRef
                                                    classes={
                                                      Object {
                                                        "3xlTitle": "HvTypography-3xlTitle",
                                                        "4xlTitle": "HvTypography-4xlTitle",
                                                        "5xlTitle": "HvTypography-5xlTitle",
                                                        "disabledText": "HvTypography-disabledText",
                                                        "highlightText": "HvTypography-highlightText",
                                                        "lTitle": "HvTypography-lTitle",
                                                        "link": "HvTypography-link",
                                                        "mTitle": "HvTypography-mTitle",
                                                        "noWrap": "HvTypography-noWrap",
                                                        "normalText": "HvTypography-normalText",
                                                        "placeholderText": "HvTypography-placeholderText",
                                                        "root": "HvTypography-root",
                                                        "sTitle": "HvTypography-sTitle",
                                                        "sectionTitle": "HvTypography-sectionTitle",
                                                        "selectedNavText": "HvTypography-selectedNavText",
                                                        "vizText": "HvTypography-vizText",
                                                        "vizTextDisabled": "HvTypography-vizTextDisabled",
                                                        "xlTitle": "HvTypography-xlTitle",
                                                        "xsInlineLink": "HvTypography-xsInlineLink",
                                                        "xsTitle": "HvTypography-xsTitle",
                                                        "xxlTitle": "HvTypography-xxlTitle",
                                                        "xxsTitle": "HvTypography-xxsTitle",
                                                      }
                                                    }
                                                    variant="highlightText"
                                                  >
                                                    <p
                                                      className="HvTypography-root HvTypography-highlightText"
                                                    >
                                                      components.layout.header.appName
                                                    </p>
                                                  </ForwardRef>
                                                </WithStyles(ForwardRef)>
                                              </div>
                                            </Brand>
                                          </WithStyles(Brand)>
                                          <WithStyles(Actions)>
                                            <Actions
                                              classes={
                                                Object {
                                                  "root": "HvHeaderActions-root",
                                                }
                                              }
                                            >
                                              <div
                                                className="HvHeaderActions-root"
                                              >
                                                <WithStyles(HvButton)
                                                  aria-label="Change theme"
                                                  icon={true}
                                                  onClick={[Function]}
                                                >
                                                  <HvButton
                                                    aria-label="Change theme"
                                                    classes={
                                                      Object {
                                                        "focusVisible": "HvButton-focusVisible",
                                                        "ghost": "HvButton-ghost",
                                                        "ghostDisabled": "HvButton-ghostDisabled",
                                                        "ghostSVG": "HvButton-ghostSVG",
                                                        "icon": "HvButton-icon",
                                                        "iconSVG": "HvButton-iconSVG",
                                                        "primary": "HvButton-primary",
                                                        "primaryDisabled": "HvButton-primaryDisabled",
                                                        "primarySVG": "HvButton-primarySVG",
                                                        "root": "HvButton-root",
                                                        "secondary": "HvButton-secondary",
                                                        "secondaryDisabled": "HvButton-secondaryDisabled",
                                                        "secondarySVG": "HvButton-secondarySVG",
                                                        "semantic": "HvButton-semantic",
                                                        "semanticDisabled": "HvButton-semanticDisabled",
                                                        "semanticSVG": "HvButton-semanticSVG",
                                                        "startIcon": "HvButton-startIcon",
                                                      }
                                                    }
                                                    icon={true}
                                                    onClick={[Function]}
                                                  >
                                                    <WithStyles(ForwardRef(Button))
                                                      aria-label="Change theme"
                                                      className="HvButton-icon HvButton-ghostSVG"
                                                      classes={
                                                        Object {
                                                          "containedPrimary": "HvButton-primary",
                                                          "disabled": "HvButton-ghostDisabled",
                                                          "outlinedPrimary": "HvButton-secondary",
                                                          "root": "HvButton-root",
                                                          "startIcon": "HvButton-startIcon",
                                                          "textPrimary": "HvButton-ghost",
                                                        }
                                                      }
                                                      color="primary"
                                                      disableRipple={true}
                                                      focusVisibleClassName="HvButton-focusVisible"
                                                      onClick={[Function]}
                                                      variant="text"
                                                    >
                                                      <ForwardRef(Button)
                                                        aria-label="Change theme"
                                                        className="HvButton-icon HvButton-ghostSVG"
                                                        classes={
                                                          Object {
                                                            "colorInherit": "MuiButton-colorInherit",
                                                            "contained": "MuiButton-contained",
                                                            "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                                            "containedSecondary": "MuiButton-containedSecondary",
                                                            "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                            "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                            "disableElevation": "MuiButton-disableElevation",
                                                            "disabled": "Mui-disabled HvButton-ghostDisabled",
                                                            "endIcon": "MuiButton-endIcon",
                                                            "focusVisible": "Mui-focusVisible",
                                                            "fullWidth": "MuiButton-fullWidth",
                                                            "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                            "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                            "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                            "label": "MuiButton-label",
                                                            "outlined": "MuiButton-outlined",
                                                            "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                                            "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                            "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                            "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                            "root": "MuiButton-root HvButton-root",
                                                            "sizeLarge": "MuiButton-sizeLarge",
                                                            "sizeSmall": "MuiButton-sizeSmall",
                                                            "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                                            "text": "MuiButton-text",
                                                            "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                                            "textSecondary": "MuiButton-textSecondary",
                                                            "textSizeLarge": "MuiButton-textSizeLarge",
                                                            "textSizeSmall": "MuiButton-textSizeSmall",
                                                          }
                                                        }
                                                        color="primary"
                                                        disableRipple={true}
                                                        focusVisibleClassName="HvButton-focusVisible"
                                                        onClick={[Function]}
                                                        variant="text"
                                                      >
                                                        <WithStyles(ForwardRef(ButtonBase))
                                                          aria-label="Change theme"
                                                          className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                          component="button"
                                                          disableRipple={true}
                                                          disabled={false}
                                                          focusRipple={true}
                                                          focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                          onClick={[Function]}
                                                          type="button"
                                                        >
                                                          <ForwardRef(ButtonBase)
                                                            aria-label="Change theme"
                                                            className="MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                            classes={
                                                              Object {
                                                                "disabled": "Mui-disabled",
                                                                "focusVisible": "Mui-focusVisible",
                                                                "root": "MuiButtonBase-root",
                                                              }
                                                            }
                                                            component="button"
                                                            disableRipple={true}
                                                            disabled={false}
                                                            focusRipple={true}
                                                            focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                            onClick={[Function]}
                                                            type="button"
                                                          >
                                                            <button
                                                              aria-label="Change theme"
                                                              className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-text HvButton-icon HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                              disabled={false}
                                                              onBlur={[Function]}
                                                              onClick={[Function]}
                                                              onDragLeave={[Function]}
                                                              onFocus={[Function]}
                                                              onKeyDown={[Function]}
                                                              onKeyUp={[Function]}
                                                              onMouseDown={[Function]}
                                                              onMouseLeave={[Function]}
                                                              onMouseUp={[Function]}
                                                              onTouchEnd={[Function]}
                                                              onTouchMove={[Function]}
                                                              onTouchStart={[Function]}
                                                              tabIndex={0}
                                                              type="button"
                                                            >
                                                              <span
                                                                className="MuiButton-label"
                                                              >
                                                                <ThemeSwitcher>
                                                                  <HvIconBase
                                                                    iconSize="S"
                                                                    name="ThemeSwitcher"
                                                                  >
                                                                    <div
                                                                      className="HvIconBase-root HvIconBase-s"
                                                                      name="ThemeSwitcher"
                                                                    >
                                                                      <svg
                                                                        focusable={false}
                                                                        height={16}
                                                                        viewBox="0 0 16 16"
                                                                        width={16}
                                                                        xmlns="http://www.w3.org/2000/svg"
                                                                      >
                                                                        <path
                                                                          className="color0"
                                                                          d="M14.54626 12.57422c.0268-.03833.05713-.07373.08326-.11231.11-.16284.20837-.33239.30584-.50244.03162-.05517.06751-.1073.09784-.16321.086-.15881.16034-.32287.23535-.48693.03364-.07349.07209-.144.10352-.21875.06787-.16126.1239-.32691.18109-.49244.02826-.08166.06165-.16088.08728-.24365.05506-.17773.09754-.359.14014-.54053.01745-.07409.04022-.14611.05554-.22119.0423-.20654.07123-.41626.09717-.62646.00659-.05371.01819-.10571.02374-.15967.02374-.23108.03369-.46435.03717-.69824.00061-.0365.00568-.07178.0058-.1084l-.00024-.00525.00067-.01428A7.98991 7.98991 0 008.001 0H8a8 8 0 000 16h.001a7.94253 7.94253 0 005.649-2.3501c.13953-.13891.26728-.28711.39533-.43506.03924-.04541.08276-.08691.121-.13317.13524-.16346.25872-.33467.37993-.50745zM8 15a6.953 6.953 0 01-4.943-2.057A7.02151 7.02151 0 018.001.95618V15z"
                                                                          fill="#414141"
                                                                        />
                                                                      </svg>
                                                                    </div>
                                                                  </HvIconBase>
                                                                </ThemeSwitcher>
                                                              </span>
                                                            </button>
                                                          </ForwardRef(ButtonBase)>
                                                        </WithStyles(ForwardRef(ButtonBase))>
                                                      </ForwardRef(Button)>
                                                    </WithStyles(ForwardRef(Button))>
                                                  </HvButton>
                                                </WithStyles(HvButton)>
                                              </div>
                                            </Actions>
                                          </WithStyles(Actions)>
                                        </div>
                                      </header>
                                    </ForwardRef(Paper)>
                                  </WithStyles(ForwardRef(Paper))>
                                </ForwardRef(AppBar)>
                              </WithStyles(ForwardRef(AppBar))>
                            </HvHeader>
                          </WithStyles(HvHeader)>
                        </Header>
                      </Connect(Header)>
                    </WithStyles(Connect(Header))>
                    <div
                      className="makeStyles-section-4 makeStyles-hasFooter-5"
                    >
                      <WithStyles(Connect(VerticalNavigation))>
                        <Connect(VerticalNavigation)
                          classes={Object {}}
                        >
                          <VerticalNavigation
                            auth={
                              Object {
                                "isAuthed": false,
                              }
                            }
                            classes={Object {}}
                            getPages={[Function]}
                            logout={[Function]}
                            pages={
                              Object {
                                "data": Array [],
                              }
                            }
                            redirect={[Function]}
                            router={
                              Object {
                                "location": Object {
                                  "pathname": "/",
                                },
                              }
                            }
                          />
                        </Connect(VerticalNavigation)>
                      </WithStyles(Connect(VerticalNavigation))>
                      <main
                        className="makeStyles-component-6"
                      >
                        <Login
                          auth={
                            Object {
                              "isAuthed": false,
                            }
                          }
                          classes={
                            Object {
                              "container": "Login-container-1",
                              "item": "Login-item-2",
                              "root": "Login-root-3",
                            }
                          }
                          login={[Function]}
                          recover={[Function]}
                          setActiveForm={[Function]}
                        >
                          <WithStyles(HvLogin)>
                            <HvLogin
                              classes={
                                Object {
                                  "formContainer": "HvLogin-formContainer",
                                  "root": "HvLogin-root",
                                }
                              }
                            >
                              <div
                                className="HvLogin-root"
                                style={
                                  Object {
                                    "backgroundImage": "url(test-file-stub)",
                                  }
                                }
                              >
                                <div
                                  className="HvLogin-formContainer"
                                >
                                  <WithStyles(LoginForm)
                                    onForgot={[Function]}
                                    onSubmit={[Function]}
                                  >
                                    <LoginForm
                                      classes={
                                        Object {
                                          "checkBox": "LoginForm-checkBox-12",
                                          "forgot": "LoginForm-forgot-11",
                                          "input": "LoginForm-input-9",
                                          "login": "LoginForm-login-10",
                                          "root": "LoginForm-root-8",
                                          "sentenceCase": "LoginForm-sentenceCase-13",
                                        }
                                      }
                                      onForgot={[Function]}
                                      onSubmit={[Function]}
                                    >
                                      <div
                                        className="LoginForm-root-8"
                                      >
                                        <WithStyles(ForwardRef)
                                          variant="mTitle"
                                        >
                                          <ForwardRef
                                            classes={
                                              Object {
                                                "3xlTitle": "HvTypography-3xlTitle",
                                                "4xlTitle": "HvTypography-4xlTitle",
                                                "5xlTitle": "HvTypography-5xlTitle",
                                                "disabledText": "HvTypography-disabledText",
                                                "highlightText": "HvTypography-highlightText",
                                                "lTitle": "HvTypography-lTitle",
                                                "link": "HvTypography-link",
                                                "mTitle": "HvTypography-mTitle",
                                                "noWrap": "HvTypography-noWrap",
                                                "normalText": "HvTypography-normalText",
                                                "placeholderText": "HvTypography-placeholderText",
                                                "root": "HvTypography-root",
                                                "sTitle": "HvTypography-sTitle",
                                                "sectionTitle": "HvTypography-sectionTitle",
                                                "selectedNavText": "HvTypography-selectedNavText",
                                                "vizText": "HvTypography-vizText",
                                                "vizTextDisabled": "HvTypography-vizTextDisabled",
                                                "xlTitle": "HvTypography-xlTitle",
                                                "xsInlineLink": "HvTypography-xsInlineLink",
                                                "xsTitle": "HvTypography-xsTitle",
                                                "xxlTitle": "HvTypography-xxlTitle",
                                                "xxsTitle": "HvTypography-xxsTitle",
                                              }
                                            }
                                            variant="mTitle"
                                          >
                                            <h3
                                              className="HvTypography-root HvTypography-mTitle"
                                            >
                                              pages.login.loginForm.title
                                            </h3>
                                          </ForwardRef>
                                        </WithStyles(ForwardRef)>
                                        <WithStyles(HvLabel)
                                          classes={
                                            Object {
                                              "root": "LoginForm-input-9",
                                            }
                                          }
                                          id="username-label"
                                          label="pages.login.loginForm.username.label"
                                        >
                                          <HvLabel
                                            classes={
                                              Object {
                                                "childGutter": "HvLabel-childGutter",
                                                "labelDisabled": "HvLabel-labelDisabled",
                                                "root": "HvLabel-root LoginForm-input-9",
                                              }
                                            }
                                            id="username-label"
                                            label="pages.login.loginForm.username.label"
                                          >
                                            <WithStyles(ForwardRef)
                                              className="HvLabel-root LoginForm-input-9 HvLabel-childGutter"
                                              component="label"
                                              htmlFor="username-input"
                                              id="username-label"
                                              variant="highlightText"
                                            >
                                              <ForwardRef
                                                className="HvLabel-root LoginForm-input-9 HvLabel-childGutter"
                                                classes={
                                                  Object {
                                                    "3xlTitle": "HvTypography-3xlTitle",
                                                    "4xlTitle": "HvTypography-4xlTitle",
                                                    "5xlTitle": "HvTypography-5xlTitle",
                                                    "disabledText": "HvTypography-disabledText",
                                                    "highlightText": "HvTypography-highlightText",
                                                    "lTitle": "HvTypography-lTitle",
                                                    "link": "HvTypography-link",
                                                    "mTitle": "HvTypography-mTitle",
                                                    "noWrap": "HvTypography-noWrap",
                                                    "normalText": "HvTypography-normalText",
                                                    "placeholderText": "HvTypography-placeholderText",
                                                    "root": "HvTypography-root",
                                                    "sTitle": "HvTypography-sTitle",
                                                    "sectionTitle": "HvTypography-sectionTitle",
                                                    "selectedNavText": "HvTypography-selectedNavText",
                                                    "vizText": "HvTypography-vizText",
                                                    "vizTextDisabled": "HvTypography-vizTextDisabled",
                                                    "xlTitle": "HvTypography-xlTitle",
                                                    "xsInlineLink": "HvTypography-xsInlineLink",
                                                    "xsTitle": "HvTypography-xsTitle",
                                                    "xxlTitle": "HvTypography-xxlTitle",
                                                    "xxsTitle": "HvTypography-xxsTitle",
                                                  }
                                                }
                                                component="label"
                                                htmlFor="username-input"
                                                id="username-label"
                                                variant="highlightText"
                                              >
                                                <label
                                                  className="HvLabel-root LoginForm-input-9 HvLabel-childGutter HvTypography-root HvTypography-highlightText"
                                                  htmlFor="username-input"
                                                  id="username-label"
                                                >
                                                  pages.login.loginForm.username.label
                                                </label>
                                              </ForwardRef>
                                            </WithStyles(ForwardRef)>
                                            <WithStyles(HvBaseInput)
                                              id="username-input"
                                              inputProps={
                                                Object {
                                                  "autoFocus": true,
                                                }
                                              }
                                              onChange={[Function]}
                                              placeholder="pages.login.loginForm.username.placeholder"
                                              value="admin"
                                            >
                                              <HvBaseInput
                                                classes={
                                                  Object {
                                                    "disabled": "HvBaseInput-disabled",
                                                    "input": "HvBaseInput-input",
                                                    "inputBorderContainer": "HvBaseInput-inputBorderContainer",
                                                    "inputResizable": "HvBaseInput-inputResizable",
                                                    "inputRoot": "HvBaseInput-inputRoot",
                                                    "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                                                    "inputRootFocused": "HvBaseInput-inputRootFocused",
                                                    "inputRootMultiline": "HvBaseInput-inputRootMultiline",
                                                    "invalid": "HvBaseInput-invalid",
                                                    "resizable": "HvBaseInput-resizable",
                                                    "root": "HvBaseInput-root",
                                                  }
                                                }
                                                id="username-input"
                                                inputProps={
                                                  Object {
                                                    "autoFocus": true,
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="pages.login.loginForm.username.placeholder"
                                                value="admin"
                                              >
                                                <div
                                                  className="HvBaseInput-root"
                                                >
                                                  <WithStyles(ForwardRef(Input))
                                                    classes={
                                                      Object {
                                                        "disabled": "HvBaseInput-inputRootDisabled",
                                                        "focused": "HvBaseInput-inputRootFocused",
                                                        "input": "HvBaseInput-input",
                                                        "multiline": "HvBaseInput-inputRootMultiline",
                                                        "root": "HvBaseInput-inputRoot",
                                                      }
                                                    }
                                                    id="username-input"
                                                    inputProps={
                                                      Object {
                                                        "aria-controls": undefined,
                                                        "aria-describedby": undefined,
                                                        "aria-labelledby": undefined,
                                                        "autoFocus": true,
                                                        "required": undefined,
                                                      }
                                                    }
                                                    multiline={false}
                                                    onChange={[Function]}
                                                    placeholder="pages.login.loginForm.username.placeholder"
                                                    rows={10}
                                                    type="text"
                                                    value="admin"
                                                  >
                                                    <ForwardRef(Input)
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled HvBaseInput-inputRootDisabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused HvBaseInput-inputRootFocused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input HvBaseInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline HvBaseInput-inputRootMultiline",
                                                          "root": "MuiInput-root HvBaseInput-inputRoot",
                                                          "underline": "MuiInput-underline",
                                                        }
                                                      }
                                                      disableUnderline={true}
                                                      id="username-input"
                                                      inputProps={
                                                        Object {
                                                          "aria-controls": undefined,
                                                          "aria-describedby": undefined,
                                                          "aria-labelledby": undefined,
                                                          "autoFocus": true,
                                                          "required": undefined,
                                                        }
                                                      }
                                                      multiline={false}
                                                      onChange={[Function]}
                                                      placeholder="pages.login.loginForm.username.placeholder"
                                                      rows={10}
                                                      type="text"
                                                      value="admin"
                                                    >
                                                      <WithStyles(ForwardRef(InputBase))
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled HvBaseInput-inputRootDisabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused HvBaseInput-inputRootFocused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input HvBaseInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline HvBaseInput-inputRootMultiline",
                                                            "root": "MuiInput-root HvBaseInput-inputRoot",
                                                            "underline": null,
                                                          }
                                                        }
                                                        fullWidth={false}
                                                        id="username-input"
                                                        inputComponent="input"
                                                        inputProps={
                                                          Object {
                                                            "aria-controls": undefined,
                                                            "aria-describedby": undefined,
                                                            "aria-labelledby": undefined,
                                                            "autoFocus": true,
                                                            "required": undefined,
                                                          }
                                                        }
                                                        multiline={false}
                                                        onChange={[Function]}
                                                        placeholder="pages.login.loginForm.username.placeholder"
                                                        rows={10}
                                                        type="text"
                                                        value="admin"
                                                      >
                                                        <ForwardRef(InputBase)
                                                          classes={
                                                            Object {
                                                              "adornedEnd": "MuiInputBase-adornedEnd",
                                                              "adornedStart": "MuiInputBase-adornedStart",
                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled Mui-disabled HvBaseInput-inputRootDisabled",
                                                              "error": "Mui-error Mui-error",
                                                              "focused": "Mui-focused Mui-focused HvBaseInput-inputRootFocused",
                                                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                              "input": "MuiInputBase-input MuiInput-input HvBaseInput-input",
                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                              "multiline": "MuiInputBase-multiline MuiInput-multiline HvBaseInput-inputRootMultiline",
                                                              "root": "MuiInputBase-root MuiInput-root HvBaseInput-inputRoot",
                                                            }
                                                          }
                                                          fullWidth={false}
                                                          id="username-input"
                                                          inputComponent="input"
                                                          inputProps={
                                                            Object {
                                                              "aria-controls": undefined,
                                                              "aria-describedby": undefined,
                                                              "aria-labelledby": undefined,
                                                              "autoFocus": true,
                                                              "required": undefined,
                                                            }
                                                          }
                                                          multiline={false}
                                                          onChange={[Function]}
                                                          placeholder="pages.login.loginForm.username.placeholder"
                                                          rows={10}
                                                          type="text"
                                                          value="admin"
                                                        >
                                                          <div
                                                            className="MuiInputBase-root MuiInput-root HvBaseInput-inputRoot"
                                                            onClick={[Function]}
                                                          >
                                                            <input
                                                              autoFocus={true}
                                                              className="MuiInputBase-input MuiInput-input HvBaseInput-input"
                                                              id="username-input"
                                                              onAnimationStart={[Function]}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              placeholder="pages.login.loginForm.username.placeholder"
                                                              rows={10}
                                                              type="text"
                                                              value="admin"
                                                            />
                                                          </div>
                                                        </ForwardRef(InputBase)>
                                                      </WithStyles(ForwardRef(InputBase))>
                                                    </ForwardRef(Input)>
                                                  </WithStyles(ForwardRef(Input))>
                                                  <div
                                                    className="HvBaseInput-inputBorderContainer"
                                                    role="presentation"
                                                  />
                                                </div>
                                              </HvBaseInput>
                                            </WithStyles(HvBaseInput)>
                                          </HvLabel>
                                        </WithStyles(HvLabel)>
                                        <WithStyles(HvLabel)
                                          classes={
                                            Object {
                                              "root": "LoginForm-input-9",
                                            }
                                          }
                                          id="password-label"
                                          label="pages.login.loginForm.password.label"
                                        >
                                          <HvLabel
                                            classes={
                                              Object {
                                                "childGutter": "HvLabel-childGutter",
                                                "labelDisabled": "HvLabel-labelDisabled",
                                                "root": "HvLabel-root LoginForm-input-9",
                                              }
                                            }
                                            id="password-label"
                                            label="pages.login.loginForm.password.label"
                                          >
                                            <WithStyles(ForwardRef)
                                              className="HvLabel-root LoginForm-input-9 HvLabel-childGutter"
                                              component="label"
                                              htmlFor="password-input"
                                              id="password-label"
                                              variant="highlightText"
                                            >
                                              <ForwardRef
                                                className="HvLabel-root LoginForm-input-9 HvLabel-childGutter"
                                                classes={
                                                  Object {
                                                    "3xlTitle": "HvTypography-3xlTitle",
                                                    "4xlTitle": "HvTypography-4xlTitle",
                                                    "5xlTitle": "HvTypography-5xlTitle",
                                                    "disabledText": "HvTypography-disabledText",
                                                    "highlightText": "HvTypography-highlightText",
                                                    "lTitle": "HvTypography-lTitle",
                                                    "link": "HvTypography-link",
                                                    "mTitle": "HvTypography-mTitle",
                                                    "noWrap": "HvTypography-noWrap",
                                                    "normalText": "HvTypography-normalText",
                                                    "placeholderText": "HvTypography-placeholderText",
                                                    "root": "HvTypography-root",
                                                    "sTitle": "HvTypography-sTitle",
                                                    "sectionTitle": "HvTypography-sectionTitle",
                                                    "selectedNavText": "HvTypography-selectedNavText",
                                                    "vizText": "HvTypography-vizText",
                                                    "vizTextDisabled": "HvTypography-vizTextDisabled",
                                                    "xlTitle": "HvTypography-xlTitle",
                                                    "xsInlineLink": "HvTypography-xsInlineLink",
                                                    "xsTitle": "HvTypography-xsTitle",
                                                    "xxlTitle": "HvTypography-xxlTitle",
                                                    "xxsTitle": "HvTypography-xxsTitle",
                                                  }
                                                }
                                                component="label"
                                                htmlFor="password-input"
                                                id="password-label"
                                                variant="highlightText"
                                              >
                                                <label
                                                  className="HvLabel-root LoginForm-input-9 HvLabel-childGutter HvTypography-root HvTypography-highlightText"
                                                  htmlFor="password-input"
                                                  id="password-label"
                                                >
                                                  pages.login.loginForm.password.label
                                                </label>
                                              </ForwardRef>
                                            </WithStyles(ForwardRef)>
                                            <WithStyles(HvBaseInput)
                                              id="password-input"
                                              inputProps={
                                                Object {
                                                  "type": "password",
                                                }
                                              }
                                              onChange={[Function]}
                                              placeholder="pages.login.loginForm.password.placeholder"
                                              value="password"
                                            >
                                              <HvBaseInput
                                                classes={
                                                  Object {
                                                    "disabled": "HvBaseInput-disabled",
                                                    "input": "HvBaseInput-input",
                                                    "inputBorderContainer": "HvBaseInput-inputBorderContainer",
                                                    "inputResizable": "HvBaseInput-inputResizable",
                                                    "inputRoot": "HvBaseInput-inputRoot",
                                                    "inputRootDisabled": "HvBaseInput-inputRootDisabled",
                                                    "inputRootFocused": "HvBaseInput-inputRootFocused",
                                                    "inputRootMultiline": "HvBaseInput-inputRootMultiline",
                                                    "invalid": "HvBaseInput-invalid",
                                                    "resizable": "HvBaseInput-resizable",
                                                    "root": "HvBaseInput-root",
                                                  }
                                                }
                                                id="password-input"
                                                inputProps={
                                                  Object {
                                                    "type": "password",
                                                  }
                                                }
                                                onChange={[Function]}
                                                placeholder="pages.login.loginForm.password.placeholder"
                                                value="password"
                                              >
                                                <div
                                                  className="HvBaseInput-root"
                                                >
                                                  <WithStyles(ForwardRef(Input))
                                                    classes={
                                                      Object {
                                                        "disabled": "HvBaseInput-inputRootDisabled",
                                                        "focused": "HvBaseInput-inputRootFocused",
                                                        "input": "HvBaseInput-input",
                                                        "multiline": "HvBaseInput-inputRootMultiline",
                                                        "root": "HvBaseInput-inputRoot",
                                                      }
                                                    }
                                                    id="password-input"
                                                    inputProps={
                                                      Object {
                                                        "aria-controls": undefined,
                                                        "aria-describedby": undefined,
                                                        "aria-labelledby": undefined,
                                                        "required": undefined,
                                                        "type": "password",
                                                      }
                                                    }
                                                    multiline={false}
                                                    onChange={[Function]}
                                                    placeholder="pages.login.loginForm.password.placeholder"
                                                    rows={10}
                                                    type="text"
                                                    value="password"
                                                  >
                                                    <ForwardRef(Input)
                                                      classes={
                                                        Object {
                                                          "colorSecondary": "MuiInput-colorSecondary",
                                                          "disabled": "Mui-disabled HvBaseInput-inputRootDisabled",
                                                          "error": "Mui-error",
                                                          "focused": "Mui-focused HvBaseInput-inputRootFocused",
                                                          "formControl": "MuiInput-formControl",
                                                          "fullWidth": "MuiInput-fullWidth",
                                                          "input": "MuiInput-input HvBaseInput-input",
                                                          "inputMarginDense": "MuiInput-inputMarginDense",
                                                          "inputMultiline": "MuiInput-inputMultiline",
                                                          "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                          "marginDense": "MuiInput-marginDense",
                                                          "multiline": "MuiInput-multiline HvBaseInput-inputRootMultiline",
                                                          "root": "MuiInput-root HvBaseInput-inputRoot",
                                                          "underline": "MuiInput-underline",
                                                        }
                                                      }
                                                      disableUnderline={true}
                                                      id="password-input"
                                                      inputProps={
                                                        Object {
                                                          "aria-controls": undefined,
                                                          "aria-describedby": undefined,
                                                          "aria-labelledby": undefined,
                                                          "required": undefined,
                                                          "type": "password",
                                                        }
                                                      }
                                                      multiline={false}
                                                      onChange={[Function]}
                                                      placeholder="pages.login.loginForm.password.placeholder"
                                                      rows={10}
                                                      type="text"
                                                      value="password"
                                                    >
                                                      <WithStyles(ForwardRef(InputBase))
                                                        classes={
                                                          Object {
                                                            "colorSecondary": "MuiInput-colorSecondary",
                                                            "disabled": "Mui-disabled HvBaseInput-inputRootDisabled",
                                                            "error": "Mui-error",
                                                            "focused": "Mui-focused HvBaseInput-inputRootFocused",
                                                            "formControl": "MuiInput-formControl",
                                                            "fullWidth": "MuiInput-fullWidth",
                                                            "input": "MuiInput-input HvBaseInput-input",
                                                            "inputMarginDense": "MuiInput-inputMarginDense",
                                                            "inputMultiline": "MuiInput-inputMultiline",
                                                            "inputTypeSearch": "MuiInput-inputTypeSearch",
                                                            "marginDense": "MuiInput-marginDense",
                                                            "multiline": "MuiInput-multiline HvBaseInput-inputRootMultiline",
                                                            "root": "MuiInput-root HvBaseInput-inputRoot",
                                                            "underline": null,
                                                          }
                                                        }
                                                        fullWidth={false}
                                                        id="password-input"
                                                        inputComponent="input"
                                                        inputProps={
                                                          Object {
                                                            "aria-controls": undefined,
                                                            "aria-describedby": undefined,
                                                            "aria-labelledby": undefined,
                                                            "required": undefined,
                                                            "type": "password",
                                                          }
                                                        }
                                                        multiline={false}
                                                        onChange={[Function]}
                                                        placeholder="pages.login.loginForm.password.placeholder"
                                                        rows={10}
                                                        type="text"
                                                        value="password"
                                                      >
                                                        <ForwardRef(InputBase)
                                                          classes={
                                                            Object {
                                                              "adornedEnd": "MuiInputBase-adornedEnd",
                                                              "adornedStart": "MuiInputBase-adornedStart",
                                                              "colorSecondary": "MuiInputBase-colorSecondary MuiInput-colorSecondary",
                                                              "disabled": "Mui-disabled Mui-disabled HvBaseInput-inputRootDisabled",
                                                              "error": "Mui-error Mui-error",
                                                              "focused": "Mui-focused Mui-focused HvBaseInput-inputRootFocused",
                                                              "formControl": "MuiInputBase-formControl MuiInput-formControl",
                                                              "fullWidth": "MuiInputBase-fullWidth MuiInput-fullWidth",
                                                              "input": "MuiInputBase-input MuiInput-input HvBaseInput-input",
                                                              "inputAdornedEnd": "MuiInputBase-inputAdornedEnd",
                                                              "inputAdornedStart": "MuiInputBase-inputAdornedStart",
                                                              "inputHiddenLabel": "MuiInputBase-inputHiddenLabel",
                                                              "inputMarginDense": "MuiInputBase-inputMarginDense MuiInput-inputMarginDense",
                                                              "inputMultiline": "MuiInputBase-inputMultiline MuiInput-inputMultiline",
                                                              "inputTypeSearch": "MuiInputBase-inputTypeSearch MuiInput-inputTypeSearch",
                                                              "marginDense": "MuiInputBase-marginDense MuiInput-marginDense",
                                                              "multiline": "MuiInputBase-multiline MuiInput-multiline HvBaseInput-inputRootMultiline",
                                                              "root": "MuiInputBase-root MuiInput-root HvBaseInput-inputRoot",
                                                            }
                                                          }
                                                          fullWidth={false}
                                                          id="password-input"
                                                          inputComponent="input"
                                                          inputProps={
                                                            Object {
                                                              "aria-controls": undefined,
                                                              "aria-describedby": undefined,
                                                              "aria-labelledby": undefined,
                                                              "required": undefined,
                                                              "type": "password",
                                                            }
                                                          }
                                                          multiline={false}
                                                          onChange={[Function]}
                                                          placeholder="pages.login.loginForm.password.placeholder"
                                                          rows={10}
                                                          type="text"
                                                          value="password"
                                                        >
                                                          <div
                                                            className="MuiInputBase-root MuiInput-root HvBaseInput-inputRoot"
                                                            onClick={[Function]}
                                                          >
                                                            <input
                                                              className="MuiInputBase-input MuiInput-input HvBaseInput-input"
                                                              id="password-input"
                                                              onAnimationStart={[Function]}
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocus={[Function]}
                                                              placeholder="pages.login.loginForm.password.placeholder"
                                                              rows={10}
                                                              type="password"
                                                              value="password"
                                                            />
                                                          </div>
                                                        </ForwardRef(InputBase)>
                                                      </WithStyles(ForwardRef(InputBase))>
                                                    </ForwardRef(Input)>
                                                  </WithStyles(ForwardRef(Input))>
                                                  <div
                                                    className="HvBaseInput-inputBorderContainer"
                                                    role="presentation"
                                                  />
                                                </div>
                                              </HvBaseInput>
                                            </WithStyles(HvBaseInput)>
                                          </HvLabel>
                                        </WithStyles(HvLabel)>
                                        <WithStyles(HvCheckBox)
                                          classes={
                                            Object {
                                              "container": "LoginForm-checkBox-12",
                                            }
                                          }
                                          label="pages.login.loginForm.remember"
                                        >
                                          <HvCheckBox
                                            classes={
                                              Object {
                                                "checkbox": "HvCheckBox-checkbox",
                                                "container": "HvCheckBox-container LoginForm-checkBox-12",
                                                "disabled": "HvCheckBox-disabled",
                                                "focusVisible": "HvCheckBox-focusVisible",
                                                "label": "HvCheckBox-label",
                                                "root": "HvCheckBox-root",
                                              }
                                            }
                                            label="pages.login.loginForm.remember"
                                          >
                                            <WithStyles(HvFormElement)
                                              className="HvCheckBox-root"
                                              disabled={false}
                                              readOnly={false}
                                              required={false}
                                              status="standBy"
                                            >
                                              <HvFormElement
                                                className="HvCheckBox-root"
                                                classes={
                                                  Object {
                                                    "root": "HvFormElement-root",
                                                  }
                                                }
                                                disabled={false}
                                                readOnly={false}
                                                required={false}
                                                status="standBy"
                                              >
                                                <div
                                                  className="HvCheckBox-root HvFormElement-root"
                                                >
                                                  <div
                                                    className="HvCheckBox-container LoginForm-checkBox-12"
                                                  >
                                                    <WithStyles(HvBaseCheckbox)
                                                      checked={false}
                                                      className="HvCheckBox-checkbox"
                                                      disabled={false}
                                                      id="hvcheckbox1-input"
                                                      indeterminate={false}
                                                      inputProps={
                                                        Object {
                                                          "aria-describedby": undefined,
                                                          "aria-errormessage": undefined,
                                                          "aria-invalid": undefined,
                                                          "aria-label": undefined,
                                                          "aria-labelledby": undefined,
                                                        }
                                                      }
                                                      onBlur={[Function]}
                                                      onChange={[Function]}
                                                      onFocusVisible={[Function]}
                                                      readOnly={false}
                                                      required={false}
                                                      semantic={false}
                                                      value="on"
                                                    >
                                                      <HvBaseCheckbox
                                                        checked={false}
                                                        className="HvCheckBox-checkbox"
                                                        classes={
                                                          Object {
                                                            "disabled": "HvBaseCheckbox-disabled",
                                                            "focusVisible": "HvBaseCheckbox-focusVisible",
                                                            "root": "HvBaseCheckbox-root",
                                                          }
                                                        }
                                                        disabled={false}
                                                        id="hvcheckbox1-input"
                                                        indeterminate={false}
                                                        inputProps={
                                                          Object {
                                                            "aria-describedby": undefined,
                                                            "aria-errormessage": undefined,
                                                            "aria-invalid": undefined,
                                                            "aria-label": undefined,
                                                            "aria-labelledby": undefined,
                                                          }
                                                        }
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocusVisible={[Function]}
                                                        readOnly={false}
                                                        required={false}
                                                        semantic={false}
                                                        value="on"
                                                      >
                                                        <WithStyles(ForwardRef(Checkbox))
                                                          checked={false}
                                                          checkedIcon={<CheckboxCheck />}
                                                          className="HvCheckBox-checkbox HvBaseCheckbox-root"
                                                          color="default"
                                                          disableRipple={true}
                                                          disabled={false}
                                                          icon={<Checkbox />}
                                                          id="hvcheckbox1-input"
                                                          indeterminate={false}
                                                          indeterminateIcon={<CheckboxPartial />}
                                                          inputProps={
                                                            Object {
                                                              "aria-describedby": undefined,
                                                              "aria-errormessage": undefined,
                                                              "aria-invalid": undefined,
                                                              "aria-label": undefined,
                                                              "aria-labelledby": undefined,
                                                            }
                                                          }
                                                          onBlur={[Function]}
                                                          onChange={[Function]}
                                                          onFocusVisible={[Function]}
                                                          readOnly={false}
                                                          required={false}
                                                          value="on"
                                                        >
                                                          <ForwardRef(Checkbox)
                                                            checked={false}
                                                            checkedIcon={<CheckboxCheck />}
                                                            className="HvCheckBox-checkbox HvBaseCheckbox-root"
                                                            classes={
                                                              Object {
                                                                "checked": "Mui-checked",
                                                                "colorPrimary": "MuiCheckbox-colorPrimary",
                                                                "colorSecondary": "MuiCheckbox-colorSecondary",
                                                                "disabled": "Mui-disabled",
                                                                "indeterminate": "MuiCheckbox-indeterminate",
                                                                "root": "MuiCheckbox-root",
                                                              }
                                                            }
                                                            color="default"
                                                            disableRipple={true}
                                                            disabled={false}
                                                            icon={<Checkbox />}
                                                            id="hvcheckbox1-input"
                                                            indeterminate={false}
                                                            indeterminateIcon={<CheckboxPartial />}
                                                            inputProps={
                                                              Object {
                                                                "aria-describedby": undefined,
                                                                "aria-errormessage": undefined,
                                                                "aria-invalid": undefined,
                                                                "aria-label": undefined,
                                                                "aria-labelledby": undefined,
                                                              }
                                                            }
                                                            onBlur={[Function]}
                                                            onChange={[Function]}
                                                            onFocusVisible={[Function]}
                                                            readOnly={false}
                                                            required={false}
                                                            value="on"
                                                          >
                                                            <WithStyles(ForwardRef(SwitchBase))
                                                              checked={false}
                                                              checkedIcon={<CheckboxCheck />}
                                                              className="HvCheckBox-checkbox HvBaseCheckbox-root"
                                                              classes={
                                                                Object {
                                                                  "checked": "Mui-checked",
                                                                  "disabled": "Mui-disabled",
                                                                  "root": "MuiCheckbox-root",
                                                                }
                                                              }
                                                              color="default"
                                                              disableRipple={true}
                                                              disabled={false}
                                                              icon={<Checkbox />}
                                                              id="hvcheckbox1-input"
                                                              inputProps={
                                                                Object {
                                                                  "aria-describedby": undefined,
                                                                  "aria-errormessage": undefined,
                                                                  "aria-invalid": undefined,
                                                                  "aria-label": undefined,
                                                                  "aria-labelledby": undefined,
                                                                  "data-indeterminate": false,
                                                                }
                                                              }
                                                              onBlur={[Function]}
                                                              onChange={[Function]}
                                                              onFocusVisible={[Function]}
                                                              readOnly={false}
                                                              required={false}
                                                              type="checkbox"
                                                              value="on"
                                                            >
                                                              <ForwardRef(SwitchBase)
                                                                checked={false}
                                                                checkedIcon={<CheckboxCheck />}
                                                                className="HvCheckBox-checkbox HvBaseCheckbox-root"
                                                                classes={
                                                                  Object {
                                                                    "checked": "PrivateSwitchBase-checked-15 Mui-checked",
                                                                    "disabled": "PrivateSwitchBase-disabled-16 Mui-disabled",
                                                                    "input": "PrivateSwitchBase-input-17",
                                                                    "root": "PrivateSwitchBase-root-14 MuiCheckbox-root",
                                                                  }
                                                                }
                                                                color="default"
                                                                disableRipple={true}
                                                                disabled={false}
                                                                icon={<Checkbox />}
                                                                id="hvcheckbox1-input"
                                                                inputProps={
                                                                  Object {
                                                                    "aria-describedby": undefined,
                                                                    "aria-errormessage": undefined,
                                                                    "aria-invalid": undefined,
                                                                    "aria-label": undefined,
                                                                    "aria-labelledby": undefined,
                                                                    "data-indeterminate": false,
                                                                  }
                                                                }
                                                                onBlur={[Function]}
                                                                onChange={[Function]}
                                                                onFocusVisible={[Function]}
                                                                readOnly={false}
                                                                required={false}
                                                                type="checkbox"
                                                                value="on"
                                                              >
                                                                <WithStyles(ForwardRef(IconButton))
                                                                  className="PrivateSwitchBase-root-14 MuiCheckbox-root HvCheckBox-checkbox HvBaseCheckbox-root"
                                                                  color="default"
                                                                  component="span"
                                                                  disableRipple={true}
                                                                  disabled={false}
                                                                  onBlur={[Function]}
                                                                  onFocus={[Function]}
                                                                  onFocusVisible={[Function]}
                                                                  tabIndex={null}
                                                                >
                                                                  <ForwardRef(IconButton)
                                                                    className="PrivateSwitchBase-root-14 MuiCheckbox-root HvCheckBox-checkbox HvBaseCheckbox-root"
                                                                    classes={
                                                                      Object {
                                                                        "colorInherit": "MuiIconButton-colorInherit",
                                                                        "colorPrimary": "MuiIconButton-colorPrimary",
                                                                        "colorSecondary": "MuiIconButton-colorSecondary",
                                                                        "disabled": "Mui-disabled",
                                                                        "edgeEnd": "MuiIconButton-edgeEnd",
                                                                        "edgeStart": "MuiIconButton-edgeStart",
                                                                        "label": "MuiIconButton-label",
                                                                        "root": "MuiIconButton-root",
                                                                        "sizeSmall": "MuiIconButton-sizeSmall",
                                                                      }
                                                                    }
                                                                    color="default"
                                                                    component="span"
                                                                    disableRipple={true}
                                                                    disabled={false}
                                                                    onBlur={[Function]}
                                                                    onFocus={[Function]}
                                                                    onFocusVisible={[Function]}
                                                                    tabIndex={null}
                                                                  >
                                                                    <WithStyles(ForwardRef(ButtonBase))
                                                                      centerRipple={true}
                                                                      className="MuiIconButton-root PrivateSwitchBase-root-14 MuiCheckbox-root HvCheckBox-checkbox HvBaseCheckbox-root"
                                                                      component="span"
                                                                      disableRipple={true}
                                                                      disabled={false}
                                                                      focusRipple={true}
                                                                      onBlur={[Function]}
                                                                      onFocus={[Function]}
                                                                      onFocusVisible={[Function]}
                                                                      tabIndex={null}
                                                                    >
                                                                      <ForwardRef(ButtonBase)
                                                                        centerRipple={true}
                                                                        className="MuiIconButton-root PrivateSwitchBase-root-14 MuiCheckbox-root HvCheckBox-checkbox HvBaseCheckbox-root"
                                                                        classes={
                                                                          Object {
                                                                            "disabled": "Mui-disabled",
                                                                            "focusVisible": "Mui-focusVisible",
                                                                            "root": "MuiButtonBase-root",
                                                                          }
                                                                        }
                                                                        component="span"
                                                                        disableRipple={true}
                                                                        disabled={false}
                                                                        focusRipple={true}
                                                                        onBlur={[Function]}
                                                                        onFocus={[Function]}
                                                                        onFocusVisible={[Function]}
                                                                        tabIndex={null}
                                                                      >
                                                                        <span
                                                                          aria-disabled={false}
                                                                          className="MuiButtonBase-root MuiIconButton-root PrivateSwitchBase-root-14 MuiCheckbox-root HvCheckBox-checkbox HvBaseCheckbox-root"
                                                                          onBlur={[Function]}
                                                                          onDragLeave={[Function]}
                                                                          onFocus={[Function]}
                                                                          onKeyDown={[Function]}
                                                                          onKeyUp={[Function]}
                                                                          onMouseDown={[Function]}
                                                                          onMouseLeave={[Function]}
                                                                          onMouseUp={[Function]}
                                                                          onTouchEnd={[Function]}
                                                                          onTouchMove={[Function]}
                                                                          onTouchStart={[Function]}
                                                                          tabIndex={null}
                                                                        >
                                                                          <span
                                                                            className="MuiIconButton-label"
                                                                          >
                                                                            <input
                                                                              checked={false}
                                                                              className="PrivateSwitchBase-input-17"
                                                                              data-indeterminate={false}
                                                                              disabled={false}
                                                                              id="hvcheckbox1-input"
                                                                              onChange={[Function]}
                                                                              readOnly={false}
                                                                              required={false}
                                                                              type="checkbox"
                                                                              value="on"
                                                                            />
                                                                            <Checkbox>
                                                                              <HvIconBase
                                                                                iconSize="S"
                                                                                name="Checkbox"
                                                                              >
                                                                                <div
                                                                                  className="HvIconBase-root HvIconBase-s"
                                                                                  name="Checkbox"
                                                                                >
                                                                                  <svg
                                                                                    focusable={false}
                                                                                    height={16}
                                                                                    viewBox="0 0 16 16"
                                                                                    width={16}
                                                                                    xmlns="http://www.w3.org/2000/svg"
                                                                                  >
                                                                                    <path
                                                                                      className="color0"
                                                                                      d="M0 0h16v16H0z"
                                                                                      fill="#FBFCFC"
                                                                                    />
                                                                                    <path
                                                                                      className="color1"
                                                                                      d="M16 16H0V0h16zM1 15h14V1H1z"
                                                                                      fill="#414141"
                                                                                    />
                                                                                  </svg>
                                                                                </div>
                                                                              </HvIconBase>
                                                                            </Checkbox>
                                                                          </span>
                                                                        </span>
                                                                      </ForwardRef(ButtonBase)>
                                                                    </WithStyles(ForwardRef(ButtonBase))>
                                                                  </ForwardRef(IconButton)>
                                                                </WithStyles(ForwardRef(IconButton))>
                                                              </ForwardRef(SwitchBase)>
                                                            </WithStyles(ForwardRef(SwitchBase))>
                                                          </ForwardRef(Checkbox)>
                                                        </WithStyles(ForwardRef(Checkbox))>
                                                      </HvBaseCheckbox>
                                                    </WithStyles(HvBaseCheckbox)>
                                                    <WithStyles(HvLabel)
                                                      className="HvCheckBox-label"
                                                      htmlFor="hvcheckbox1-input"
                                                      id="hvcheckbox1-label"
                                                      label="pages.login.loginForm.remember"
                                                    >
                                                      <HvLabel
                                                        className="HvCheckBox-label"
                                                        classes={
                                                          Object {
                                                            "childGutter": "HvLabel-childGutter",
                                                            "labelDisabled": "HvLabel-labelDisabled",
                                                            "root": "HvLabel-root",
                                                          }
                                                        }
                                                        htmlFor="hvcheckbox1-input"
                                                        id="hvcheckbox1-label"
                                                        label="pages.login.loginForm.remember"
                                                      >
                                                        <WithStyles(ForwardRef)
                                                          className="HvCheckBox-label HvLabel-root"
                                                          component="label"
                                                          htmlFor="hvcheckbox1-input"
                                                          id="hvcheckbox1-label"
                                                          variant="highlightText"
                                                        >
                                                          <ForwardRef
                                                            className="HvCheckBox-label HvLabel-root"
                                                            classes={
                                                              Object {
                                                                "3xlTitle": "HvTypography-3xlTitle",
                                                                "4xlTitle": "HvTypography-4xlTitle",
                                                                "5xlTitle": "HvTypography-5xlTitle",
                                                                "disabledText": "HvTypography-disabledText",
                                                                "highlightText": "HvTypography-highlightText",
                                                                "lTitle": "HvTypography-lTitle",
                                                                "link": "HvTypography-link",
                                                                "mTitle": "HvTypography-mTitle",
                                                                "noWrap": "HvTypography-noWrap",
                                                                "normalText": "HvTypography-normalText",
                                                                "placeholderText": "HvTypography-placeholderText",
                                                                "root": "HvTypography-root",
                                                                "sTitle": "HvTypography-sTitle",
                                                                "sectionTitle": "HvTypography-sectionTitle",
                                                                "selectedNavText": "HvTypography-selectedNavText",
                                                                "vizText": "HvTypography-vizText",
                                                                "vizTextDisabled": "HvTypography-vizTextDisabled",
                                                                "xlTitle": "HvTypography-xlTitle",
                                                                "xsInlineLink": "HvTypography-xsInlineLink",
                                                                "xsTitle": "HvTypography-xsTitle",
                                                                "xxlTitle": "HvTypography-xxlTitle",
                                                                "xxsTitle": "HvTypography-xxsTitle",
                                                              }
                                                            }
                                                            component="label"
                                                            htmlFor="hvcheckbox1-input"
                                                            id="hvcheckbox1-label"
                                                            variant="highlightText"
                                                          >
                                                            <label
                                                              className="HvCheckBox-label HvLabel-root HvTypography-root HvTypography-highlightText"
                                                              htmlFor="hvcheckbox1-input"
                                                              id="hvcheckbox1-label"
                                                            >
                                                              pages.login.loginForm.remember
                                                            </label>
                                                          </ForwardRef>
                                                        </WithStyles(ForwardRef)>
                                                      </HvLabel>
                                                    </WithStyles(HvLabel)>
                                                  </div>
                                                </div>
                                              </HvFormElement>
                                            </WithStyles(HvFormElement)>
                                          </HvCheckBox>
                                        </WithStyles(HvCheckBox)>
                                        <WithStyles(HvButton)
                                          category="primary"
                                          className="LoginForm-login-10 LoginForm-sentenceCase-13"
                                          disabled={false}
                                          onClick={[Function]}
                                          type="submit"
                                        >
                                          <HvButton
                                            category="primary"
                                            className="LoginForm-login-10 LoginForm-sentenceCase-13"
                                            classes={
                                              Object {
                                                "focusVisible": "HvButton-focusVisible",
                                                "ghost": "HvButton-ghost",
                                                "ghostDisabled": "HvButton-ghostDisabled",
                                                "ghostSVG": "HvButton-ghostSVG",
                                                "icon": "HvButton-icon",
                                                "iconSVG": "HvButton-iconSVG",
                                                "primary": "HvButton-primary",
                                                "primaryDisabled": "HvButton-primaryDisabled",
                                                "primarySVG": "HvButton-primarySVG",
                                                "root": "HvButton-root",
                                                "secondary": "HvButton-secondary",
                                                "secondaryDisabled": "HvButton-secondaryDisabled",
                                                "secondarySVG": "HvButton-secondarySVG",
                                                "semantic": "HvButton-semantic",
                                                "semanticDisabled": "HvButton-semanticDisabled",
                                                "semanticSVG": "HvButton-semanticSVG",
                                                "startIcon": "HvButton-startIcon",
                                              }
                                            }
                                            disabled={false}
                                            onClick={[Function]}
                                            type="submit"
                                          >
                                            <WithStyles(ForwardRef(Button))
                                              className="LoginForm-login-10 LoginForm-sentenceCase-13 HvButton-primarySVG"
                                              classes={
                                                Object {
                                                  "containedPrimary": "HvButton-primary",
                                                  "disabled": "HvButton-primaryDisabled",
                                                  "outlinedPrimary": "HvButton-secondary",
                                                  "root": "HvButton-root",
                                                  "startIcon": "HvButton-startIcon",
                                                  "textPrimary": "HvButton-ghost",
                                                }
                                              }
                                              color="primary"
                                              disableRipple={true}
                                              disabled={false}
                                              focusVisibleClassName="HvButton-focusVisible"
                                              onClick={[Function]}
                                              type="submit"
                                              variant="contained"
                                            >
                                              <ForwardRef(Button)
                                                className="LoginForm-login-10 LoginForm-sentenceCase-13 HvButton-primarySVG"
                                                classes={
                                                  Object {
                                                    "colorInherit": "MuiButton-colorInherit",
                                                    "contained": "MuiButton-contained",
                                                    "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                                    "containedSecondary": "MuiButton-containedSecondary",
                                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                    "disableElevation": "MuiButton-disableElevation",
                                                    "disabled": "Mui-disabled HvButton-primaryDisabled",
                                                    "endIcon": "MuiButton-endIcon",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "fullWidth": "MuiButton-fullWidth",
                                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                    "label": "MuiButton-label",
                                                    "outlined": "MuiButton-outlined",
                                                    "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                    "root": "MuiButton-root HvButton-root",
                                                    "sizeLarge": "MuiButton-sizeLarge",
                                                    "sizeSmall": "MuiButton-sizeSmall",
                                                    "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                                    "text": "MuiButton-text",
                                                    "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                                    "textSecondary": "MuiButton-textSecondary",
                                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                                  }
                                                }
                                                color="primary"
                                                disableRipple={true}
                                                disabled={false}
                                                focusVisibleClassName="HvButton-focusVisible"
                                                onClick={[Function]}
                                                type="submit"
                                                variant="contained"
                                              >
                                                <WithStyles(ForwardRef(ButtonBase))
                                                  className="MuiButton-root HvButton-root MuiButton-contained LoginForm-login-10 LoginForm-sentenceCase-13 HvButton-primarySVG MuiButton-containedPrimary HvButton-primary"
                                                  component="button"
                                                  disableRipple={true}
                                                  disabled={false}
                                                  focusRipple={true}
                                                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                  onClick={[Function]}
                                                  type="submit"
                                                >
                                                  <ForwardRef(ButtonBase)
                                                    className="MuiButton-root HvButton-root MuiButton-contained LoginForm-login-10 LoginForm-sentenceCase-13 HvButton-primarySVG MuiButton-containedPrimary HvButton-primary"
                                                    classes={
                                                      Object {
                                                        "disabled": "Mui-disabled",
                                                        "focusVisible": "Mui-focusVisible",
                                                        "root": "MuiButtonBase-root",
                                                      }
                                                    }
                                                    component="button"
                                                    disableRipple={true}
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                    onClick={[Function]}
                                                    type="submit"
                                                  >
                                                    <button
                                                      className="MuiButtonBase-root MuiButton-root HvButton-root MuiButton-contained LoginForm-login-10 LoginForm-sentenceCase-13 HvButton-primarySVG MuiButton-containedPrimary HvButton-primary"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onDragLeave={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      onMouseDown={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                      tabIndex={0}
                                                      type="submit"
                                                    >
                                                      <span
                                                        className="MuiButton-label"
                                                      >
                                                        pages.login.loginForm.submit.login
                                                      </span>
                                                    </button>
                                                  </ForwardRef(ButtonBase)>
                                                </WithStyles(ForwardRef(ButtonBase))>
                                              </ForwardRef(Button)>
                                            </WithStyles(ForwardRef(Button))>
                                          </HvButton>
                                        </WithStyles(HvButton)>
                                        <WithStyles(HvButton)
                                          category="ghost"
                                          className="LoginForm-sentenceCase-13"
                                          classes={
                                            Object {
                                              "root": "LoginForm-forgot-11",
                                            }
                                          }
                                          disabled={false}
                                          onClick={[Function]}
                                        >
                                          <HvButton
                                            category="ghost"
                                            className="LoginForm-sentenceCase-13"
                                            classes={
                                              Object {
                                                "focusVisible": "HvButton-focusVisible",
                                                "ghost": "HvButton-ghost",
                                                "ghostDisabled": "HvButton-ghostDisabled",
                                                "ghostSVG": "HvButton-ghostSVG",
                                                "icon": "HvButton-icon",
                                                "iconSVG": "HvButton-iconSVG",
                                                "primary": "HvButton-primary",
                                                "primaryDisabled": "HvButton-primaryDisabled",
                                                "primarySVG": "HvButton-primarySVG",
                                                "root": "HvButton-root LoginForm-forgot-11",
                                                "secondary": "HvButton-secondary",
                                                "secondaryDisabled": "HvButton-secondaryDisabled",
                                                "secondarySVG": "HvButton-secondarySVG",
                                                "semantic": "HvButton-semantic",
                                                "semanticDisabled": "HvButton-semanticDisabled",
                                                "semanticSVG": "HvButton-semanticSVG",
                                                "startIcon": "HvButton-startIcon",
                                              }
                                            }
                                            disabled={false}
                                            onClick={[Function]}
                                          >
                                            <WithStyles(ForwardRef(Button))
                                              className="LoginForm-sentenceCase-13 HvButton-ghostSVG"
                                              classes={
                                                Object {
                                                  "containedPrimary": "HvButton-primary",
                                                  "disabled": "HvButton-ghostDisabled",
                                                  "outlinedPrimary": "HvButton-secondary",
                                                  "root": "HvButton-root LoginForm-forgot-11",
                                                  "startIcon": "HvButton-startIcon",
                                                  "textPrimary": "HvButton-ghost",
                                                }
                                              }
                                              color="primary"
                                              disableRipple={true}
                                              disabled={false}
                                              focusVisibleClassName="HvButton-focusVisible"
                                              onClick={[Function]}
                                              variant="text"
                                            >
                                              <ForwardRef(Button)
                                                className="LoginForm-sentenceCase-13 HvButton-ghostSVG"
                                                classes={
                                                  Object {
                                                    "colorInherit": "MuiButton-colorInherit",
                                                    "contained": "MuiButton-contained",
                                                    "containedPrimary": "MuiButton-containedPrimary HvButton-primary",
                                                    "containedSecondary": "MuiButton-containedSecondary",
                                                    "containedSizeLarge": "MuiButton-containedSizeLarge",
                                                    "containedSizeSmall": "MuiButton-containedSizeSmall",
                                                    "disableElevation": "MuiButton-disableElevation",
                                                    "disabled": "Mui-disabled HvButton-ghostDisabled",
                                                    "endIcon": "MuiButton-endIcon",
                                                    "focusVisible": "Mui-focusVisible",
                                                    "fullWidth": "MuiButton-fullWidth",
                                                    "iconSizeLarge": "MuiButton-iconSizeLarge",
                                                    "iconSizeMedium": "MuiButton-iconSizeMedium",
                                                    "iconSizeSmall": "MuiButton-iconSizeSmall",
                                                    "label": "MuiButton-label",
                                                    "outlined": "MuiButton-outlined",
                                                    "outlinedPrimary": "MuiButton-outlinedPrimary HvButton-secondary",
                                                    "outlinedSecondary": "MuiButton-outlinedSecondary",
                                                    "outlinedSizeLarge": "MuiButton-outlinedSizeLarge",
                                                    "outlinedSizeSmall": "MuiButton-outlinedSizeSmall",
                                                    "root": "MuiButton-root HvButton-root LoginForm-forgot-11",
                                                    "sizeLarge": "MuiButton-sizeLarge",
                                                    "sizeSmall": "MuiButton-sizeSmall",
                                                    "startIcon": "MuiButton-startIcon HvButton-startIcon",
                                                    "text": "MuiButton-text",
                                                    "textPrimary": "MuiButton-textPrimary HvButton-ghost",
                                                    "textSecondary": "MuiButton-textSecondary",
                                                    "textSizeLarge": "MuiButton-textSizeLarge",
                                                    "textSizeSmall": "MuiButton-textSizeSmall",
                                                  }
                                                }
                                                color="primary"
                                                disableRipple={true}
                                                disabled={false}
                                                focusVisibleClassName="HvButton-focusVisible"
                                                onClick={[Function]}
                                                variant="text"
                                              >
                                                <WithStyles(ForwardRef(ButtonBase))
                                                  className="MuiButton-root HvButton-root LoginForm-forgot-11 MuiButton-text LoginForm-sentenceCase-13 HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                  component="button"
                                                  disableRipple={true}
                                                  disabled={false}
                                                  focusRipple={true}
                                                  focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                  onClick={[Function]}
                                                  type="button"
                                                >
                                                  <ForwardRef(ButtonBase)
                                                    className="MuiButton-root HvButton-root LoginForm-forgot-11 MuiButton-text LoginForm-sentenceCase-13 HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                    classes={
                                                      Object {
                                                        "disabled": "Mui-disabled",
                                                        "focusVisible": "Mui-focusVisible",
                                                        "root": "MuiButtonBase-root",
                                                      }
                                                    }
                                                    component="button"
                                                    disableRipple={true}
                                                    disabled={false}
                                                    focusRipple={true}
                                                    focusVisibleClassName="Mui-focusVisible HvButton-focusVisible"
                                                    onClick={[Function]}
                                                    type="button"
                                                  >
                                                    <button
                                                      className="MuiButtonBase-root MuiButton-root HvButton-root LoginForm-forgot-11 MuiButton-text LoginForm-sentenceCase-13 HvButton-ghostSVG MuiButton-textPrimary HvButton-ghost"
                                                      disabled={false}
                                                      onBlur={[Function]}
                                                      onClick={[Function]}
                                                      onDragLeave={[Function]}
                                                      onFocus={[Function]}
                                                      onKeyDown={[Function]}
                                                      onKeyUp={[Function]}
                                                      onMouseDown={[Function]}
                                                      onMouseLeave={[Function]}
                                                      onMouseUp={[Function]}
                                                      onTouchEnd={[Function]}
                                                      onTouchMove={[Function]}
                                                      onTouchStart={[Function]}
                                                      tabIndex={0}
                                                      type="button"
                                                    >
                                                      <span
                                                        className="MuiButton-label"
                                                      >
                                                        pages.login.loginForm.forgot
                                                      </span>
                                                    </button>
                                                  </ForwardRef(ButtonBase)>
                                                </WithStyles(ForwardRef(ButtonBase))>
                                              </ForwardRef(Button)>
                                            </WithStyles(ForwardRef(Button))>
                                          </HvButton>
                                        </WithStyles(HvButton)>
                                      </div>
                                    </LoginForm>
                                  </WithStyles(LoginForm)>
                                </div>
                              </div>
                            </HvLogin>
                          </WithStyles(HvLogin)>
                        </Login>
                      </main>
                    </div>
                    <WithStyles(Footer)>
                      <Footer
                        classes={Object {}}
                      >
                        <WithStyles(HvFooter)>
                          <HvFooter
                            classes={
                              Object {
                                "copyright": "HvFooter-copyright",
                                "links": "HvFooter-links",
                                "name": "HvFooter-name",
                                "rightContainer": "HvFooter-rightContainer",
                                "root": "HvFooter-root",
                                "separator": "HvFooter-separator",
                              }
                            }
                          >
                            <footer
                              className="HvFooter-root"
                            >
                              <WithStyles(ForwardRef)
                                className="HvFooter-name"
                                variant="highlightText"
                              >
                                <ForwardRef
                                  className="HvFooter-name"
                                  classes={
                                    Object {
                                      "3xlTitle": "HvTypography-3xlTitle",
                                      "4xlTitle": "HvTypography-4xlTitle",
                                      "5xlTitle": "HvTypography-5xlTitle",
                                      "disabledText": "HvTypography-disabledText",
                                      "highlightText": "HvTypography-highlightText",
                                      "lTitle": "HvTypography-lTitle",
                                      "link": "HvTypography-link",
                                      "mTitle": "HvTypography-mTitle",
                                      "noWrap": "HvTypography-noWrap",
                                      "normalText": "HvTypography-normalText",
                                      "placeholderText": "HvTypography-placeholderText",
                                      "root": "HvTypography-root",
                                      "sTitle": "HvTypography-sTitle",
                                      "sectionTitle": "HvTypography-sectionTitle",
                                      "selectedNavText": "HvTypography-selectedNavText",
                                      "vizText": "HvTypography-vizText",
                                      "vizTextDisabled": "HvTypography-vizTextDisabled",
                                      "xlTitle": "HvTypography-xlTitle",
                                      "xsInlineLink": "HvTypography-xsInlineLink",
                                      "xsTitle": "HvTypography-xsTitle",
                                      "xxlTitle": "HvTypography-xxlTitle",
                                      "xxsTitle": "HvTypography-xxsTitle",
                                    }
                                  }
                                  variant="highlightText"
                                >
                                  <p
                                    className="HvFooter-name HvTypography-root HvTypography-highlightText"
                                  >
                                    Hitachi Vantara
                                  </p>
                                </ForwardRef>
                              </WithStyles(ForwardRef)>
                              <div
                                className="HvFooter-rightContainer"
                              >
                                <WithStyles(ForwardRef)
                                  className="HvFooter-copyright"
                                >
                                  <ForwardRef
                                    className="HvFooter-copyright"
                                    classes={
                                      Object {
                                        "3xlTitle": "HvTypography-3xlTitle",
                                        "4xlTitle": "HvTypography-4xlTitle",
                                        "5xlTitle": "HvTypography-5xlTitle",
                                        "disabledText": "HvTypography-disabledText",
                                        "highlightText": "HvTypography-highlightText",
                                        "lTitle": "HvTypography-lTitle",
                                        "link": "HvTypography-link",
                                        "mTitle": "HvTypography-mTitle",
                                        "noWrap": "HvTypography-noWrap",
                                        "normalText": "HvTypography-normalText",
                                        "placeholderText": "HvTypography-placeholderText",
                                        "root": "HvTypography-root",
                                        "sTitle": "HvTypography-sTitle",
                                        "sectionTitle": "HvTypography-sectionTitle",
                                        "selectedNavText": "HvTypography-selectedNavText",
                                        "vizText": "HvTypography-vizText",
                                        "vizTextDisabled": "HvTypography-vizTextDisabled",
                                        "xlTitle": "HvTypography-xlTitle",
                                        "xsInlineLink": "HvTypography-xsInlineLink",
                                        "xsTitle": "HvTypography-xsTitle",
                                        "xxlTitle": "HvTypography-xxlTitle",
                                        "xxsTitle": "HvTypography-xxsTitle",
                                      }
                                    }
                                  >
                                    <p
                                      className="HvFooter-copyright HvTypography-root HvTypography-normalText"
                                    >
                                      © Hitachi Vantara Corporation 2020. All Rights Reserved.
                                    </p>
                                  </ForwardRef>
                                </WithStyles(ForwardRef)>
                              </div>
                            </footer>
                          </HvFooter>
                        </WithStyles(HvFooter)>
                      </Footer>
                    </WithStyles(Footer)>
                  </Component>
                </Connect(Component)>
              </WithStyles(Connect(Component))>
            </Router>
          </MemoryRouter>
        </ThemeProvider>
      </StylesProvider>
    </HvProvider>
  </Provider>
</Component>
`;
